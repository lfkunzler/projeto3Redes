

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sun Jun 03 22:09:17 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     7                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    20                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    21  0000                     
    22                           ; Version 1.45
    23                           ; Generated 16/11/2017 GMT
    24                           ; 
    25                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    26                           ; All rights reserved.
    27                           ; 
    28                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    29                           ; 
    30                           ; Redistribution and use in source and binary forms, with or without modification, are
    31                           ; permitted provided that the following conditions are met:
    32                           ; 
    33                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    34                           ;        conditions and the following disclaimer.
    35                           ; 
    36                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    37                           ;        of conditions and the following disclaimer in the documentation and/or other
    38                           ;        materials provided with the distribution.
    39                           ; 
    40                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    41                           ;        software without specific prior written permission.
    42                           ; 
    43                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    44                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    45                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    46                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    47                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    48                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    49                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    50                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    51                           ; 
    52                           ; 
    53                           ; Code-generator required, PIC18F4550 Definitions
    54                           ; 
    55                           ; SFR Addresses
    56  0000                     _TXREG	set	4013
    57  0000                     _RCSTAbits	set	4011
    58  0000                     _SPBRG	set	4015
    59  0000                     _TXSTA	set	4012
    60  0000                     _RCSTA	set	4011
    61  0000                     _RCREG	set	4014
    62  0000                     _PORTDbits	set	3971
    63  0000                     _TRISDbits	set	3989
    64  0000                     _ADCON1	set	4033
    65  0000                     _TRMT	set	32097
    66  0000                     _TXIF	set	31988
    67  0000                     _RCIF	set	31989
    68                           
    69                           ; #config settings
    70  0000                     
    71                           	psect	cinit
    72  007B98                     __pcinit:
    73                           	opt stack 0
    74  007B98                     start_initialization:
    75                           	opt stack 0
    76  007B98                     __initialization:
    77                           	opt stack 0
    78                           
    79                           ; Clear objects allocated to BANK1 (64 bytes)
    80  007B98  EE01  F000         	lfsr	0,__pbssBANK1
    81  007B9C  0E40               	movlw	64
    82  007B9E                     clear_0:
    83  007B9E  6AEE               	clrf	postinc0,c
    84  007BA0  06E8               	decf	wreg,f,c
    85  007BA2  E1FD               	bnz	clear_0
    86                           
    87                           ; Clear objects allocated to BANK0 (32 bytes)
    88  007BA4  EE00  F0C5         	lfsr	0,__pbssBANK0
    89  007BA8  0E20               	movlw	32
    90  007BAA                     clear_1:
    91  007BAA  6AEE               	clrf	postinc0,c
    92  007BAC  06E8               	decf	wreg,f,c
    93  007BAE  E1FD               	bnz	clear_1
    94  007BB0                     end_of_initialization:
    95                           	opt stack 0
    96  007BB0                     __end_of__initialization:
    97                           	opt stack 0
    98  007BB0  0E00               	movlw	low (__Lmediumconst shr (0+16))
    99  007BB2  6EF8               	movwf	tblptru,c
   100  007BB4  0100               	movlb	0
   101  007BB6  EFF0  F03E         	goto	_main	;jump to C main() function
   102                           tblptru	equ	0xFF8
   103                           postinc0	equ	0xFEE
   104                           wreg	equ	0xFE8
   105                           
   106                           	psect	bssBANK0
   107  0000C5                     __pbssBANK0:
   108                           	opt stack 0
   109  0000C5                     main@F3868:
   110                           	opt stack 0
   111  0000C5                     	ds	32
   112                           tblptru	equ	0xFF8
   113                           postinc0	equ	0xFEE
   114                           wreg	equ	0xFE8
   115                           
   116                           	psect	bssBANK1
   117  000100                     __pbssBANK1:
   118                           	opt stack 0
   119  000100                     write_cmd@F3873:
   120                           	opt stack 0
   121  000100                     	ds	64
   122                           tblptru	equ	0xFF8
   123                           postinc0	equ	0xFEE
   124                           wreg	equ	0xFE8
   125                           
   126                           	psect	cstackBANK0
   127  000060                     __pcstackBANK0:
   128                           	opt stack 0
   129  000060                     main@msg:
   130                           	opt stack 0
   131                           
   132                           ; 32 bytes @ 0x0
   133  000060                     	ds	32
   134  000080                     main@dados:
   135                           	opt stack 0
   136                           
   137                           ; 69 bytes @ 0x20
   138  000080                     	ds	69
   139                           tblptru	equ	0xFF8
   140                           postinc0	equ	0xFEE
   141                           wreg	equ	0xFE8
   142                           
   143                           	psect	cstackCOMRAM
   144  000001                     __pcstackCOMRAM:
   145                           	opt stack 0
   146  000001                     ?_uart_check_rx:
   147                           	opt stack 0
   148  000001                     uart_send_byte@byte:
   149                           	opt stack 0
   150  000001                     mk_msg@data:
   151                           	opt stack 0
   152  000001                     calc_bcc@data:
   153                           	opt stack 0
   154  000001                     write_zero@dados:
   155                           	opt stack 0
   156                           
   157                           ; 2 bytes @ 0x0
   158  000001                     	ds	2
   159  000003                     mk_msg@count:
   160                           	opt stack 0
   161  000003                     calc_bcc@bcc:
   162                           	opt stack 0
   163  000003                     write_zero@i:
   164                           	opt stack 0
   165  000003                     uart_check_rx@tempo:
   166                           	opt stack 0
   167                           
   168                           ; 2 bytes @ 0x2
   169  000003                     	ds	1
   170  000004                     calc_bcc@i:
   171                           	opt stack 0
   172  000004                     mk_msg@string:
   173                           	opt stack 0
   174                           
   175                           ; 2 bytes @ 0x3
   176  000004                     	ds	1
   177  000005                     write_cmd@data:
   178                           	opt stack 0
   179  000005                     check_data@data:
   180                           	opt stack 0
   181                           
   182                           ; 2 bytes @ 0x4
   183  000005                     	ds	1
   184  000006                     mk_msg@i:
   185                           	opt stack 0
   186                           
   187                           ; 1 bytes @ 0x5
   188  000006                     	ds	1
   189  000007                     write_cmd@addr_to:
   190                           	opt stack 0
   191                           
   192                           ; 1 bytes @ 0x6
   193  000007                     	ds	1
   194  000008                     ??_write_cmd:
   195  000008                     _check_data$331:
   196                           	opt stack 0
   197                           
   198                           ; 2 bytes @ 0x7
   199  000008                     	ds	2
   200  00000A                     _check_data$332:
   201                           	opt stack 0
   202                           
   203                           ; 2 bytes @ 0x9
   204  00000A                     	ds	3
   205  00000D                     write_cmd@aux:
   206                           	opt stack 0
   207                           
   208                           ; 64 bytes @ 0xC
   209  00000D                     	ds	64
   210  00004D                     write_cmd@t:
   211                           	opt stack 0
   212                           
   213                           ; 1 bytes @ 0x4C
   214  00004D                     	ds	1
   215  00004E                     write_cmd@i:
   216                           	opt stack 0
   217                           
   218                           ; 1 bytes @ 0x4D
   219  00004E                     	ds	1
   220  00004F                     tblptru	equ	0xFF8
   221                           postinc0	equ	0xFEE
   222                           wreg	equ	0xFE8
   223                           
   224                           ; 1 bytes @ 0x4E
   225 ;;
   226 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   227 ;;
   228 ;; *************** function _main *****************
   229 ;; Defined at:
   230 ;;		line 18 in file "main.c"
   231 ;; Parameters:    Size  Location     Type
   232 ;;		None
   233 ;; Auto vars:     Size  Location     Type
   234 ;;  dados          69   32[BANK0 ] struct .
   235 ;;  msg            32    0[BANK0 ] unsigned char [32]
   236 ;; Return value:  Size  Location     Type
   237 ;;                  1    wreg      void 
   238 ;; Registers used:
   239 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   240 ;; Tracked objects:
   241 ;;		On entry : 0/0
   242 ;;		On exit  : 0/0
   243 ;;		Unchanged: 0/0
   244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   245 ;;      Params:         0       0       0       0       0       0       0       0       0
   246 ;;      Locals:         0     101       0       0       0       0       0       0       0
   247 ;;      Temps:          0       0       0       0       0       0       0       0       0
   248 ;;      Totals:         0     101       0       0       0       0       0       0       0
   249 ;;Total ram usage:      101 bytes
   250 ;; Hardware stack levels required when called:    2
   251 ;; This function calls:
   252 ;;		_check_data
   253 ;;		_mk_msg
   254 ;;		_uart_check_rx
   255 ;;		_uart_init
   256 ;;		_write_cmd
   257 ;;		_write_zero
   258 ;; This function is called by:
   259 ;;		Startup code after reset
   260 ;; This function uses a non-reentrant model
   261 ;;
   262                           
   263                           	psect	text0
   264  007DE0                     __ptext0:
   265                           	opt stack 0
   266  007DE0                     _main:
   267                           	opt stack 29
   268                           
   269                           ;main.c: 21: ADCON1 = 0x0F;
   270                           
   271                           ;incstack = 0
   272  007DE0  0E0F               	movlw	15
   273  007DE2  6EC1               	movwf	4033,c	;volatile
   274                           
   275                           ;main.c: 23: TRISDbits.RD0 = 0;
   276  007DE4  9095               	bcf	3989,0,c	;volatile
   277                           
   278                           ;main.c: 24: TRISDbits.RD1 = 0;
   279  007DE6  9295               	bcf	3989,1,c	;volatile
   280                           
   281                           ;main.c: 28: uart_init();
   282  007DE8  ECBD  F03D         	call	_uart_init	;wreg free
   283                           
   284                           ;main.c: 35: dados_t dados;
   285                           ;main.c: 36: char msg[32] = { 0 };
   286  007DEC  EE20  F0C5         	lfsr	2,main@F3868
   287  007DF0  EE10  F060         	lfsr	1,main@msg
   288  007DF4  0E1F               	movlw	31
   289  007DF6                     u481:
   290  007DF6  CFDB FFE3          	movff	plusw2,plusw1
   291  007DFA  06E8               	decf	wreg,f,c
   292  007DFC  E2FC               	bc	u481
   293                           
   294                           ;main.c: 41: PORTDbits.RD0 = 1;
   295  007DFE  8083               	bsf	3971,0,c	;volatile
   296                           
   297                           ;main.c: 42: PORTDbits.RD1 = 1;
   298  007E00  8283               	bsf	3971,1,c	;volatile
   299                           
   300                           ;main.c: 43: write_zero(&dados);
   301  007E02  0E80               	movlw	low main@dados
   302  007E04  6E01               	movwf	write_zero@dados,c
   303  007E06  0E00               	movlw	high main@dados
   304  007E08  6E02               	movwf	write_zero@dados+1,c
   305  007E0A  EC3B  F03E         	call	_write_zero	;wreg free
   306  007E0E                     
   307                           ;main.c: 50: if (!uart_check_rx()) {
   308  007E0E  ECF8  F03D         	call	_uart_check_rx	;wreg free
   309  007E12  5001               	movf	?_uart_check_rx,w,c
   310  007E14  1002               	iorwf	?_uart_check_rx+1,w,c
   311  007E16  A4D8               	btfss	status,2,c
   312  007E18  D01B               	goto	l36
   313  007E1A                     u490:
   314                           
   315                           ;main.c: 53: dados.buff[dados.count++] = RCREG;
   316                           
   317                           ;main.c: 51: do {
   318  007E1A  0100               	movlb	0	; () banked
   319  007E1C  5180               	movf	main@dados& (0+255),w,b
   320  007E1E  0D01               	mullw	1
   321  007E20  0E01               	movlw	1
   322  007E22  26F3               	addwf	prodl,f,c
   323  007E24  0E00               	movlw	0
   324  007E26  22F4               	addwfc	prodh,f,c
   325  007E28  0E80               	movlw	low main@dados
   326  007E2A  24F3               	addwf	prodl,w,c
   327  007E2C  6ED9               	movwf	fsr2l,c
   328  007E2E  0E00               	movlw	high main@dados
   329  007E30  20F4               	addwfc	prodh,w,c
   330  007E32  6EDA               	movwf	fsr2h,c
   331  007E34  CFAE FFDF          	movff	4014,indf2	;volatile
   332                           
   333                           ; BSR set to: 0
   334  007E38  2B80               	incf	main@dados& (0+255),f,b
   335                           
   336                           ; BSR set to: 0
   337                           ;main.c: 54: } while (!uart_check_rx());
   338  007E3A  ECF8  F03D         	call	_uart_check_rx	;wreg free
   339  007E3E  5001               	movf	?_uart_check_rx,w,c
   340  007E40  1002               	iorwf	?_uart_check_rx+1,w,c
   341  007E42  B4D8               	btfsc	status,2,c
   342  007E44  D7EA               	goto	u490
   343                           
   344                           ;main.c: 55: dados.data_flag = 1;
   345  007E46  0E00               	movlw	0
   346  007E48  0100               	movlb	0	; () banked
   347  007E4A  6FC2               	movwf	(main@dados+66)& (0+255),b
   348  007E4C  0E01               	movlw	1
   349  007E4E  6FC1               	movwf	(main@dados+65)& (0+255),b
   350  007E50                     l36:
   351                           
   352                           ;main.c: 56: }
   353                           ;main.c: 59: if (dados.data_flag) {
   354                           
   355                           ; BSR set to: 0
   356  007E50  0100               	movlb	0	; () banked
   357  007E52  51C1               	movf	(main@dados+65)& (0+255),w,b
   358  007E54  11C2               	iorwf	(main@dados+66)& (0+255),w,b
   359  007E56  A4D8               	btfss	status,2,c
   360  007E58  D020               	goto	l40
   361  007E5A  D7D9               	goto	l35
   362  007E5C                     l46:
   363                           
   364                           ;main.c: 76: PORTDbits.RD0 = 0;
   365  007E5C  9083               	bcf	3971,0,c	;volatile
   366                           
   367                           ;main.c: 77: msg[0] = 0x06;
   368  007E5E  0E06               	movlw	6
   369  007E60  0100               	movlb	0	; () banked
   370  007E62  6F60               	movwf	main@msg& (0+255),b
   371                           
   372                           ; BSR set to: 0
   373                           ;main.c: 78: mk_msg(&dados, 1, msg);
   374  007E64  0E80               	movlw	low main@dados
   375  007E66  6E01               	movwf	mk_msg@data,c
   376  007E68  0E00               	movlw	high main@dados
   377  007E6A  6E02               	movwf	mk_msg@data+1,c
   378  007E6C  0E01               	movlw	1
   379  007E6E  6E03               	movwf	mk_msg@count,c
   380  007E70  0E60               	movlw	low main@msg
   381  007E72  6E04               	movwf	mk_msg@string,c
   382  007E74  0E00               	movlw	high main@msg
   383  007E76  6E05               	movwf	mk_msg@string+1,c
   384  007E78  EC16  F03E         	call	_mk_msg	;wreg free
   385                           
   386                           ;main.c: 79: write_cmd(&dados, dados.addr_from);
   387  007E7C  0E80               	movlw	low main@dados
   388  007E7E  6E05               	movwf	write_cmd@data,c
   389  007E80  0E00               	movlw	high main@dados
   390  007E82  6E06               	movwf	write_cmd@data+1,c
   391  007E84  C0C3  F007         	movff	main@dados+67,write_cmd@addr_to
   392  007E88  EC72  F03E         	call	_write_cmd	;wreg free
   393                           
   394                           ;main.c: 85: break;
   395  007E8C  D024               	goto	l42
   396  007E8E                     l47:
   397                           
   398                           ;main.c: 87: PORTDbits.RD0 = 1;
   399  007E8E  8083               	bsf	3971,0,c	;volatile
   400                           
   401                           ;main.c: 88: break;
   402  007E90  D022               	goto	l42
   403  007E92                     l48:
   404                           
   405                           ;main.c: 90: PORTDbits.RD1 = 0;
   406  007E92  9283               	bcf	3971,1,c	;volatile
   407                           
   408                           ;main.c: 91: break;
   409  007E94  D020               	goto	l42
   410  007E96                     l49:
   411                           
   412                           ;main.c: 93: PORTDbits.RD1 = 1;
   413  007E96  8283               	bsf	3971,1,c	;volatile
   414                           
   415                           ;main.c: 98: }
   416                           
   417                           ;main.c: 97: break;
   418                           
   419                           ;main.c: 95: default:
   420                           
   421                           ;main.c: 94: break;
   422  007E98  D01E               	goto	l42
   423  007E9A                     l40:
   424  007E9A  0E80               	movlw	low main@dados
   425  007E9C  6E05               	movwf	check_data@data,c
   426  007E9E  0E00               	movlw	high main@dados
   427  007EA0  6E06               	movwf	check_data@data+1,c
   428  007EA2  EC72  F03F         	call	_check_data	;wreg free
   429                           
   430                           ; Switch size 1, requested type "space"
   431                           ; Number of cases is 8, Range of values is 0 to 7
   432                           ; switch strategies available:
   433                           ; Name         Instructions Cycles
   434                           ; simple_byte           25    13 (average)
   435                           ;	Chosen strategy is simple_byte
   436  007EA6  0A00               	xorlw	0	; case 0
   437  007EA8  B4D8               	btfsc	status,2,c
   438  007EAA  D015               	goto	l42
   439  007EAC  0A01               	xorlw	1	; case 1
   440  007EAE  B4D8               	btfsc	status,2,c
   441  007EB0  D012               	goto	l42
   442  007EB2  0A03               	xorlw	3	; case 2
   443  007EB4  B4D8               	btfsc	status,2,c
   444  007EB6  D00F               	goto	l42
   445  007EB8  0A01               	xorlw	1	; case 3
   446  007EBA  B4D8               	btfsc	status,2,c
   447  007EBC  D00C               	goto	l42
   448  007EBE  0A07               	xorlw	7	; case 4
   449  007EC0  B4D8               	btfsc	status,2,c
   450  007EC2  D7CC               	goto	l46
   451  007EC4  0A01               	xorlw	1	; case 5
   452  007EC6  B4D8               	btfsc	status,2,c
   453  007EC8  D7E4               	goto	l48
   454  007ECA  0A03               	xorlw	3	; case 6
   455  007ECC  B4D8               	btfsc	status,2,c
   456  007ECE  D7DF               	goto	l47
   457  007ED0  0A01               	xorlw	1	; case 7
   458  007ED2  B4D8               	btfsc	status,2,c
   459  007ED4  D7E0               	goto	l49
   460  007ED6                     l42:
   461                           
   462                           ;main.c: 100: write_zero(&dados);
   463  007ED6  0E80               	movlw	low main@dados
   464  007ED8  6E01               	movwf	write_zero@dados,c
   465  007EDA  0E00               	movlw	high main@dados
   466  007EDC  6E02               	movwf	write_zero@dados+1,c
   467  007EDE  EC3B  F03E         	call	_write_zero	;wreg free
   468  007EE2  D795               	goto	l35
   469  007EE4                     __end_of_main:
   470                           	opt stack 0
   471                           tblptru	equ	0xFF8
   472                           prodh	equ	0xFF4
   473                           prodl	equ	0xFF3
   474                           postinc0	equ	0xFEE
   475                           wreg	equ	0xFE8
   476                           plusw1	equ	0xFE3
   477                           indf2	equ	0xFDF
   478                           plusw2	equ	0xFDB
   479                           fsr2h	equ	0xFDA
   480                           fsr2l	equ	0xFD9
   481                           status	equ	0xFD8
   482                           
   483 ;; *************** function _write_zero *****************
   484 ;; Defined at:
   485 ;;		line 130 in file "comunicacao.c"
   486 ;; Parameters:    Size  Location     Type
   487 ;;  dados           2    0[COMRAM] PTR struct .
   488 ;;		 -> main@dados(69), 
   489 ;; Auto vars:     Size  Location     Type
   490 ;;  i               1    2[COMRAM] unsigned char 
   491 ;; Return value:  Size  Location     Type
   492 ;;                  1    wreg      void 
   493 ;; Registers used:
   494 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
   495 ;; Tracked objects:
   496 ;;		On entry : 0/0
   497 ;;		On exit  : 0/0
   498 ;;		Unchanged: 0/0
   499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   500 ;;      Params:         2       0       0       0       0       0       0       0       0
   501 ;;      Locals:         1       0       0       0       0       0       0       0       0
   502 ;;      Temps:          0       0       0       0       0       0       0       0       0
   503 ;;      Totals:         3       0       0       0       0       0       0       0       0
   504 ;;Total ram usage:        3 bytes
   505 ;; Hardware stack levels used:    1
   506 ;; This function calls:
   507 ;;		Nothing
   508 ;; This function is called by:
   509 ;;		_main
   510 ;; This function uses a non-reentrant model
   511 ;;
   512                           
   513                           	psect	text1
   514  007C76                     __ptext1:
   515                           	opt stack 0
   516  007C76                     _write_zero:
   517                           	opt stack 30
   518                           
   519                           ;comunicacao.c: 132: for (uint8_t i = 0; i < 64; i++) {
   520                           
   521                           ;incstack = 0
   522  007C76  0E00               	movlw	0
   523  007C78  6E03               	movwf	write_zero@i,c
   524  007C7A                     l996:
   525  007C7A  0E3F               	movlw	63
   526  007C7C  6403               	cpfsgt	write_zero@i,c
   527  007C7E  D001               	goto	l142
   528  007C80  D010               	goto	u320
   529  007C82                     l142:
   530                           
   531                           ;comunicacao.c: 133: dados->buff[i] = 0x00;
   532  007C82  5003               	movf	write_zero@i,w,c
   533  007C84  0D01               	mullw	1
   534  007C86  0E01               	movlw	1
   535  007C88  26F3               	addwf	prodl,f,c
   536  007C8A  0E00               	movlw	0
   537  007C8C  22F4               	addwfc	prodh,f,c
   538  007C8E  50F3               	movf	prodl,w,c
   539  007C90  2401               	addwf	write_zero@dados,w,c
   540  007C92  6ED9               	movwf	fsr2l,c
   541  007C94  50F4               	movf	prodh,w,c
   542  007C96  2002               	addwfc	write_zero@dados+1,w,c
   543  007C98  6EDA               	movwf	fsr2h,c
   544  007C9A  0E00               	movlw	0
   545  007C9C  6EDF               	movwf	indf2,c
   546  007C9E  2A03               	incf	write_zero@i,f,c
   547  007CA0  D7EC               	goto	l996
   548  007CA2                     u320:
   549                           
   550                           ;comunicacao.c: 134: }
   551                           ;comunicacao.c: 136: dados->count = 0;
   552  007CA2  C001  FFD9         	movff	write_zero@dados,fsr2l
   553  007CA6  C002  FFDA         	movff	write_zero@dados+1,fsr2h
   554  007CAA  0E00               	movlw	0
   555  007CAC  6EDF               	movwf	indf2,c
   556                           
   557                           ;comunicacao.c: 137: dados->command = 0;
   558  007CAE  EE20 F044          	lfsr	2,68
   559  007CB2  5001               	movf	write_zero@dados,w,c
   560  007CB4  26D9               	addwf	fsr2l,f,c
   561  007CB6  5002               	movf	write_zero@dados+1,w,c
   562  007CB8  22DA               	addwfc	fsr2h,f,c
   563  007CBA  0E00               	movlw	0
   564  007CBC  6EDF               	movwf	indf2,c
   565                           
   566                           ;comunicacao.c: 138: dados->data_flag = 0;
   567  007CBE  EE20 F041          	lfsr	2,65
   568  007CC2  5001               	movf	write_zero@dados,w,c
   569  007CC4  26D9               	addwf	fsr2l,f,c
   570  007CC6  5002               	movf	write_zero@dados+1,w,c
   571  007CC8  22DA               	addwfc	fsr2h,f,c
   572  007CCA  0E00               	movlw	0
   573  007CCC  6EDE               	movwf	postinc2,c
   574  007CCE  0E00               	movlw	0
   575  007CD0  6EDD               	movwf	postdec2,c
   576                           
   577                           ;comunicacao.c: 139: dados->addr_from = 0;
   578  007CD2  EE20 F043          	lfsr	2,67
   579  007CD6  5001               	movf	write_zero@dados,w,c
   580  007CD8  26D9               	addwf	fsr2l,f,c
   581  007CDA  5002               	movf	write_zero@dados+1,w,c
   582  007CDC  22DA               	addwfc	fsr2h,f,c
   583  007CDE  0E00               	movlw	0
   584  007CE0  6EDF               	movwf	indf2,c
   585  007CE2  0012               	return		;funcret
   586  007CE4                     __end_of_write_zero:
   587                           	opt stack 0
   588                           tblptru	equ	0xFF8
   589                           prodh	equ	0xFF4
   590                           prodl	equ	0xFF3
   591                           postinc0	equ	0xFEE
   592                           wreg	equ	0xFE8
   593                           plusw1	equ	0xFE3
   594                           indf2	equ	0xFDF
   595                           postinc2	equ	0xFDE
   596                           postdec2	equ	0xFDD
   597                           plusw2	equ	0xFDB
   598                           fsr2h	equ	0xFDA
   599                           fsr2l	equ	0xFD9
   600                           status	equ	0xFD8
   601                           
   602 ;; *************** function _write_cmd *****************
   603 ;; Defined at:
   604 ;;		line 67 in file "comunicacao.c"
   605 ;; Parameters:    Size  Location     Type
   606 ;;  data            2    4[COMRAM] PTR struct .
   607 ;;		 -> main@dados(69), 
   608 ;;  addr_to         1    6[COMRAM] unsigned char 
   609 ;; Auto vars:     Size  Location     Type
   610 ;;  t               1   76[COMRAM] unsigned char 
   611 ;;  aux            64   12[COMRAM] unsigned char [64]
   612 ;;  i               1   77[COMRAM] unsigned char 
   613 ;; Return value:  Size  Location     Type
   614 ;;                  1    wreg      void 
   615 ;; Registers used:
   616 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   617 ;; Tracked objects:
   618 ;;		On entry : 0/0
   619 ;;		On exit  : 0/0
   620 ;;		Unchanged: 0/0
   621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   622 ;;      Params:         3       0       0       0       0       0       0       0       0
   623 ;;      Locals:        66       0       0       0       0       0       0       0       0
   624 ;;      Temps:          5       0       0       0       0       0       0       0       0
   625 ;;      Totals:        74       0       0       0       0       0       0       0       0
   626 ;;Total ram usage:       74 bytes
   627 ;; Hardware stack levels used:    1
   628 ;; Hardware stack levels required when called:    1
   629 ;; This function calls:
   630 ;;		_calc_bcc
   631 ;;		_uart_send_byte
   632 ;; This function is called by:
   633 ;;		_main
   634 ;; This function uses a non-reentrant model
   635 ;;
   636                           
   637                           	psect	text2
   638  007CE4                     __ptext2:
   639                           	opt stack 0
   640  007CE4                     _write_cmd:
   641                           	opt stack 29
   642                           
   643                           ;comunicacao.c: 69: char aux[64] = {0};
   644                           
   645                           ;incstack = 0
   646  007CE4  EE21  F000         	lfsr	2,write_cmd@F3873
   647  007CE8  EE10  F00D         	lfsr	1,write_cmd@aux
   648  007CEC  0E3F               	movlw	63
   649  007CEE                     u371:
   650  007CEE  CFDB FFE3          	movff	plusw2,plusw1
   651  007CF2  06E8               	decf	wreg,f,c
   652  007CF4  E2FC               	bc	u371
   653                           
   654                           ;comunicacao.c: 71: aux[0] = 0x02;
   655  007CF6  0E02               	movlw	2
   656  007CF8  6E0D               	movwf	write_cmd@aux,c
   657                           
   658                           ;comunicacao.c: 72: aux[1] = addr_to;
   659  007CFA  C007  F00E         	movff	write_cmd@addr_to,write_cmd@aux+1
   660                           
   661                           ;comunicacao.c: 73: aux[2] = 0x09;
   662  007CFE  0E09               	movlw	9
   663  007D00  6E0F               	movwf	write_cmd@aux+2,c
   664                           
   665                           ;comunicacao.c: 74: aux[3] = data->command;
   666  007D02  EE20 F044          	lfsr	2,68
   667  007D06  5005               	movf	write_cmd@data,w,c
   668  007D08  26D9               	addwf	fsr2l,f,c
   669  007D0A  5006               	movf	write_cmd@data+1,w,c
   670  007D0C  22DA               	addwfc	fsr2h,f,c
   671  007D0E  50DF               	movf	indf2,w,c
   672  007D10  6E10               	movwf	write_cmd@aux+3,c
   673                           
   674                           ;comunicacao.c: 75: aux[4] = data->count;
   675  007D12  C005  FFD9         	movff	write_cmd@data,fsr2l
   676  007D16  C006  FFDA         	movff	write_cmd@data+1,fsr2h
   677  007D1A  50DF               	movf	indf2,w,c
   678  007D1C  6E11               	movwf	write_cmd@aux+4,c
   679                           
   680                           ;comunicacao.c: 77: uint8_t i = 0;
   681  007D1E  0E00               	movlw	0
   682  007D20  6E4E               	movwf	write_cmd@i,c
   683                           
   684                           ;comunicacao.c: 78: while (i < data->count) {
   685  007D22  D01C               	goto	l109
   686  007D24                     
   687                           ;comunicacao.c: 79: aux[i + 5] = data->buff[i++];
   688  007D24  504E               	movf	write_cmd@i,w,c
   689  007D26  0D01               	mullw	1
   690  007D28  0E01               	movlw	1
   691  007D2A  26F3               	addwf	prodl,f,c
   692  007D2C  0E00               	movlw	0
   693  007D2E  22F4               	addwfc	prodh,f,c
   694  007D30  50F3               	movf	prodl,w,c
   695  007D32  2405               	addwf	write_cmd@data,w,c
   696  007D34  6ED9               	movwf	fsr2l,c
   697  007D36  50F4               	movf	prodh,w,c
   698  007D38  2006               	addwfc	write_cmd@data+1,w,c
   699  007D3A  6EDA               	movwf	fsr2h,c
   700  007D3C  504E               	movf	write_cmd@i,w,c
   701  007D3E  6E08               	movwf	??_write_cmd& (0+255),c
   702  007D40  6A09               	clrf	(??_write_cmd+1)& (0+255),c
   703  007D42  0E05               	movlw	5
   704  007D44  2608               	addwf	??_write_cmd,f,c
   705  007D46  0E00               	movlw	0
   706  007D48  2209               	addwfc	??_write_cmd+1,f,c
   707  007D4A  0E0D               	movlw	low write_cmd@aux
   708  007D4C  2408               	addwf	??_write_cmd,w,c
   709  007D4E  6EE1               	movwf	fsr1l,c
   710  007D50  0E00               	movlw	high write_cmd@aux
   711  007D52  2009               	addwfc	??_write_cmd+1,w,c
   712  007D54  6EE2               	movwf	fsr1h,c
   713  007D56  CFDF FFE7          	movff	indf2,indf1
   714  007D5A  2A4E               	incf	write_cmd@i,f,c
   715  007D5C                     l109:
   716  007D5C  C005  FFD9         	movff	write_cmd@data,fsr2l
   717  007D60  C006  FFDA         	movff	write_cmd@data+1,fsr2h
   718  007D64  50DE               	movf	postinc2,w,c
   719  007D66  5C4E               	subwf	write_cmd@i,w,c
   720  007D68  A0D8               	btfss	status,0,c
   721  007D6A  D7DC               	goto	l110
   722                           
   723                           ;comunicacao.c: 80: }
   724                           ;comunicacao.c: 82: aux[i + 5] = calc_bcc(data);
   725  007D6C  C005  F001         	movff	write_cmd@data,calc_bcc@data
   726  007D70  C006  F002         	movff	write_cmd@data+1,calc_bcc@data+1
   727  007D74  ECDD  F03D         	call	_calc_bcc	;wreg free
   728  007D78  6E08               	movwf	??_write_cmd& (0+255),c
   729  007D7A  504E               	movf	write_cmd@i,w,c
   730  007D7C  6E09               	movwf	(??_write_cmd+1)& (0+255),c
   731  007D7E  6A0A               	clrf	(??_write_cmd+2)& (0+255),c
   732  007D80  0E05               	movlw	5
   733  007D82  2609               	addwf	??_write_cmd+1,f,c
   734  007D84  0E00               	movlw	0
   735  007D86  220A               	addwfc	??_write_cmd+2,f,c
   736  007D88  0E0D               	movlw	low write_cmd@aux
   737  007D8A  2409               	addwf	??_write_cmd+1,w,c
   738  007D8C  6ED9               	movwf	fsr2l,c
   739  007D8E  0E00               	movlw	high write_cmd@aux
   740  007D90  200A               	addwfc	??_write_cmd+2,w,c
   741  007D92  6EDA               	movwf	fsr2h,c
   742  007D94  C008  FFDF         	movff	??_write_cmd,indf2
   743                           
   744                           ;comunicacao.c: 84: for (uint8_t t = 0; t < i + 6; t++) {
   745  007D98  0E00               	movlw	0
   746  007D9A  6E4D               	movwf	write_cmd@t,c
   747  007D9C  D00C               	goto	l112
   748  007D9E                     
   749                           ;comunicacao.c: 85: uart_send_byte(aux[t]);
   750  007D9E  504D               	movf	write_cmd@t,w,c
   751  007DA0  0D01               	mullw	1
   752  007DA2  0E0D               	movlw	low write_cmd@aux
   753  007DA4  24F3               	addwf	prodl,w,c
   754  007DA6  6ED9               	movwf	fsr2l,c
   755  007DA8  0E00               	movlw	high write_cmd@aux
   756  007DAA  20F4               	addwfc	prodh,w,c
   757  007DAC  6EDA               	movwf	fsr2h,c
   758  007DAE  50DF               	movf	indf2,w,c
   759  007DB0  ECC4  F03D         	call	_uart_send_byte
   760  007DB4  2A4D               	incf	write_cmd@t,f,c
   761  007DB6                     l112:
   762  007DB6  504E               	movf	write_cmd@i,w,c
   763  007DB8  6E08               	movwf	??_write_cmd& (0+255),c
   764  007DBA  6A09               	clrf	(??_write_cmd+1)& (0+255),c
   765  007DBC  0E06               	movlw	6
   766  007DBE  2608               	addwf	??_write_cmd,f,c
   767  007DC0  0E00               	movlw	0
   768  007DC2  2209               	addwfc	??_write_cmd+1,f,c
   769  007DC4  504D               	movf	write_cmd@t,w,c
   770  007DC6  6E0A               	movwf	(??_write_cmd+2)& (0+255),c
   771  007DC8  6A0B               	clrf	(??_write_cmd+3)& (0+255),c
   772  007DCA  5008               	movf	??_write_cmd,w,c
   773  007DCC  5C0A               	subwf	??_write_cmd+2,w,c
   774  007DCE  500B               	movf	??_write_cmd+3,w,c
   775  007DD0  0A80               	xorlw	128
   776  007DD2  6E0C               	movwf	(??_write_cmd+4)& (0+255),c
   777  007DD4  5009               	movf	??_write_cmd+1,w,c
   778  007DD6  0A80               	xorlw	128
   779  007DD8  580C               	subwfb	(??_write_cmd+4)& (0+255),w,c
   780  007DDA  B0D8               	btfsc	status,0,c
   781  007DDC  0012               	return	
   782  007DDE  D7DF               	goto	l113
   783  007DE0                     __end_of_write_cmd:
   784                           	opt stack 0
   785                           tblptru	equ	0xFF8
   786                           prodh	equ	0xFF4
   787                           prodl	equ	0xFF3
   788                           postinc0	equ	0xFEE
   789                           wreg	equ	0xFE8
   790                           indf1	equ	0xFE7
   791                           plusw1	equ	0xFE3
   792                           fsr1h	equ	0xFE2
   793                           fsr1l	equ	0xFE1
   794                           indf2	equ	0xFDF
   795                           postinc2	equ	0xFDE
   796                           postdec2	equ	0xFDD
   797                           plusw2	equ	0xFDB
   798                           fsr2h	equ	0xFDA
   799                           fsr2l	equ	0xFD9
   800                           status	equ	0xFD8
   801                           
   802 ;; *************** function _uart_send_byte *****************
   803 ;; Defined at:
   804 ;;		line 50 in file "comunicacao.c"
   805 ;; Parameters:    Size  Location     Type
   806 ;;  byte            1    wreg     unsigned char 
   807 ;; Auto vars:     Size  Location     Type
   808 ;;  byte            1    0[COMRAM] unsigned char 
   809 ;; Return value:  Size  Location     Type
   810 ;;                  1    wreg      void 
   811 ;; Registers used:
   812 ;;		wreg
   813 ;; Tracked objects:
   814 ;;		On entry : 0/0
   815 ;;		On exit  : 0/0
   816 ;;		Unchanged: 0/0
   817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   818 ;;      Params:         0       0       0       0       0       0       0       0       0
   819 ;;      Locals:         1       0       0       0       0       0       0       0       0
   820 ;;      Temps:          0       0       0       0       0       0       0       0       0
   821 ;;      Totals:         1       0       0       0       0       0       0       0       0
   822 ;;Total ram usage:        1 bytes
   823 ;; Hardware stack levels used:    1
   824 ;; This function calls:
   825 ;;		Nothing
   826 ;; This function is called by:
   827 ;;		_write_cmd
   828 ;; This function uses a non-reentrant model
   829 ;;
   830                           
   831                           	psect	text3
   832  007B88                     __ptext3:
   833                           	opt stack 0
   834  007B88                     _uart_send_byte:
   835                           	opt stack 29
   836                           
   837                           ;incstack = 0
   838                           ;uart_send_byte@byte stored from wreg
   839  007B88  6E01               	movwf	uart_send_byte@byte,c
   840  007B8A                     
   841                           ;comunicacao.c: 53: while (TXIF == 0);
   842  007B8A  A89E               	btfss	3998,4,c	;volatile
   843  007B8C  D7FE               	goto	l970
   844                           
   845                           ;comunicacao.c: 54: TXREG = byte;
   846  007B8E  C001  FFAD         	movff	uart_send_byte@byte,4013	;volatile
   847  007B92  B2AC               	btfsc	4012,1,c	;volatile
   848  007B94  0012               	return	
   849  007B96  D7FD               	goto	l96
   850  007B98                     __end_of_uart_send_byte:
   851                           	opt stack 0
   852                           tblptru	equ	0xFF8
   853                           prodh	equ	0xFF4
   854                           prodl	equ	0xFF3
   855                           postinc0	equ	0xFEE
   856                           wreg	equ	0xFE8
   857                           indf1	equ	0xFE7
   858                           plusw1	equ	0xFE3
   859                           fsr1h	equ	0xFE2
   860                           fsr1l	equ	0xFE1
   861                           indf2	equ	0xFDF
   862                           postinc2	equ	0xFDE
   863                           postdec2	equ	0xFDD
   864                           plusw2	equ	0xFDB
   865                           fsr2h	equ	0xFDA
   866                           fsr2l	equ	0xFD9
   867                           status	equ	0xFD8
   868                           
   869 ;; *************** function _uart_init *****************
   870 ;; Defined at:
   871 ;;		line 9 in file "comunicacao.c"
   872 ;; Parameters:    Size  Location     Type
   873 ;;		None
   874 ;; Auto vars:     Size  Location     Type
   875 ;;		None
   876 ;; Return value:  Size  Location     Type
   877 ;;                  1    wreg      void 
   878 ;; Registers used:
   879 ;;		wreg, status,2
   880 ;; Tracked objects:
   881 ;;		On entry : 0/0
   882 ;;		On exit  : 0/0
   883 ;;		Unchanged: 0/0
   884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   885 ;;      Params:         0       0       0       0       0       0       0       0       0
   886 ;;      Locals:         0       0       0       0       0       0       0       0       0
   887 ;;      Temps:          0       0       0       0       0       0       0       0       0
   888 ;;      Totals:         0       0       0       0       0       0       0       0       0
   889 ;;Total ram usage:        0 bytes
   890 ;; Hardware stack levels used:    1
   891 ;; This function calls:
   892 ;;		Nothing
   893 ;; This function is called by:
   894 ;;		_main
   895 ;; This function uses a non-reentrant model
   896 ;;
   897                           
   898                           	psect	text4
   899  007B7A                     __ptext4:
   900                           	opt stack 0
   901  007B7A                     _uart_init:
   902                           	opt stack 30
   903                           
   904                           ;comunicacao.c: 11: RCSTA = 0x90;
   905                           
   906                           ;incstack = 0
   907  007B7A  0E90               	movlw	144
   908  007B7C  6EAB               	movwf	4011,c	;volatile
   909                           
   910                           ;comunicacao.c: 12: TXSTA = 0x24;
   911  007B7E  0E24               	movlw	36
   912  007B80  6EAC               	movwf	4012,c	;volatile
   913                           
   914                           ;comunicacao.c: 19: SPBRG = 51;
   915  007B82  0E33               	movlw	51
   916  007B84  6EAF               	movwf	4015,c	;volatile
   917  007B86  0012               	return		;funcret
   918  007B88                     __end_of_uart_init:
   919                           	opt stack 0
   920                           tblptru	equ	0xFF8
   921                           prodh	equ	0xFF4
   922                           prodl	equ	0xFF3
   923                           postinc0	equ	0xFEE
   924                           wreg	equ	0xFE8
   925                           indf1	equ	0xFE7
   926                           plusw1	equ	0xFE3
   927                           fsr1h	equ	0xFE2
   928                           fsr1l	equ	0xFE1
   929                           indf2	equ	0xFDF
   930                           postinc2	equ	0xFDE
   931                           postdec2	equ	0xFDD
   932                           plusw2	equ	0xFDB
   933                           fsr2h	equ	0xFDA
   934                           fsr2l	equ	0xFD9
   935                           status	equ	0xFD8
   936                           
   937 ;; *************** function _uart_check_rx *****************
   938 ;; Defined at:
   939 ;;		line 22 in file "comunicacao.c"
   940 ;; Parameters:    Size  Location     Type
   941 ;;		None
   942 ;; Auto vars:     Size  Location     Type
   943 ;;  tempo           2    2[COMRAM] unsigned int 
   944 ;; Return value:  Size  Location     Type
   945 ;;                  2    0[COMRAM] short 
   946 ;; Registers used:
   947 ;;		wreg, status,2, status,0
   948 ;; Tracked objects:
   949 ;;		On entry : 0/0
   950 ;;		On exit  : 0/0
   951 ;;		Unchanged: 0/0
   952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   953 ;;      Params:         2       0       0       0       0       0       0       0       0
   954 ;;      Locals:         2       0       0       0       0       0       0       0       0
   955 ;;      Temps:          0       0       0       0       0       0       0       0       0
   956 ;;      Totals:         4       0       0       0       0       0       0       0       0
   957 ;;Total ram usage:        4 bytes
   958 ;; Hardware stack levels used:    1
   959 ;; This function calls:
   960 ;;		Nothing
   961 ;; This function is called by:
   962 ;;		_main
   963 ;; This function uses a non-reentrant model
   964 ;;
   965                           
   966                           	psect	text5
   967  007BF0                     __ptext5:
   968                           	opt stack 0
   969  007BF0                     _uart_check_rx:
   970                           	opt stack 30
   971                           
   972                           ;comunicacao.c: 24: uint16_t tempo;
   973                           ;comunicacao.c: 26: RCSTAbits.OERR = 0;
   974                           
   975                           ;incstack = 0
   976  007BF0  92AB               	bcf	4011,1,c	;volatile
   977                           
   978                           ;comunicacao.c: 27: RCSTAbits.CREN = 0;
   979  007BF2  98AB               	bcf	4011,4,c	;volatile
   980                           
   981                           ;comunicacao.c: 28: __nop();
   982  007BF4  F000               	nop	
   983                           
   984                           ;comunicacao.c: 29: RCSTAbits.CREN = 1;
   985  007BF6  88AB               	bsf	4011,4,c	;volatile
   986                           
   987                           ;comunicacao.c: 31: tempo = 0xFFF;
   988  007BF8  0E0F               	movlw	15
   989  007BFA  6E04               	movwf	uart_check_rx@tempo+1,c
   990  007BFC  6803               	setf	uart_check_rx@tempo,c
   991  007BFE                     
   992                           ;comunicacao.c: 34: --tempo;
   993  007BFE  0603               	decf	uart_check_rx@tempo,f,c
   994  007C00  A0D8               	btfss	status,0,c
   995  007C02  0604               	decf	uart_check_rx@tempo+1,f,c
   996                           
   997                           ;comunicacao.c: 35: } while (!RCIF && tempo > 0);
   998  007C04  BA9E               	btfsc	3998,5,c	;volatile
   999  007C06  D004               	goto	u340
  1000  007C08  5003               	movf	uart_check_rx@tempo,w,c
  1001  007C0A  1004               	iorwf	uart_check_rx@tempo+1,w,c
  1002  007C0C  A4D8               	btfss	status,2,c
  1003  007C0E  D7F7               	goto	l81
  1004  007C10                     u340:
  1005                           
  1006                           ;comunicacao.c: 37: if (tempo > 0) {
  1007  007C10  5003               	movf	uart_check_rx@tempo,w,c
  1008  007C12  1004               	iorwf	uart_check_rx@tempo+1,w,c
  1009  007C14  B4D8               	btfsc	status,2,c
  1010  007C16  D005               	goto	l85
  1011                           
  1012                           ;comunicacao.c: 38: return(0);
  1013  007C18  0E00               	movlw	0
  1014  007C1A  6E02               	movwf	?_uart_check_rx+1,c
  1015  007C1C  0E00               	movlw	0
  1016  007C1E  6E01               	movwf	?_uart_check_rx,c
  1017  007C20  0012               	return	
  1018  007C22                     l85:
  1019                           
  1020                           ;comunicacao.c: 39: }
  1021                           ;comunicacao.c: 41: return(1);
  1022  007C22  0E00               	movlw	0
  1023  007C24  6E02               	movwf	?_uart_check_rx+1,c
  1024  007C26  0E01               	movlw	1
  1025  007C28  6E01               	movwf	?_uart_check_rx,c
  1026  007C2A  0012               	return	
  1027  007C2C                     __end_of_uart_check_rx:
  1028                           	opt stack 0
  1029                           tblptru	equ	0xFF8
  1030                           prodh	equ	0xFF4
  1031                           prodl	equ	0xFF3
  1032                           postinc0	equ	0xFEE
  1033                           wreg	equ	0xFE8
  1034                           indf1	equ	0xFE7
  1035                           plusw1	equ	0xFE3
  1036                           fsr1h	equ	0xFE2
  1037                           fsr1l	equ	0xFE1
  1038                           indf2	equ	0xFDF
  1039                           postinc2	equ	0xFDE
  1040                           postdec2	equ	0xFDD
  1041                           plusw2	equ	0xFDB
  1042                           fsr2h	equ	0xFDA
  1043                           fsr2l	equ	0xFD9
  1044                           status	equ	0xFD8
  1045                           
  1046 ;; *************** function _mk_msg *****************
  1047 ;; Defined at:
  1048 ;;		line 58 in file "comunicacao.c"
  1049 ;; Parameters:    Size  Location     Type
  1050 ;;  data            2    0[COMRAM] PTR struct .
  1051 ;;		 -> main@dados(69), 
  1052 ;;  count           1    2[COMRAM] unsigned char 
  1053 ;;  string          2    3[COMRAM] PTR unsigned char 
  1054 ;;		 -> main@msg(32), 
  1055 ;; Auto vars:     Size  Location     Type
  1056 ;;  i               1    5[COMRAM] unsigned char 
  1057 ;; Return value:  Size  Location     Type
  1058 ;;                  1    wreg      void 
  1059 ;; Registers used:
  1060 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1061 ;; Tracked objects:
  1062 ;;		On entry : 0/0
  1063 ;;		On exit  : 0/0
  1064 ;;		Unchanged: 0/0
  1065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1066 ;;      Params:         5       0       0       0       0       0       0       0       0
  1067 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1068 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1069 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1070 ;;Total ram usage:        6 bytes
  1071 ;; Hardware stack levels used:    1
  1072 ;; This function calls:
  1073 ;;		Nothing
  1074 ;; This function is called by:
  1075 ;;		_main
  1076 ;; This function uses a non-reentrant model
  1077 ;;
  1078                           
  1079                           	psect	text6
  1080  007C2C                     __ptext6:
  1081                           	opt stack 0
  1082  007C2C                     _mk_msg:
  1083                           	opt stack 30
  1084                           
  1085                           ;comunicacao.c: 60: data->count = count;
  1086                           
  1087                           ;incstack = 0
  1088  007C2C  C001  FFD9         	movff	mk_msg@data,fsr2l
  1089  007C30  C002  FFDA         	movff	mk_msg@data+1,fsr2h
  1090  007C34  C003  FFDF         	movff	mk_msg@count,indf2
  1091                           
  1092                           ;comunicacao.c: 62: for (uint8_t i = 0; i < count; i++) {
  1093  007C38  0E00               	movlw	0
  1094  007C3A  6E06               	movwf	mk_msg@i,c
  1095  007C3C  D017               	goto	l101
  1096  007C3E                     
  1097                           ;comunicacao.c: 63: data->buff[i] = string[i];
  1098  007C3E  5006               	movf	mk_msg@i,w,c
  1099  007C40  0D01               	mullw	1
  1100  007C42  50F3               	movf	prodl,w,c
  1101  007C44  2404               	addwf	mk_msg@string,w,c
  1102  007C46  6ED9               	movwf	fsr2l,c
  1103  007C48  50F4               	movf	prodh,w,c
  1104  007C4A  2005               	addwfc	mk_msg@string+1,w,c
  1105  007C4C  6EDA               	movwf	fsr2h,c
  1106  007C4E  5006               	movf	mk_msg@i,w,c
  1107  007C50  0D01               	mullw	1
  1108  007C52  0E01               	movlw	1
  1109  007C54  26F3               	addwf	prodl,f,c
  1110  007C56  0E00               	movlw	0
  1111  007C58  22F4               	addwfc	prodh,f,c
  1112  007C5A  50F3               	movf	prodl,w,c
  1113  007C5C  2401               	addwf	mk_msg@data,w,c
  1114  007C5E  6EE1               	movwf	fsr1l,c
  1115  007C60  50F4               	movf	prodh,w,c
  1116  007C62  2002               	addwfc	mk_msg@data+1,w,c
  1117  007C64  6EE2               	movwf	fsr1h,c
  1118  007C66  CFDF FFE7          	movff	indf2,indf1
  1119  007C6A  2A06               	incf	mk_msg@i,f,c
  1120  007C6C                     l101:
  1121  007C6C  5003               	movf	mk_msg@count,w,c
  1122  007C6E  5C06               	subwf	mk_msg@i,w,c
  1123  007C70  B0D8               	btfsc	status,0,c
  1124  007C72  0012               	return	
  1125  007C74  D7E4               	goto	l102
  1126  007C76                     __end_of_mk_msg:
  1127                           	opt stack 0
  1128                           tblptru	equ	0xFF8
  1129                           prodh	equ	0xFF4
  1130                           prodl	equ	0xFF3
  1131                           postinc0	equ	0xFEE
  1132                           wreg	equ	0xFE8
  1133                           indf1	equ	0xFE7
  1134                           plusw1	equ	0xFE3
  1135                           fsr1h	equ	0xFE2
  1136                           fsr1l	equ	0xFE1
  1137                           indf2	equ	0xFDF
  1138                           postinc2	equ	0xFDE
  1139                           postdec2	equ	0xFDD
  1140                           plusw2	equ	0xFDB
  1141                           fsr2h	equ	0xFDA
  1142                           fsr2l	equ	0xFD9
  1143                           status	equ	0xFD8
  1144                           
  1145 ;; *************** function _check_data *****************
  1146 ;; Defined at:
  1147 ;;		line 101 in file "comunicacao.c"
  1148 ;; Parameters:    Size  Location     Type
  1149 ;;  data            2    4[COMRAM] PTR struct .
  1150 ;;		 -> main@dados(69), 
  1151 ;; Auto vars:     Size  Location     Type
  1152 ;;		None
  1153 ;; Return value:  Size  Location     Type
  1154 ;;                  1    wreg      enum E3818
  1155 ;; Registers used:
  1156 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1157 ;; Tracked objects:
  1158 ;;		On entry : 0/0
  1159 ;;		On exit  : 0/0
  1160 ;;		Unchanged: 0/0
  1161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1162 ;;      Params:         2       0       0       0       0       0       0       0       0
  1163 ;;      Locals:         4       0       0       0       0       0       0       0       0
  1164 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1165 ;;      Totals:         7       0       0       0       0       0       0       0       0
  1166 ;;Total ram usage:        7 bytes
  1167 ;; Hardware stack levels used:    1
  1168 ;; Hardware stack levels required when called:    1
  1169 ;; This function calls:
  1170 ;;		_calc_bcc
  1171 ;; This function is called by:
  1172 ;;		_main
  1173 ;; This function uses a non-reentrant model
  1174 ;;
  1175                           
  1176                           	psect	text7
  1177  007EE4                     __ptext7:
  1178                           	opt stack 0
  1179  007EE4                     _check_data:
  1180                           	opt stack 29
  1181                           
  1182                           ;comunicacao.c: 103: if (data->buff[0] != 0x02) {
  1183                           
  1184                           ;incstack = 0
  1185  007EE4  EE20 F001          	lfsr	2,1
  1186  007EE8  5005               	movf	check_data@data,w,c
  1187  007EEA  26D9               	addwf	fsr2l,f,c
  1188  007EEC  5006               	movf	check_data@data+1,w,c
  1189  007EEE  22DA               	addwfc	fsr2h,f,c
  1190  007EF0  0E02               	movlw	2
  1191  007EF2  18DE               	xorwf	postinc2,w,c
  1192  007EF4  B4D8               	btfsc	status,2,c
  1193  007EF6  D002               	goto	l123
  1194                           
  1195                           ;comunicacao.c: 104: return ERR_STX;
  1196  007EF8  0E00               	movlw	0
  1197  007EFA  0012               	return	
  1198  007EFC                     l123:
  1199                           
  1200                           ;comunicacao.c: 105: }
  1201                           ;comunicacao.c: 107: if (data->buff[1] != 0x09) {
  1202  007EFC  EE20 F002          	lfsr	2,2
  1203  007F00  5005               	movf	check_data@data,w,c
  1204  007F02  26D9               	addwf	fsr2l,f,c
  1205  007F04  5006               	movf	check_data@data+1,w,c
  1206  007F06  22DA               	addwfc	fsr2h,f,c
  1207  007F08  0E09               	movlw	9
  1208  007F0A  18DE               	xorwf	postinc2,w,c
  1209  007F0C  B4D8               	btfsc	status,2,c
  1210  007F0E  D002               	goto	l125
  1211                           
  1212                           ;comunicacao.c: 108: return ERR_IGNORE_MSG;
  1213  007F10  0E01               	movlw	1
  1214  007F12  0012               	return	
  1215  007F14                     l125:
  1216                           
  1217                           ;comunicacao.c: 109: }
  1218                           ;comunicacao.c: 111: if (calc_bcc(data->buff) != 0) {
  1219  007F14  0E01               	movlw	1
  1220  007F16  2405               	addwf	check_data@data,w,c
  1221  007F18  6E01               	movwf	calc_bcc@data,c
  1222  007F1A  0E00               	movlw	0
  1223  007F1C  2006               	addwfc	check_data@data+1,w,c
  1224  007F1E  6E02               	movwf	calc_bcc@data+1,c
  1225  007F20  ECDD  F03D         	call	_calc_bcc	;wreg free
  1226  007F24  0900               	iorlw	0
  1227  007F26  B4D8               	btfsc	status,2,c
  1228  007F28  D002               	goto	l126
  1229                           
  1230                           ;comunicacao.c: 112: return ERR_BCC;
  1231  007F2A  0E02               	movlw	2
  1232  007F2C  0012               	return	
  1233  007F2E                     l126:
  1234                           
  1235                           ;comunicacao.c: 113: }
  1236                           ;comunicacao.c: 115: data->addr_from = data->buff[2];
  1237  007F2E  EE20 F003          	lfsr	2,3
  1238  007F32  5005               	movf	check_data@data,w,c
  1239  007F34  26D9               	addwf	fsr2l,f,c
  1240  007F36  5006               	movf	check_data@data+1,w,c
  1241  007F38  22DA               	addwfc	fsr2h,f,c
  1242  007F3A  EE10 F043          	lfsr	1,67
  1243  007F3E  5005               	movf	check_data@data,w,c
  1244  007F40  26E1               	addwf	fsr1l,f,c
  1245  007F42  5006               	movf	check_data@data+1,w,c
  1246  007F44  22E2               	addwfc	fsr1h,f,c
  1247  007F46  CFDF FFE7          	movff	indf2,indf1
  1248                           
  1249                           ;comunicacao.c: 116: data->command = data->buff[3];
  1250  007F4A  EE20 F004          	lfsr	2,4
  1251  007F4E  5005               	movf	check_data@data,w,c
  1252  007F50  26D9               	addwf	fsr2l,f,c
  1253  007F52  5006               	movf	check_data@data+1,w,c
  1254  007F54  22DA               	addwfc	fsr2h,f,c
  1255  007F56  EE10 F044          	lfsr	1,68
  1256  007F5A  5005               	movf	check_data@data,w,c
  1257  007F5C  26E1               	addwf	fsr1l,f,c
  1258  007F5E  5006               	movf	check_data@data+1,w,c
  1259  007F60  22E2               	addwfc	fsr1h,f,c
  1260  007F62  CFDF FFE7          	movff	indf2,indf1
  1261                           
  1262                           ;comunicacao.c: 117: data->count = data->buff[4];
  1263  007F66  EE20 F005          	lfsr	2,5
  1264  007F6A  5005               	movf	check_data@data,w,c
  1265  007F6C  26D9               	addwf	fsr2l,f,c
  1266  007F6E  5006               	movf	check_data@data+1,w,c
  1267  007F70  22DA               	addwfc	fsr2h,f,c
  1268  007F72  C005  FFE1         	movff	check_data@data,fsr1l
  1269  007F76  C006  FFE2         	movff	check_data@data+1,fsr1h
  1270  007F7A  CFDF FFE7          	movff	indf2,indf1
  1271                           
  1272                           ;comunicacao.c: 119: if (data->count == 1) {
  1273  007F7E  C005  FFD9         	movff	check_data@data,fsr2l
  1274  007F82  C006  FFDA         	movff	check_data@data+1,fsr2h
  1275  007F86  04DE               	decf	postinc2,w,c
  1276  007F88  A4D8               	btfss	status,2,c
  1277  007F8A  0012               	return	
  1278                           
  1279                           ;comunicacao.c: 120: if (data->buff[3] == 0x21) {
  1280  007F8C  EE20 F004          	lfsr	2,4
  1281  007F90  5005               	movf	check_data@data,w,c
  1282  007F92  26D9               	addwf	fsr2l,f,c
  1283  007F94  5006               	movf	check_data@data+1,w,c
  1284  007F96  22DA               	addwfc	fsr2h,f,c
  1285  007F98  0E21               	movlw	33
  1286  007F9A  18DE               	xorwf	postinc2,w,c
  1287  007F9C  A4D8               	btfss	status,2,c
  1288  007F9E  D012               	goto	l128
  1289                           
  1290                           ;comunicacao.c: 121: return(data->buff[5] & 0x01 == 1 ? LIGA_LED1 : DESLIGA_LED1);
  1291  007FA0  EE20 F006          	lfsr	2,6
  1292  007FA4  5005               	movf	check_data@data,w,c
  1293  007FA6  26D9               	addwf	fsr2l,f,c
  1294  007FA8  5006               	movf	check_data@data+1,w,c
  1295  007FAA  22DA               	addwfc	fsr2h,f,c
  1296  007FAC  B0DF               	btfsc	indf2,0,c
  1297  007FAE  D004               	goto	l130
  1298  007FB0  0E00               	movlw	0
  1299  007FB2  6E09               	movwf	_check_data$331+1,c
  1300  007FB4  0E06               	movlw	6
  1301  007FB6  D003               	goto	L1
  1302  007FB8                     l130:
  1303  007FB8  0E00               	movlw	0
  1304  007FBA  6E09               	movwf	_check_data$331+1,c
  1305  007FBC  0E04               	movlw	4
  1306  007FBE                     L1:
  1307  007FBE  6E08               	movwf	_check_data$331,c
  1308  007FC0  5008               	movf	_check_data$331,w,c
  1309                           
  1310                           ;comunicacao.c: 122: } else if (data->buff[3] == 0x22) {
  1311  007FC2  0012               	return	
  1312  007FC4                     l128:
  1313  007FC4  EE20 F004          	lfsr	2,4
  1314  007FC8  5005               	movf	check_data@data,w,c
  1315  007FCA  26D9               	addwf	fsr2l,f,c
  1316  007FCC  5006               	movf	check_data@data+1,w,c
  1317  007FCE  22DA               	addwfc	fsr2h,f,c
  1318  007FD0  0E22               	movlw	34
  1319  007FD2  18DE               	xorwf	postinc2,w,c
  1320  007FD4  A4D8               	btfss	status,2,c
  1321  007FD6  D012               	goto	l134
  1322                           
  1323                           ;comunicacao.c: 123: return(data->buff[5] & 0x01 == 1 ? LIGA_LED2 : DESLIGA_LED2);
  1324  007FD8  EE20 F006          	lfsr	2,6
  1325  007FDC  5005               	movf	check_data@data,w,c
  1326  007FDE  26D9               	addwf	fsr2l,f,c
  1327  007FE0  5006               	movf	check_data@data+1,w,c
  1328  007FE2  22DA               	addwfc	fsr2h,f,c
  1329  007FE4  B0DF               	btfsc	indf2,0,c
  1330  007FE6  D004               	goto	l136
  1331  007FE8  0E00               	movlw	0
  1332  007FEA  6E0B               	movwf	_check_data$332+1,c
  1333  007FEC  0E07               	movlw	7
  1334  007FEE  D003               	goto	L2
  1335  007FF0                     l136:
  1336  007FF0  0E00               	movlw	0
  1337  007FF2  6E0B               	movwf	_check_data$332+1,c
  1338  007FF4  0E05               	movlw	5
  1339  007FF6                     L2:
  1340  007FF6  6E0A               	movwf	_check_data$332,c
  1341  007FF8  500A               	movf	_check_data$332,w,c
  1342                           
  1343                           ;comunicacao.c: 124: } else {
  1344  007FFA  0012               	return	
  1345  007FFC                     l134:
  1346                           
  1347                           ;comunicacao.c: 125: return ERR_NAK;
  1348  007FFC  0E03               	movlw	3
  1349  007FFE  0012               	return	
  1350  008000                     __end_of_check_data:
  1351                           	opt stack 0
  1352                           tblptru	equ	0xFF8
  1353                           prodh	equ	0xFF4
  1354                           prodl	equ	0xFF3
  1355                           postinc0	equ	0xFEE
  1356                           wreg	equ	0xFE8
  1357                           indf1	equ	0xFE7
  1358                           plusw1	equ	0xFE3
  1359                           fsr1h	equ	0xFE2
  1360                           fsr1l	equ	0xFE1
  1361                           indf2	equ	0xFDF
  1362                           postinc2	equ	0xFDE
  1363                           postdec2	equ	0xFDD
  1364                           plusw2	equ	0xFDB
  1365                           fsr2h	equ	0xFDA
  1366                           fsr2l	equ	0xFD9
  1367                           status	equ	0xFD8
  1368                           
  1369 ;; *************** function _calc_bcc *****************
  1370 ;; Defined at:
  1371 ;;		line 89 in file "comunicacao.c"
  1372 ;; Parameters:    Size  Location     Type
  1373 ;;  data            2    0[COMRAM] PTR unsigned char 
  1374 ;;		 -> main@dados(69), 
  1375 ;; Auto vars:     Size  Location     Type
  1376 ;;  i               1    3[COMRAM] unsigned char 
  1377 ;;  bcc             1    2[COMRAM] unsigned char 
  1378 ;; Return value:  Size  Location     Type
  1379 ;;                  1    wreg      unsigned char 
  1380 ;; Registers used:
  1381 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1382 ;; Tracked objects:
  1383 ;;		On entry : 0/0
  1384 ;;		On exit  : 0/0
  1385 ;;		Unchanged: 0/0
  1386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1387 ;;      Params:         2       0       0       0       0       0       0       0       0
  1388 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1389 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1390 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1391 ;;Total ram usage:        4 bytes
  1392 ;; Hardware stack levels used:    1
  1393 ;; This function calls:
  1394 ;;		Nothing
  1395 ;; This function is called by:
  1396 ;;		_write_cmd
  1397 ;;		_check_data
  1398 ;; This function uses a non-reentrant model
  1399 ;;
  1400                           
  1401                           	psect	text8
  1402  007BBA                     __ptext8:
  1403                           	opt stack 0
  1404  007BBA                     _calc_bcc:
  1405                           	opt stack 29
  1406                           
  1407                           ;comunicacao.c: 91: uint8_t bcc = data[0];
  1408                           
  1409                           ;incstack = 0
  1410  007BBA  C001  FFD9         	movff	calc_bcc@data,fsr2l
  1411  007BBE  C002  FFDA         	movff	calc_bcc@data+1,fsr2h
  1412  007BC2  50DF               	movf	indf2,w,c
  1413  007BC4  6E03               	movwf	calc_bcc@bcc,c
  1414                           
  1415                           ;comunicacao.c: 94: for (uint8_t i = 1; i < 64; i++) {
  1416  007BC6  0E01               	movlw	1
  1417  007BC8  6E04               	movwf	calc_bcc@i,c
  1418  007BCA                     l978:
  1419  007BCA  0E3F               	movlw	63
  1420  007BCC  6404               	cpfsgt	calc_bcc@i,c
  1421  007BCE  D001               	goto	l118
  1422  007BD0  D00D               	goto	u300
  1423  007BD2                     l118:
  1424                           
  1425                           ;comunicacao.c: 95: bcc = (uint8_t) (bcc ^ data[i]);
  1426  007BD2  5004               	movf	calc_bcc@i,w,c
  1427  007BD4  0D01               	mullw	1
  1428  007BD6  50F3               	movf	prodl,w,c
  1429  007BD8  2401               	addwf	calc_bcc@data,w,c
  1430  007BDA  6ED9               	movwf	fsr2l,c
  1431  007BDC  50F4               	movf	prodh,w,c
  1432  007BDE  2002               	addwfc	calc_bcc@data+1,w,c
  1433  007BE0  6EDA               	movwf	fsr2h,c
  1434  007BE2  50DF               	movf	indf2,w,c
  1435  007BE4  1803               	xorwf	calc_bcc@bcc,w,c
  1436  007BE6  6E03               	movwf	calc_bcc@bcc,c
  1437  007BE8  2A04               	incf	calc_bcc@i,f,c
  1438  007BEA  D7EF               	goto	l978
  1439  007BEC                     u300:
  1440                           
  1441                           ;comunicacao.c: 96: }
  1442                           ;comunicacao.c: 98: return(bcc);
  1443  007BEC  5003               	movf	calc_bcc@bcc,w,c
  1444  007BEE  0012               	return	
  1445  007BF0                     __end_of_calc_bcc:
  1446                           	opt stack 0
  1447  0000                     tblptru	equ	0xFF8
  1448                           prodh	equ	0xFF4
  1449                           prodl	equ	0xFF3
  1450                           postinc0	equ	0xFEE
  1451                           wreg	equ	0xFE8
  1452                           indf1	equ	0xFE7
  1453                           plusw1	equ	0xFE3
  1454                           fsr1h	equ	0xFE2
  1455                           fsr1l	equ	0xFE1
  1456                           indf2	equ	0xFDF
  1457                           postinc2	equ	0xFDE
  1458                           postdec2	equ	0xFDD
  1459                           plusw2	equ	0xFDB
  1460                           fsr2h	equ	0xFDA
  1461                           fsr2l	equ	0xFD9
  1462                           status	equ	0xFD8
  1463                           tblptru	equ	0xFF8
  1464                           prodh	equ	0xFF4
  1465                           prodl	equ	0xFF3
  1466                           postinc0	equ	0xFEE
  1467                           wreg	equ	0xFE8
  1468                           indf1	equ	0xFE7
  1469                           plusw1	equ	0xFE3
  1470                           fsr1h	equ	0xFE2
  1471                           fsr1l	equ	0xFE1
  1472                           indf2	equ	0xFDF
  1473                           postinc2	equ	0xFDE
  1474                           postdec2	equ	0xFDD
  1475                           plusw2	equ	0xFDB
  1476                           fsr2h	equ	0xFDA
  1477                           fsr2l	equ	0xFD9
  1478                           status	equ	0xFD8
  1479                           
  1480                           	psect	rparam
  1481  0000                     tblptru	equ	0xFF8
  1482                           prodh	equ	0xFF4
  1483                           prodl	equ	0xFF3
  1484                           postinc0	equ	0xFEE
  1485                           wreg	equ	0xFE8
  1486                           indf1	equ	0xFE7
  1487                           plusw1	equ	0xFE3
  1488                           fsr1h	equ	0xFE2
  1489                           fsr1l	equ	0xFE1
  1490                           indf2	equ	0xFDF
  1491                           postinc2	equ	0xFDE
  1492                           postdec2	equ	0xFDD
  1493                           plusw2	equ	0xFDB
  1494                           fsr2h	equ	0xFDA
  1495                           fsr2l	equ	0xFD9
  1496                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         96
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     78      78
    BANK0           160    101     133
    BANK1           256      0      64
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    write_zero@dados	PTR struct . size(2) Largest target is 69
		 -> main@dados(BANK0[69]), 

    check_data@data	PTR struct . size(2) Largest target is 69
		 -> main@dados(BANK0[69]), 

    calc_bcc@data	PTR unsigned char  size(2) Largest target is 69
		 -> main@dados(BANK0[69]), 

    write_cmd@data	PTR struct . size(2) Largest target is 69
		 -> main@dados(BANK0[69]), 

    mk_msg@string	PTR unsigned char  size(2) Largest target is 32
		 -> main@msg(BANK0[32]), 

    mk_msg@data	PTR struct . size(2) Largest target is 69
		 -> main@dados(BANK0[69]), 


Critical Paths under _main in COMRAM

    _main->_write_cmd
    _write_cmd->_calc_bcc
    _check_data->_calc_bcc

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               101   101      0    2755
                                              0 BANK0    101   101      0
                         _check_data
                             _mk_msg
                      _uart_check_rx
                          _uart_init
                          _write_cmd
                         _write_zero
 ---------------------------------------------------------------------------------
 (1) _write_zero                                           3     1      2     330
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _write_cmd                                           74    71      3     943
                                              4 COMRAM    74    71      3
                           _calc_bcc
                     _uart_send_byte
 ---------------------------------------------------------------------------------
 (2) _uart_send_byte                                       1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _uart_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _uart_check_rx                                        4     2      2      46
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _mk_msg                                               6     1      5     406
                                              0 COMRAM     6     1      5
 ---------------------------------------------------------------------------------
 (1) _check_data                                           7     5      2     742
                                              4 COMRAM     7     5      2
                           _calc_bcc
 ---------------------------------------------------------------------------------
 (2) _calc_bcc                                             4     2      2     310
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _check_data
     _calc_bcc
   _mk_msg
   _uart_check_rx
   _uart_init
   _write_cmd
     _calc_bcc
     _uart_send_byte
   _write_zero

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      40       7       25.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     65      85       5       83.1%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     4E      4E       1       82.1%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     113      20        0.0%
DATA                 0      0     113       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sun Jun 03 22:09:17 2018

                     l40 7E9A                       l42 7ED6                       l35 7E0E  
                     l36 7E50                       l46 7E5C                       l47 7E8E  
                     l48 7E92                       l81 7BFE                       l49 7E96  
                     l85 7C22                       l96 7B92              __CFG_BORV$3 000000  
           __CFG_CP0$OFF 000000             __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000  
           __CFG_CP3$OFF 000000              __CFG_LVP$ON 000000                      l101 7C6C  
                    l102 7C3E                      l110 7D24                      l112 7DB6  
                    l113 7D9E                      l130 7FB8                      l123 7EFC  
                    l125 7F14                      l109 7D5C                      l118 7BD2  
                    l134 7FFC                      l126 7F2E                      l142 7C82  
                    l136 7FF0                      l128 7FC4                      l970 7B8A  
                    l978 7BCA                      l996 7C7A             __CFG_CPB$OFF 000000  
                    u300 7BEC                      u320 7CA2                      u340 7C10  
           __CFG_CPD$OFF 000000                      u371 7CEE                      u481 7DF6  
                    u490 7E1A             __CFG_BOR$OFF 000000                      prod 000FF3  
                    wreg 000FE8            write_cmd@data 0005             __CFG_FOSC$HS 000000  
         write_cmd@F3873 0100             __CFG_WDT$OFF 000000                     _RCIF 007CF5  
                   _TRMT 007D61                     _TXIF 007CF4                     _main 7DE0  
                   fsr1h 000FE2                     fsr2h 000FDA                     indf1 000FE7  
                   indf2 000FDF                     fsr1l 000FE1                     fsr2l 000FD9  
                   prodh 000FF4                     prodl 000FF3                     start 0000  
          __CFG_IESO$OFF 000000            __CFG_MCLRE$ON 000000             ___param_bank 000000  
       ??_uart_send_byte 0001            __CFG_PLLDIV$2 000000                    ?_main 0001  
                  _RCREG 000FAE                    _RCSTA 000FAB                    _SPBRG 000FAF  
          __CFG_USBDIV$1 000000                    _TXREG 000FAD                    _TXSTA 000FAC  
          __CFG_PWRT$OFF 000000            __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000  
          __CFG_WRT2$OFF 000000            __CFG_WRT3$OFF 000000           __CFG_EBTR0$OFF 000000  
         __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000           __CFG_EBTR2$OFF 000000  
         __CFG_EBTR3$OFF 000000            __CFG_WRTB$OFF 000000            __CFG_WRTC$OFF 000000  
          __CFG_WRTD$OFF 000000           __CFG_EBTRB$OFF 000000                    plusw1 000FE3  
                  plusw2 000FDB                    status 000FD8           __CFG_ICPRT$OFF 000000  
        __initialization 7B98             __end_of_main 7EE4                   ??_main 004F  
          __activetblptr 000002          __CFG_CCP2MX$OFF 000000                   _ADCON1 000FC1  
       __end_of_calc_bcc 7BF0           __CFG_XINST$OFF 000000              mk_msg@count 0003  
                 _mk_msg 7C2C                   clear_0 7B9E                   clear_1 7BAA  
                 tblptru 000FF8         write_cmd@addr_to 0007               __accesstop 0060  
__end_of__initialization 7BB0          __CFG_PBADEN$OFF 000000            ___rparam_used 000001  
         __pcstackCOMRAM 0001               __pbssBANK0 00C5               __pbssBANK1 0100  
             _check_data 7EE4    __end_of_uart_check_rx 7C2C          write_zero@dados 0001  
                ?_mk_msg 0001                ?_calc_bcc 0001       __size_of_uart_init 000E  
        __CFG_VREGEN$OFF 000000       __size_of_write_cmd 00FC                  __Hparam 0000  
                __Lparam 0000          __CFG_STVREN$OFF 000000                  __pcinit 7B98  
        __size_of_mk_msg 004A                  __ramtop 0800                  __ptext0 7DE0  
                __ptext1 7C76                  __ptext2 7CE4                  __ptext3 7B88  
                __ptext4 7B7A                  __ptext5 7BF0                  __ptext6 7C2C  
                __ptext7 7EE4                  __ptext8 7BBA               ??_calc_bcc 0003  
           mk_msg@string 0004                  main@msg 0060     end_of_initialization 7BB0  
            ?_check_data 0005                  mk_msg@i 0006            __Lmediumconst 0000  
      __end_of_uart_init 7B88             calc_bcc@data 0001                _RCSTAbits 000FAB  
                postdec2 000FDD                  postinc0 000FEE                  postinc2 000FDE  
              _PORTDbits 000F83        __end_of_write_cmd 7DE0  __size_of_uart_send_byte 0010  
              _TRISDbits 000F95             write_cmd@aux 000D           check_data@data 0005  
    __size_of_check_data 011C               _write_zero 7C76           __end_of_mk_msg 7C76  
    start_initialization 7B98       uart_check_rx@tempo 0003               mk_msg@data 0001  
       __CFG_LPT1OSC$OFF 000000                 ??_mk_msg 0006            __pcstackBANK0 0060  
      __size_of_calc_bcc 0036                calc_bcc@i 0004              ?_write_zero 0001  
         _uart_send_byte 7B88             ??_check_data 0007   __size_of_uart_check_rx 003C  
            calc_bcc@bcc 0003         __CFG_WDTPS$32768 000000                main@F3868 00C5  
              _uart_init 7B7A   __end_of_uart_send_byte 7B98       __end_of_check_data 8000  
              main@dados 0080              write_zero@i 0003                _write_cmd 7CE4  
     uart_send_byte@byte 0001      __size_of_write_zero 006E                 __Hrparam 0000  
               __Lrparam 0000               ?_uart_init 0001            _uart_check_rx 7BF0  
        ?_uart_send_byte 0001                 _calc_bcc 7BBA               ?_write_cmd 0005  
          __size_of_main 0104           ?_uart_check_rx 0001               write_cmd@i 004E  
             write_cmd@t 004D    __CFG_CPUDIV$OSC1_PLL2 000000              ??_uart_init 0001  
           ??_write_zero 0003              ??_write_cmd 0008       __end_of_write_zero 7CE4  
         _check_data$331 0008           _check_data$332 000A          ??_uart_check_rx 0003  
