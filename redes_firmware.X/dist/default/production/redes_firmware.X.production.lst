

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Wed Jun 06 00:01:35 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text17,global,reloc=2,class=CODE,delta=1
    27                           	psect	text18,global,reloc=2,class=CODE,delta=1
    28                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=2
    29                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text21,global,reloc=2,class=CODE,delta=1
    31                           	psect	text22,global,reloc=2,class=CODE,delta=1
    32                           	psect	text23,global,reloc=2,class=CODE,delta=1
    33                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    34                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    35  0000                     
    36                           ; Version 1.45
    37                           ; Generated 16/11/2017 GMT
    38                           ; 
    39                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    40                           ; All rights reserved.
    41                           ; 
    42                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    43                           ; 
    44                           ; Redistribution and use in source and binary forms, with or without modification, are
    45                           ; permitted provided that the following conditions are met:
    46                           ; 
    47                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    48                           ;        conditions and the following disclaimer.
    49                           ; 
    50                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    51                           ;        of conditions and the following disclaimer in the documentation and/or other
    52                           ;        materials provided with the distribution.
    53                           ; 
    54                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    55                           ;        software without specific prior written permission.
    56                           ; 
    57                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    58                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    59                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    60                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    61                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    62                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    63                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    64                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    65                           ; 
    66                           ; 
    67                           ; Code-generator required, PIC18F4550 Definitions
    68                           ; 
    69                           ; SFR Addresses
    70  0000                     _TRISBbits	set	3987
    71  0000                     _TRISB	set	3987
    72  0000                     _PORTB	set	3969
    73  0000                     _LATBbits	set	3978
    74  0000                     _TXREG	set	4013
    75  0000                     _RCSTAbits	set	4011
    76  0000                     _SPBRG	set	4015
    77  0000                     _TXSTA	set	4012
    78  0000                     _RCSTA	set	4011
    79  0000                     _RCREG	set	4014
    80  0000                     _PORTDbits	set	3971
    81  0000                     _TRISDbits	set	3989
    82  0000                     _ADCON1	set	4033
    83  0000                     _TRMT	set	32097
    84  0000                     _TXIF	set	31988
    85  0000                     _RCIF	set	31989
    86                           
    87                           ; #config settings
    88  0000                     
    89                           	psect	cinit
    90  007460                     __pcinit:
    91                           	opt stack 0
    92  007460                     start_initialization:
    93                           	opt stack 0
    94  007460                     __initialization:
    95                           	opt stack 0
    96                           
    97                           ; Clear objects allocated to BANK1 (97 bytes)
    98  007460  EE01  F000         	lfsr	0,__pbssBANK1
    99  007464  0E61               	movlw	97
   100  007466                     clear_0:
   101  007466  6AEE               	clrf	postinc0,c
   102  007468  06E8               	decf	wreg,f,c
   103  00746A  E1FD               	bnz	clear_0
   104  00746C                     end_of_initialization:
   105                           	opt stack 0
   106  00746C                     __end_of__initialization:
   107                           	opt stack 0
   108  00746C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   109  00746E  6EF8               	movwf	tblptru,c
   110  007470  0100               	movlb	0
   111  007472  EF76  F03E         	goto	_main	;jump to C main() function
   112                           tblptru	equ	0xFF8
   113                           postinc0	equ	0xFEE
   114                           wreg	equ	0xFE8
   115                           
   116                           	psect	bssBANK1
   117  000100                     __pbssBANK1:
   118                           	opt stack 0
   119  000100                     write_cmd@F4641:
   120                           	opt stack 0
   121  000100                     	ds	64
   122  000140                     main@F4662:
   123                           	opt stack 0
   124  000140                     	ds	33
   125                           tblptru	equ	0xFF8
   126                           postinc0	equ	0xFEE
   127                           wreg	equ	0xFE8
   128                           
   129                           	psect	cstackBANK0
   130  000060                     __pcstackBANK0:
   131                           	opt stack 0
   132  000060                     main@msg:
   133                           	opt stack 0
   134                           
   135                           ; 33 bytes @ 0x0
   136  000060                     	ds	33
   137  000081                     _main$228:
   138                           	opt stack 0
   139                           
   140                           ; 2 bytes @ 0x21
   141  000081                     	ds	2
   142  000083                     main@linha:
   143                           	opt stack 0
   144                           
   145                           ; 1 bytes @ 0x23
   146  000083                     	ds	1
   147  000084                     main@coluna:
   148                           	opt stack 0
   149                           
   150                           ; 1 bytes @ 0x24
   151  000084                     	ds	1
   152  000085                     main@pos:
   153                           	opt stack 0
   154                           
   155                           ; 1 bytes @ 0x25
   156  000085                     	ds	1
   157  000086                     main@i:
   158                           	opt stack 0
   159                           
   160                           ; 1 bytes @ 0x26
   161  000086                     	ds	1
   162  000087                     main@lcd:
   163                           	opt stack 0
   164                           
   165                           ; 33 bytes @ 0x27
   166  000087                     	ds	33
   167  0000A8                     main@dados:
   168                           	opt stack 0
   169                           
   170                           ; 69 bytes @ 0x48
   171  0000A8                     	ds	69
   172                           tblptru	equ	0xFF8
   173                           postinc0	equ	0xFEE
   174                           wreg	equ	0xFE8
   175                           
   176                           	psect	cstackCOMRAM
   177  000001                     __pcstackCOMRAM:
   178                           	opt stack 0
   179  000001                     ??_Delay10KTCYx:
   180  000001                     ?_uart_check_rx:
   181                           	opt stack 0
   182  000001                     uart_send_byte@byte:
   183                           	opt stack 0
   184  000001                     delay_ms@milis:
   185                           	opt stack 0
   186  000001                     rcv_msg@data:
   187                           	opt stack 0
   188  000001                     mk_msg@data:
   189                           	opt stack 0
   190  000001                     calc_bcc@data:
   191                           	opt stack 0
   192  000001                     write_zero@dados:
   193                           	opt stack 0
   194  000001                     lcd_mem_clean@lcd:
   195                           	opt stack 0
   196  000001                     lcd_write@lcd:
   197                           	opt stack 0
   198  000001                     DelayFor18TCY@i:
   199                           	opt stack 0
   200                           
   201                           ; 2 bytes @ 0x0
   202  000001                     	ds	1
   203  000002                     Delay10KTCYx@unit:
   204                           	opt stack 0
   205                           
   206                           ; 1 bytes @ 0x1
   207  000002                     	ds	1
   208  000003                     ??_SetDDRamAddr:
   209  000003                     ??_delay_ms:
   210  000003                     mk_msg@count:
   211                           	opt stack 0
   212  000003                     calc_bcc@bcc:
   213                           	opt stack 0
   214  000003                     write_zero@i:
   215                           	opt stack 0
   216  000003                     lcd_mem_clean@i:
   217                           	opt stack 0
   218  000003                     lcd_write@row:
   219                           	opt stack 0
   220  000003                     WriteCmdXLCD@cmd:
   221                           	opt stack 0
   222  000003                     WriteDataXLCD@data:
   223                           	opt stack 0
   224  000003                     rcv_msg@msg:
   225                           	opt stack 0
   226  000003                     uart_check_rx@tempo:
   227                           	opt stack 0
   228                           
   229                           ; 2 bytes @ 0x2
   230  000003                     	ds	1
   231  000004                     calc_bcc@i:
   232                           	opt stack 0
   233  000004                     lcd_write@col:
   234                           	opt stack 0
   235  000004                     delay_ms@t:
   236                           	opt stack 0
   237  000004                     mk_msg@string:
   238                           	opt stack 0
   239                           
   240                           ; 2 bytes @ 0x3
   241  000004                     	ds	1
   242  000005                     ??_rcv_msg:
   243  000005                     write_cmd@data:
   244                           	opt stack 0
   245  000005                     check_data@data:
   246                           	opt stack 0
   247  000005                     lcd_write@string:
   248                           	opt stack 0
   249                           
   250                           ; 2 bytes @ 0x4
   251  000005                     	ds	1
   252  000006                     mk_msg@i:
   253                           	opt stack 0
   254  000006                     SetDDRamAddr@DDaddr:
   255                           	opt stack 0
   256                           
   257                           ; 1 bytes @ 0x5
   258  000006                     	ds	1
   259  000007                     write_cmd@addr_to:
   260                           	opt stack 0
   261  000007                     OpenXLCD@lcdtype:
   262                           	opt stack 0
   263  000007                     lcd_runtime@lcd:
   264                           	opt stack 0
   265                           
   266                           ; 2 bytes @ 0x6
   267  000007                     	ds	1
   268  000008                     ??_write_cmd:
   269  000008                     _check_data$305:
   270                           	opt stack 0
   271  000008                     lcd_init@lcd:
   272                           	opt stack 0
   273                           
   274                           ; 2 bytes @ 0x7
   275  000008                     	ds	1
   276  000009                     ??_lcd_runtime:
   277                           
   278                           ; 1 bytes @ 0x8
   279  000009                     	ds	1
   280  00000A                     _check_data$306:
   281                           	opt stack 0
   282                           
   283                           ; 2 bytes @ 0x9
   284  00000A                     	ds	1
   285  00000B                     lcd_runtime@i:
   286                           	opt stack 0
   287                           
   288                           ; 2 bytes @ 0xA
   289  00000B                     	ds	1
   290  00000C                     rcv_msg@i:
   291                           	opt stack 0
   292                           
   293                           ; 1 bytes @ 0xB
   294  00000C                     	ds	1
   295  00000D                     lcd_runtime@i_457:
   296                           	opt stack 0
   297  00000D                     write_cmd@aux:
   298                           	opt stack 0
   299                           
   300                           ; 64 bytes @ 0xC
   301  00000D                     	ds	64
   302  00004D                     write_cmd@t:
   303                           	opt stack 0
   304                           
   305                           ; 1 bytes @ 0x4C
   306  00004D                     	ds	1
   307  00004E                     write_cmd@i:
   308                           	opt stack 0
   309                           
   310                           ; 1 bytes @ 0x4D
   311  00004E                     	ds	1
   312  00004F                     ??_main:
   313                           
   314                           ; 1 bytes @ 0x4E
   315  00004F                     	ds	1
   316                           tblptru	equ	0xFF8
   317                           postinc0	equ	0xFEE
   318                           wreg	equ	0xFE8
   319                           
   320 ;;
   321 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   322 ;;
   323 ;; *************** function _main *****************
   324 ;; Defined at:
   325 ;;		line 16 in file "main.c"
   326 ;; Parameters:    Size  Location     Type
   327 ;;		None
   328 ;; Auto vars:     Size  Location     Type
   329 ;;  i               1   38[BANK0 ] unsigned char 
   330 ;;  coluna          1   36[BANK0 ] unsigned char 
   331 ;;  linha           1   35[BANK0 ] unsigned char 
   332 ;;  dados          69   72[BANK0 ] struct .
   333 ;;  msg            33    0[BANK0 ] unsigned char [33]
   334 ;;  lcd            33   39[BANK0 ] struct .
   335 ;;  pos             1   37[BANK0 ] unsigned char 
   336 ;; Return value:  Size  Location     Type
   337 ;;                  1    wreg      void 
   338 ;; Registers used:
   339 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   340 ;; Tracked objects:
   341 ;;		On entry : 0/0
   342 ;;		On exit  : 0/0
   343 ;;		Unchanged: 0/0
   344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   345 ;;      Params:         0       0       0       0       0       0       0       0       0
   346 ;;      Locals:         0     141       0       0       0       0       0       0       0
   347 ;;      Temps:          1       0       0       0       0       0       0       0       0
   348 ;;      Totals:         1     141       0       0       0       0       0       0       0
   349 ;;Total ram usage:      142 bytes
   350 ;; Hardware stack levels required when called:    4
   351 ;; This function calls:
   352 ;;		_check_data
   353 ;;		_lcd_init
   354 ;;		_lcd_runtime
   355 ;;		_lcd_write
   356 ;;		_mk_msg
   357 ;;		_rcv_msg
   358 ;;		_uart_check_rx
   359 ;;		_uart_init
   360 ;;		_write_cmd
   361 ;;		_write_zero
   362 ;; This function is called by:
   363 ;;		Startup code after reset
   364 ;; This function uses a non-reentrant model
   365 ;;
   366                           
   367                           	psect	text0
   368  007CEC                     __ptext0:
   369                           	opt stack 0
   370  007CEC                     _main:
   371                           	opt stack 27
   372                           
   373                           ;main.c: 19: ADCON1 = 0x0F;
   374                           
   375                           ;incstack = 0
   376  007CEC  0E0F               	movlw	15
   377  007CEE  6EC1               	movwf	4033,c	;volatile
   378                           
   379                           ;main.c: 21: TRISDbits.RD0 = 0;
   380  007CF0  9095               	bcf	3989,0,c	;volatile
   381                           
   382                           ;main.c: 22: TRISDbits.RD1 = 0;
   383  007CF2  9295               	bcf	3989,1,c	;volatile
   384                           
   385                           ;main.c: 23: TRISDbits.RD2 = 1;
   386  007CF4  8495               	bsf	3989,2,c	;volatile
   387                           
   388                           ;main.c: 24: TRISDbits.RD3 = 1;
   389  007CF6  8695               	bsf	3989,3,c	;volatile
   390                           
   391                           ;main.c: 28: uart_init();
   392  007CF8  EC16  F03A         	call	_uart_init	;wreg free
   393                           
   394                           ;main.c: 35: dados_t dados;
   395                           ;main.c: 36: lcd_t lcd;
   396                           ;main.c: 39: lcd_init(&lcd);
   397  007CFC  0E87               	movlw	low main@lcd
   398  007CFE  6E08               	movwf	lcd_init@lcd,c
   399  007D00  0E00               	movlw	high main@lcd
   400  007D02  6E09               	movwf	lcd_init@lcd+1,c
   401  007D04  EC03  F03B         	call	_lcd_init	;wreg free
   402                           
   403                           ;main.c: 42: char msg[33] = {0};
   404  007D08  EE21  F040         	lfsr	2,main@F4662
   405  007D0C  EE10  F060         	lfsr	1,main@msg
   406  007D10  0E20               	movlw	32
   407  007D12                     u1341:
   408  007D12  CFDB FFE3          	movff	plusw2,plusw1
   409  007D16  06E8               	decf	wreg,f,c
   410  007D18  E2FC               	bc	u1341
   411                           
   412                           ;main.c: 43: uint8_t pos = 0;
   413  007D1A  0E00               	movlw	0
   414  007D1C  0100               	movlb	0	; () banked
   415  007D1E  6F85               	movwf	main@pos& (0+255),b
   416                           
   417                           ; BSR set to: 0
   418                           ;main.c: 48: PORTDbits.RD0 = 1;
   419  007D20  8083               	bsf	3971,0,c	;volatile
   420                           
   421                           ; BSR set to: 0
   422                           ;main.c: 49: PORTDbits.RD1 = 1;
   423  007D22  8283               	bsf	3971,1,c	;volatile
   424                           
   425                           ; BSR set to: 0
   426                           ;main.c: 50: write_zero(&dados);
   427  007D24  0EA8               	movlw	low main@dados
   428  007D26  6E01               	movwf	write_zero@dados,c
   429  007D28  0E00               	movlw	high main@dados
   430  007D2A  6E02               	movwf	write_zero@dados+1,c
   431  007D2C  EC9D  F03B         	call	_write_zero	;wreg free
   432  007D30                     
   433                           ;main.c: 57: if (!uart_check_rx()) {
   434  007D30  ECA7  F03A         	call	_uart_check_rx	;wreg free
   435  007D34  5001               	movf	?_uart_check_rx,w,c
   436  007D36  1002               	iorwf	?_uart_check_rx+1,w,c
   437  007D38  A4D8               	btfss	status,2,c
   438  007D3A  D01B               	goto	l38
   439  007D3C                     u1350:
   440                           
   441                           ;main.c: 60: dados.buff[dados.count++] = RCREG;
   442                           
   443                           ;main.c: 58: do {
   444  007D3C  0100               	movlb	0	; () banked
   445  007D3E  51A8               	movf	main@dados& (0+255),w,b
   446  007D40  0D01               	mullw	1
   447  007D42  0E01               	movlw	1
   448  007D44  26F3               	addwf	prodl,f,c
   449  007D46  0E00               	movlw	0
   450  007D48  22F4               	addwfc	prodh,f,c
   451  007D4A  0EA8               	movlw	low main@dados
   452  007D4C  24F3               	addwf	prodl,w,c
   453  007D4E  6ED9               	movwf	fsr2l,c
   454  007D50  0E00               	movlw	high main@dados
   455  007D52  20F4               	addwfc	prodh,w,c
   456  007D54  6EDA               	movwf	fsr2h,c
   457  007D56  CFAE FFDF          	movff	4014,indf2	;volatile
   458                           
   459                           ; BSR set to: 0
   460  007D5A  2BA8               	incf	main@dados& (0+255),f,b
   461                           
   462                           ; BSR set to: 0
   463                           ;main.c: 61: } while (!uart_check_rx());
   464  007D5C  ECA7  F03A         	call	_uart_check_rx	;wreg free
   465  007D60  5001               	movf	?_uart_check_rx,w,c
   466  007D62  1002               	iorwf	?_uart_check_rx+1,w,c
   467  007D64  B4D8               	btfsc	status,2,c
   468  007D66  D7EA               	goto	u1350
   469                           
   470                           ;main.c: 62: dados.data_flag = 1;
   471  007D68  0E00               	movlw	0
   472  007D6A  0100               	movlb	0	; () banked
   473  007D6C  6FEA               	movwf	(main@dados+66)& (0+255),b
   474  007D6E  0E01               	movlw	1
   475  007D70  6FE9               	movwf	(main@dados+65)& (0+255),b
   476  007D72                     l38:
   477                           
   478                           ;main.c: 63: }
   479                           ;main.c: 66: if (dados.data_flag) {
   480                           
   481                           ; BSR set to: 0
   482  007D72  0100               	movlb	0	; () banked
   483  007D74  51E9               	movf	(main@dados+65)& (0+255),w,b
   484  007D76  11EA               	iorwf	(main@dados+66)& (0+255),w,b
   485  007D78  A4D8               	btfss	status,2,c
   486  007D7A  D10E               	goto	l42
   487  007D7C  D13A               	goto	l41
   488  007D7E                     
   489                           ;main.c: 78: msg[0] = 0x15;
   490                           
   491                           ; BSR set to: 0
   492  007D7E  0E15               	movlw	21
   493  007D80  0100               	movlb	0	; () banked
   494  007D82  6F60               	movwf	main@msg& (0+255),b
   495                           
   496                           ; BSR set to: 0
   497                           ;main.c: 79: mk_msg(&dados, 1, msg);
   498  007D84  0EA8               	movlw	low main@dados
   499  007D86  6E01               	movwf	mk_msg@data,c
   500  007D88  0E00               	movlw	high main@dados
   501  007D8A  6E02               	movwf	mk_msg@data+1,c
   502  007D8C  0E01               	movlw	1
   503  007D8E  6E03               	movwf	mk_msg@count,c
   504  007D90  0E60               	movlw	low main@msg
   505  007D92  6E04               	movwf	mk_msg@string,c
   506  007D94  0E00               	movlw	high main@msg
   507  007D96  6E05               	movwf	mk_msg@string+1,c
   508  007D98  EC24  F03B         	call	_mk_msg	;wreg free
   509                           
   510                           ;main.c: 80: write_cmd(&dados, dados.addr_from);
   511  007D9C  0EA8               	movlw	low main@dados
   512  007D9E  6E05               	movwf	write_cmd@data,c
   513  007DA0  0E00               	movlw	high main@dados
   514  007DA2  6E06               	movwf	write_cmd@data+1,c
   515  007DA4  C0EB  F007         	movff	main@dados+67,write_cmd@addr_to
   516  007DA8  EC28  F03D         	call	_write_cmd	;wreg free
   517                           
   518                           ;main.c: 82: break;
   519  007DAC  D11C               	goto	l44
   520  007DAE                     l48:
   521                           
   522                           ;main.c: 84: PORTDbits.RD0 = 0;
   523  007DAE  9083               	bcf	3971,0,c	;volatile
   524                           
   525                           ;main.c: 86: msg[0] = 0x06;
   526  007DB0  0E06               	movlw	6
   527  007DB2  0100               	movlb	0	; () banked
   528  007DB4  6F60               	movwf	main@msg& (0+255),b
   529                           
   530                           ; BSR set to: 0
   531                           ;main.c: 87: mk_msg(&dados, 1, msg);
   532  007DB6  0EA8               	movlw	low main@dados
   533  007DB8  6E01               	movwf	mk_msg@data,c
   534  007DBA  0E00               	movlw	high main@dados
   535  007DBC  6E02               	movwf	mk_msg@data+1,c
   536  007DBE  0E01               	movlw	1
   537  007DC0  6E03               	movwf	mk_msg@count,c
   538  007DC2  0E60               	movlw	low main@msg
   539  007DC4  6E04               	movwf	mk_msg@string,c
   540  007DC6  0E00               	movlw	high main@msg
   541  007DC8  6E05               	movwf	mk_msg@string+1,c
   542  007DCA  EC24  F03B         	call	_mk_msg	;wreg free
   543                           
   544                           ;main.c: 88: write_cmd(&dados, dados.addr_from);
   545  007DCE  0EA8               	movlw	low main@dados
   546  007DD0  6E05               	movwf	write_cmd@data,c
   547  007DD2  0E00               	movlw	high main@dados
   548  007DD4  6E06               	movwf	write_cmd@data+1,c
   549  007DD6  C0EB  F007         	movff	main@dados+67,write_cmd@addr_to
   550  007DDA  EC28  F03D         	call	_write_cmd	;wreg free
   551                           
   552                           ;main.c: 90: break;
   553  007DDE  D103               	goto	l44
   554  007DE0                     l49:
   555                           
   556                           ;main.c: 92: PORTDbits.RD0 = 1;
   557  007DE0  8083               	bsf	3971,0,c	;volatile
   558                           
   559                           ;main.c: 94: msg[0] = 0x06;
   560  007DE2  0E06               	movlw	6
   561  007DE4  0100               	movlb	0	; () banked
   562  007DE6  6F60               	movwf	main@msg& (0+255),b
   563                           
   564                           ; BSR set to: 0
   565                           ;main.c: 95: mk_msg(&dados, 1, msg);
   566  007DE8  0EA8               	movlw	low main@dados
   567  007DEA  6E01               	movwf	mk_msg@data,c
   568  007DEC  0E00               	movlw	high main@dados
   569  007DEE  6E02               	movwf	mk_msg@data+1,c
   570  007DF0  0E01               	movlw	1
   571  007DF2  6E03               	movwf	mk_msg@count,c
   572  007DF4  0E60               	movlw	low main@msg
   573  007DF6  6E04               	movwf	mk_msg@string,c
   574  007DF8  0E00               	movlw	high main@msg
   575  007DFA  6E05               	movwf	mk_msg@string+1,c
   576  007DFC  EC24  F03B         	call	_mk_msg	;wreg free
   577                           
   578                           ;main.c: 96: write_cmd(&dados, dados.addr_from);
   579  007E00  0EA8               	movlw	low main@dados
   580  007E02  6E05               	movwf	write_cmd@data,c
   581  007E04  0E00               	movlw	high main@dados
   582  007E06  6E06               	movwf	write_cmd@data+1,c
   583  007E08  C0EB  F007         	movff	main@dados+67,write_cmd@addr_to
   584  007E0C  EC28  F03D         	call	_write_cmd	;wreg free
   585                           
   586                           ;main.c: 98: break;
   587  007E10  D0EA               	goto	l44
   588  007E12                     l50:
   589                           
   590                           ;main.c: 100: PORTDbits.RD1 = 0;
   591  007E12  9283               	bcf	3971,1,c	;volatile
   592                           
   593                           ;main.c: 102: msg[0] = 0x06;
   594  007E14  0E06               	movlw	6
   595  007E16  0100               	movlb	0	; () banked
   596  007E18  6F60               	movwf	main@msg& (0+255),b
   597                           
   598                           ; BSR set to: 0
   599                           ;main.c: 103: mk_msg(&dados, 1, msg);
   600  007E1A  0EA8               	movlw	low main@dados
   601  007E1C  6E01               	movwf	mk_msg@data,c
   602  007E1E  0E00               	movlw	high main@dados
   603  007E20  6E02               	movwf	mk_msg@data+1,c
   604  007E22  0E01               	movlw	1
   605  007E24  6E03               	movwf	mk_msg@count,c
   606  007E26  0E60               	movlw	low main@msg
   607  007E28  6E04               	movwf	mk_msg@string,c
   608  007E2A  0E00               	movlw	high main@msg
   609  007E2C  6E05               	movwf	mk_msg@string+1,c
   610  007E2E  EC24  F03B         	call	_mk_msg	;wreg free
   611                           
   612                           ;main.c: 104: write_cmd(&dados, dados.addr_from);
   613  007E32  0EA8               	movlw	low main@dados
   614  007E34  6E05               	movwf	write_cmd@data,c
   615  007E36  0E00               	movlw	high main@dados
   616  007E38  6E06               	movwf	write_cmd@data+1,c
   617  007E3A  C0EB  F007         	movff	main@dados+67,write_cmd@addr_to
   618  007E3E  EC28  F03D         	call	_write_cmd	;wreg free
   619                           
   620                           ;main.c: 106: break;
   621  007E42  D0D1               	goto	l44
   622  007E44                     l51:
   623                           
   624                           ;main.c: 108: PORTDbits.RD1 = 1;
   625  007E44  8283               	bsf	3971,1,c	;volatile
   626                           
   627                           ;main.c: 110: msg[0] = 0x06;
   628  007E46  0E06               	movlw	6
   629  007E48  0100               	movlb	0	; () banked
   630  007E4A  6F60               	movwf	main@msg& (0+255),b
   631                           
   632                           ; BSR set to: 0
   633                           ;main.c: 111: mk_msg(&dados, 1, msg);
   634  007E4C  0EA8               	movlw	low main@dados
   635  007E4E  6E01               	movwf	mk_msg@data,c
   636  007E50  0E00               	movlw	high main@dados
   637  007E52  6E02               	movwf	mk_msg@data+1,c
   638  007E54  0E01               	movlw	1
   639  007E56  6E03               	movwf	mk_msg@count,c
   640  007E58  0E60               	movlw	low main@msg
   641  007E5A  6E04               	movwf	mk_msg@string,c
   642  007E5C  0E00               	movlw	high main@msg
   643  007E5E  6E05               	movwf	mk_msg@string+1,c
   644  007E60  EC24  F03B         	call	_mk_msg	;wreg free
   645                           
   646                           ;main.c: 112: write_cmd(&dados, dados.addr_from);
   647  007E64  0EA8               	movlw	low main@dados
   648  007E66  6E05               	movwf	write_cmd@data,c
   649  007E68  0E00               	movlw	high main@dados
   650  007E6A  6E06               	movwf	write_cmd@data+1,c
   651  007E6C  C0EB  F007         	movff	main@dados+67,write_cmd@addr_to
   652  007E70  EC28  F03D         	call	_write_cmd	;wreg free
   653                           
   654                           ;main.c: 114: break;
   655  007E74  D0B8               	goto	l44
   656  007E76                     
   657                           ;main.c: 116: msg[0] = 0x06;
   658  007E76  0E06               	movlw	6
   659  007E78  0100               	movlb	0	; () banked
   660  007E7A  6F60               	movwf	main@msg& (0+255),b
   661                           
   662                           ; BSR set to: 0
   663                           ;main.c: 117: msg[1] = (char) PORTDbits.RD2;
   664  007E7C  0E00               	movlw	0
   665  007E7E  B483               	btfsc	3971,2,c	;volatile
   666  007E80  0E01               	movlw	1
   667  007E82  6F61               	movwf	(main@msg+1)& (0+255),b
   668                           
   669                           ; BSR set to: 0
   670                           ;main.c: 118: mk_msg(&dados, 2, msg);
   671  007E84  0EA8               	movlw	low main@dados
   672  007E86  6E01               	movwf	mk_msg@data,c
   673  007E88  0E00               	movlw	high main@dados
   674  007E8A  6E02               	movwf	mk_msg@data+1,c
   675  007E8C  0E02               	movlw	2
   676  007E8E  6E03               	movwf	mk_msg@count,c
   677  007E90  0E60               	movlw	low main@msg
   678  007E92  6E04               	movwf	mk_msg@string,c
   679  007E94  0E00               	movlw	high main@msg
   680  007E96  6E05               	movwf	mk_msg@string+1,c
   681  007E98  EC24  F03B         	call	_mk_msg	;wreg free
   682                           
   683                           ;main.c: 119: write_cmd(&dados, dados.addr_from);
   684  007E9C  0EA8               	movlw	low main@dados
   685  007E9E  6E05               	movwf	write_cmd@data,c
   686  007EA0  0E00               	movlw	high main@dados
   687  007EA2  6E06               	movwf	write_cmd@data+1,c
   688  007EA4  C0EB  F007         	movff	main@dados+67,write_cmd@addr_to
   689  007EA8  EC28  F03D         	call	_write_cmd	;wreg free
   690                           
   691                           ;main.c: 121: break;
   692  007EAC  D09C               	goto	l44
   693  007EAE                     
   694                           ;main.c: 123: msg[0] = 0x06;
   695  007EAE  0E06               	movlw	6
   696  007EB0  0100               	movlb	0	; () banked
   697  007EB2  6F60               	movwf	main@msg& (0+255),b
   698                           
   699                           ; BSR set to: 0
   700                           ;main.c: 124: msg[1] = (char) PORTDbits.RD3;
   701  007EB4  0E00               	movlw	0
   702  007EB6  B683               	btfsc	3971,3,c	;volatile
   703  007EB8  0E01               	movlw	1
   704  007EBA  6F61               	movwf	(main@msg+1)& (0+255),b
   705                           
   706                           ; BSR set to: 0
   707                           ;main.c: 125: mk_msg(&dados, 2, msg);
   708  007EBC  0EA8               	movlw	low main@dados
   709  007EBE  6E01               	movwf	mk_msg@data,c
   710  007EC0  0E00               	movlw	high main@dados
   711  007EC2  6E02               	movwf	mk_msg@data+1,c
   712  007EC4  0E02               	movlw	2
   713  007EC6  6E03               	movwf	mk_msg@count,c
   714  007EC8  0E60               	movlw	low main@msg
   715  007ECA  6E04               	movwf	mk_msg@string,c
   716  007ECC  0E00               	movlw	high main@msg
   717  007ECE  6E05               	movwf	mk_msg@string+1,c
   718  007ED0  EC24  F03B         	call	_mk_msg	;wreg free
   719                           
   720                           ;main.c: 126: write_cmd(&dados, dados.addr_from);
   721  007ED4  0EA8               	movlw	low main@dados
   722  007ED6  6E05               	movwf	write_cmd@data,c
   723  007ED8  0E00               	movlw	high main@dados
   724  007EDA  6E06               	movwf	write_cmd@data+1,c
   725  007EDC  C0EB  F007         	movff	main@dados+67,write_cmd@addr_to
   726  007EE0  EC28  F03D         	call	_write_cmd	;wreg free
   727                           
   728                           ;main.c: 128: break;
   729  007EE4  D080               	goto	l44
   730  007EE6                     
   731                           ;main.c: 130: pos = (dados.buff[5]) - 0x80;
   732  007EE6  0100               	movlb	0	; () banked
   733  007EE8  51AE               	movf	(main@dados+6)& (0+255),w,b
   734  007EEA  0F80               	addlw	128
   735  007EEC  6F85               	movwf	main@pos& (0+255),b
   736                           
   737                           ;main.c: 133: uint8_t linha = pos < 16 ? 1 : 2;
   738  007EEE  0E0F               	movlw	15
   739  007EF0  6585               	cpfsgt	main@pos& (0+255),b
   740  007EF2  D004               	goto	l56
   741                           
   742                           ; BSR set to: 0
   743  007EF4  0E00               	movlw	0
   744  007EF6  6F82               	movwf	(_main$228+1)& (0+255),b
   745  007EF8  0E02               	movlw	2
   746  007EFA  D003               	goto	L1
   747  007EFC                     l56:
   748                           
   749                           ; BSR set to: 0
   750                           
   751                           ; BSR set to: 0
   752  007EFC  0E00               	movlw	0
   753  007EFE  6F82               	movwf	(_main$228+1)& (0+255),b
   754  007F00  0E01               	movlw	1
   755  007F02                     L1:
   756  007F02  6F81               	movwf	_main$228& (0+255),b
   757                           
   758                           ; BSR set to: 0
   759                           
   760                           ; BSR set to: 0
   761  007F04  C081  F083         	movff	_main$228,main@linha
   762                           
   763                           ; BSR set to: 0
   764                           ;main.c: 134: uint8_t coluna = (pos % 16) + 1;
   765  007F08  C085  F04F         	movff	main@pos,??_main
   766  007F0C  0E0F               	movlw	15
   767  007F0E  164F               	andwf	??_main,f,c
   768  007F10  284F               	incf	??_main,w,c
   769  007F12  6F84               	movwf	main@coluna& (0+255),b
   770                           
   771                           ; BSR set to: 0
   772                           ;main.c: 137: for (uint8_t i = 0; i < 33; i++) {
   773  007F14  0E00               	movlw	0
   774  007F16  6F86               	movwf	main@i& (0+255),b
   775  007F18  0E20               	movlw	32
   776  007F1A  6586               	cpfsgt	main@i& (0+255),b
   777  007F1C  D001               	goto	l59
   778  007F1E  D00C               	goto	u1400
   779  007F20                     l59:
   780                           
   781                           ; BSR set to: 0
   782                           ;main.c: 138: msg[i] = 0;
   783                           
   784                           ; BSR set to: 0
   785  007F20  5186               	movf	main@i& (0+255),w,b
   786  007F22  0D01               	mullw	1
   787  007F24  0E60               	movlw	low main@msg
   788  007F26  24F3               	addwf	prodl,w,c
   789  007F28  6ED9               	movwf	fsr2l,c
   790  007F2A  0E00               	movlw	high main@msg
   791  007F2C  20F4               	addwfc	prodh,w,c
   792  007F2E  6EDA               	movwf	fsr2h,c
   793  007F30  0E00               	movlw	0
   794  007F32  6EDF               	movwf	indf2,c
   795                           
   796                           ; BSR set to: 0
   797  007F34  2B86               	incf	main@i& (0+255),f,b
   798  007F36  D7F0               	goto	L2
   799  007F38                     u1400:
   800                           
   801                           ; BSR set to: 0
   802                           ;main.c: 139: }
   803                           ;main.c: 142: rcv_msg(&dados, msg);
   804                           
   805                           ; BSR set to: 0
   806  007F38  0EA8               	movlw	low main@dados
   807  007F3A  6E01               	movwf	rcv_msg@data,c
   808  007F3C  0E00               	movlw	high main@dados
   809  007F3E  6E02               	movwf	rcv_msg@data+1,c
   810  007F40  0E60               	movlw	low main@msg
   811  007F42  6E03               	movwf	rcv_msg@msg,c
   812  007F44  0E00               	movlw	high main@msg
   813  007F46  6E04               	movwf	rcv_msg@msg+1,c
   814  007F48  ECD4  F03B         	call	_rcv_msg	;wreg free
   815                           
   816                           ;main.c: 145: lcd_write(&lcd, linha, coluna, msg);
   817  007F4C  0E87               	movlw	low main@lcd
   818  007F4E  6E01               	movwf	lcd_write@lcd,c
   819  007F50  0E00               	movlw	high main@lcd
   820  007F52  6E02               	movwf	lcd_write@lcd+1,c
   821  007F54  C083  F003         	movff	main@linha,lcd_write@row
   822  007F58  C084  F004         	movff	main@coluna,lcd_write@col
   823  007F5C  0E60               	movlw	low main@msg
   824  007F5E  6E05               	movwf	lcd_write@string,c
   825  007F60  0E00               	movlw	high main@msg
   826  007F62  6E06               	movwf	lcd_write@string+1,c
   827  007F64  EC5E  F03C         	call	_lcd_write	;wreg free
   828                           
   829                           ;main.c: 148: msg[0] = 0x06;
   830  007F68  0E06               	movlw	6
   831  007F6A  0100               	movlb	0	; () banked
   832  007F6C  6F60               	movwf	main@msg& (0+255),b
   833                           
   834                           ; BSR set to: 0
   835                           ;main.c: 149: mk_msg(&dados, 1, msg);
   836  007F6E  0EA8               	movlw	low main@dados
   837  007F70  6E01               	movwf	mk_msg@data,c
   838  007F72  0E00               	movlw	high main@dados
   839  007F74  6E02               	movwf	mk_msg@data+1,c
   840  007F76  0E01               	movlw	1
   841  007F78  6E03               	movwf	mk_msg@count,c
   842  007F7A  0E60               	movlw	low main@msg
   843  007F7C  6E04               	movwf	mk_msg@string,c
   844  007F7E  0E00               	movlw	high main@msg
   845  007F80  6E05               	movwf	mk_msg@string+1,c
   846  007F82  EC24  F03B         	call	_mk_msg	;wreg free
   847                           
   848                           ;main.c: 150: write_cmd(&dados, dados.addr_from);
   849  007F86  0EA8               	movlw	low main@dados
   850  007F88  6E05               	movwf	write_cmd@data,c
   851  007F8A  0E00               	movlw	high main@dados
   852  007F8C  6E06               	movwf	write_cmd@data+1,c
   853  007F8E  C0EB  F007         	movff	main@dados+67,write_cmd@addr_to
   854  007F92  EC28  F03D         	call	_write_cmd	;wreg free
   855                           
   856                           ;main.c: 156: }
   857                           
   858                           ;main.c: 155: break;
   859                           
   860                           ;main.c: 153: default:
   861                           
   862                           ;main.c: 152: break;
   863  007F96  D027               	goto	l44
   864  007F98                     l42:
   865  007F98  0EA8               	movlw	low main@dados
   866  007F9A  6E05               	movwf	check_data@data,c
   867  007F9C  0E00               	movlw	high main@dados
   868  007F9E  6E06               	movwf	check_data@data+1,c
   869  007FA0  ECA8  F03D         	call	_check_data	;wreg free
   870                           
   871                           ; Switch size 1, requested type "space"
   872                           ; Number of cases is 11, Range of values is 0 to 10
   873                           ; switch strategies available:
   874                           ; Name         Instructions Cycles
   875                           ; simple_byte           34    18 (average)
   876                           ;	Chosen strategy is simple_byte
   877  007FA4  0A00               	xorlw	0	; case 0
   878  007FA6  B4D8               	btfsc	status,2,c
   879  007FA8  D01E               	goto	l44
   880  007FAA  0A01               	xorlw	1	; case 1
   881  007FAC  B4D8               	btfsc	status,2,c
   882  007FAE  D01B               	goto	l44
   883  007FB0  0A03               	xorlw	3	; case 2
   884  007FB2  B4D8               	btfsc	status,2,c
   885  007FB4  D018               	goto	l44
   886  007FB6  0A01               	xorlw	1	; case 3
   887  007FB8  B4D8               	btfsc	status,2,c
   888  007FBA  D6E1               	goto	l47
   889  007FBC  0A07               	xorlw	7	; case 4
   890  007FBE  B4D8               	btfsc	status,2,c
   891  007FC0  D6F6               	goto	l48
   892  007FC2  0A01               	xorlw	1	; case 5
   893  007FC4  B4D8               	btfsc	status,2,c
   894  007FC6  D725               	goto	l50
   895  007FC8  0A03               	xorlw	3	; case 6
   896  007FCA  B4D8               	btfsc	status,2,c
   897  007FCC  D709               	goto	l49
   898  007FCE  0A01               	xorlw	1	; case 7
   899  007FD0  B4D8               	btfsc	status,2,c
   900  007FD2  D738               	goto	l51
   901  007FD4  0A0F               	xorlw	15	; case 8
   902  007FD6  B4D8               	btfsc	status,2,c
   903  007FD8  D74E               	goto	l52
   904  007FDA  0A01               	xorlw	1	; case 9
   905  007FDC  B4D8               	btfsc	status,2,c
   906  007FDE  D767               	goto	l53
   907  007FE0  0A03               	xorlw	3	; case 10
   908  007FE2  B4D8               	btfsc	status,2,c
   909  007FE4  D780               	goto	l54
   910  007FE6                     l44:
   911                           
   912                           ;main.c: 158: write_zero(&dados);
   913  007FE6  0EA8               	movlw	low main@dados
   914  007FE8  6E01               	movwf	write_zero@dados,c
   915  007FEA  0E00               	movlw	high main@dados
   916  007FEC  6E02               	movwf	write_zero@dados+1,c
   917  007FEE  EC9D  F03B         	call	_write_zero	;wreg free
   918  007FF2                     l41:
   919                           
   920                           ;main.c: 160: }
   921                           ;main.c: 162: lcd_runtime(&lcd);
   922  007FF2  0E87               	movlw	low main@lcd
   923  007FF4  6E07               	movwf	lcd_runtime@lcd,c
   924  007FF6  0E00               	movlw	high main@lcd
   925  007FF8  6E08               	movwf	lcd_runtime@lcd+1,c
   926  007FFA  ECBB  F03C         	call	_lcd_runtime	;wreg free
   927  007FFE  D698               	goto	l37
   928  008000                     __end_of_main:
   929                           	opt stack 0
   930                           tblptru	equ	0xFF8
   931                           prodh	equ	0xFF4
   932                           prodl	equ	0xFF3
   933                           postinc0	equ	0xFEE
   934                           wreg	equ	0xFE8
   935                           plusw1	equ	0xFE3
   936                           indf2	equ	0xFDF
   937                           plusw2	equ	0xFDB
   938                           fsr2h	equ	0xFDA
   939                           fsr2l	equ	0xFD9
   940                           status	equ	0xFD8
   941                           
   942 ;; *************** function _write_zero *****************
   943 ;; Defined at:
   944 ;;		line 125 in file "comunicacao.c"
   945 ;; Parameters:    Size  Location     Type
   946 ;;  dados           2    0[COMRAM] PTR struct .
   947 ;;		 -> main@dados(69), 
   948 ;; Auto vars:     Size  Location     Type
   949 ;;  i               1    2[COMRAM] unsigned char 
   950 ;; Return value:  Size  Location     Type
   951 ;;                  1    wreg      void 
   952 ;; Registers used:
   953 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
   954 ;; Tracked objects:
   955 ;;		On entry : 0/0
   956 ;;		On exit  : 0/0
   957 ;;		Unchanged: 0/0
   958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   959 ;;      Params:         2       0       0       0       0       0       0       0       0
   960 ;;      Locals:         1       0       0       0       0       0       0       0       0
   961 ;;      Temps:          0       0       0       0       0       0       0       0       0
   962 ;;      Totals:         3       0       0       0       0       0       0       0       0
   963 ;;Total ram usage:        3 bytes
   964 ;; Hardware stack levels used:    1
   965 ;; This function calls:
   966 ;;		Nothing
   967 ;; This function is called by:
   968 ;;		_main
   969 ;; This function uses a non-reentrant model
   970 ;;
   971                           
   972                           	psect	text1
   973  00773A                     __ptext1:
   974                           	opt stack 0
   975  00773A                     _write_zero:
   976                           	opt stack 30
   977                           
   978                           ;comunicacao.c: 127: for (uint8_t i = 0; i < 64; i++) {
   979                           
   980                           ;incstack = 0
   981  00773A  0E00               	movlw	0
   982  00773C  6E03               	movwf	write_zero@i,c
   983  00773E                     l1841:
   984  00773E  0E3F               	movlw	63
   985  007740  6403               	cpfsgt	write_zero@i,c
   986  007742  D001               	goto	l129
   987  007744  D010               	goto	u940
   988  007746                     l129:
   989                           
   990                           ;comunicacao.c: 128: dados->buff[i] = 0x00;
   991  007746  5003               	movf	write_zero@i,w,c
   992  007748  0D01               	mullw	1
   993  00774A  0E01               	movlw	1
   994  00774C  26F3               	addwf	prodl,f,c
   995  00774E  0E00               	movlw	0
   996  007750  22F4               	addwfc	prodh,f,c
   997  007752  50F3               	movf	prodl,w,c
   998  007754  2401               	addwf	write_zero@dados,w,c
   999  007756  6ED9               	movwf	fsr2l,c
  1000  007758  50F4               	movf	prodh,w,c
  1001  00775A  2002               	addwfc	write_zero@dados+1,w,c
  1002  00775C  6EDA               	movwf	fsr2h,c
  1003  00775E  0E00               	movlw	0
  1004  007760  6EDF               	movwf	indf2,c
  1005  007762  2A03               	incf	write_zero@i,f,c
  1006  007764  D7EC               	goto	l1841
  1007  007766                     u940:
  1008                           
  1009                           ;comunicacao.c: 129: }
  1010                           ;comunicacao.c: 131: dados->count = 0;
  1011  007766  C001  FFD9         	movff	write_zero@dados,fsr2l
  1012  00776A  C002  FFDA         	movff	write_zero@dados+1,fsr2h
  1013  00776E  0E00               	movlw	0
  1014  007770  6EDF               	movwf	indf2,c
  1015                           
  1016                           ;comunicacao.c: 132: dados->command = 0;
  1017  007772  EE20 F044          	lfsr	2,68
  1018  007776  5001               	movf	write_zero@dados,w,c
  1019  007778  26D9               	addwf	fsr2l,f,c
  1020  00777A  5002               	movf	write_zero@dados+1,w,c
  1021  00777C  22DA               	addwfc	fsr2h,f,c
  1022  00777E  0E00               	movlw	0
  1023  007780  6EDF               	movwf	indf2,c
  1024                           
  1025                           ;comunicacao.c: 133: dados->data_flag = 0;
  1026  007782  EE20 F041          	lfsr	2,65
  1027  007786  5001               	movf	write_zero@dados,w,c
  1028  007788  26D9               	addwf	fsr2l,f,c
  1029  00778A  5002               	movf	write_zero@dados+1,w,c
  1030  00778C  22DA               	addwfc	fsr2h,f,c
  1031  00778E  0E00               	movlw	0
  1032  007790  6EDE               	movwf	postinc2,c
  1033  007792  0E00               	movlw	0
  1034  007794  6EDD               	movwf	postdec2,c
  1035                           
  1036                           ;comunicacao.c: 134: dados->addr_from = 0;
  1037  007796  EE20 F043          	lfsr	2,67
  1038  00779A  5001               	movf	write_zero@dados,w,c
  1039  00779C  26D9               	addwf	fsr2l,f,c
  1040  00779E  5002               	movf	write_zero@dados+1,w,c
  1041  0077A0  22DA               	addwfc	fsr2h,f,c
  1042  0077A2  0E00               	movlw	0
  1043  0077A4  6EDF               	movwf	indf2,c
  1044  0077A6  0012               	return		;funcret
  1045  0077A8                     __end_of_write_zero:
  1046                           	opt stack 0
  1047                           tblptru	equ	0xFF8
  1048                           prodh	equ	0xFF4
  1049                           prodl	equ	0xFF3
  1050                           postinc0	equ	0xFEE
  1051                           wreg	equ	0xFE8
  1052                           plusw1	equ	0xFE3
  1053                           indf2	equ	0xFDF
  1054                           postinc2	equ	0xFDE
  1055                           postdec2	equ	0xFDD
  1056                           plusw2	equ	0xFDB
  1057                           fsr2h	equ	0xFDA
  1058                           fsr2l	equ	0xFD9
  1059                           status	equ	0xFD8
  1060                           
  1061 ;; *************** function _write_cmd *****************
  1062 ;; Defined at:
  1063 ;;		line 44 in file "comunicacao.c"
  1064 ;; Parameters:    Size  Location     Type
  1065 ;;  data            2    4[COMRAM] PTR struct .
  1066 ;;		 -> main@dados(69), 
  1067 ;;  addr_to         1    6[COMRAM] unsigned char 
  1068 ;; Auto vars:     Size  Location     Type
  1069 ;;  t               1   76[COMRAM] unsigned char 
  1070 ;;  aux            64   12[COMRAM] unsigned char [64]
  1071 ;;  i               1   77[COMRAM] unsigned char 
  1072 ;; Return value:  Size  Location     Type
  1073 ;;                  1    wreg      void 
  1074 ;; Registers used:
  1075 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1076 ;; Tracked objects:
  1077 ;;		On entry : 0/0
  1078 ;;		On exit  : 0/0
  1079 ;;		Unchanged: 0/0
  1080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1081 ;;      Params:         3       0       0       0       0       0       0       0       0
  1082 ;;      Locals:        66       0       0       0       0       0       0       0       0
  1083 ;;      Temps:          5       0       0       0       0       0       0       0       0
  1084 ;;      Totals:        74       0       0       0       0       0       0       0       0
  1085 ;;Total ram usage:       74 bytes
  1086 ;; Hardware stack levels used:    1
  1087 ;; Hardware stack levels required when called:    1
  1088 ;; This function calls:
  1089 ;;		_calc_bcc
  1090 ;;		_uart_send_byte
  1091 ;; This function is called by:
  1092 ;;		_main
  1093 ;; This function uses a non-reentrant model
  1094 ;;
  1095                           
  1096                           	psect	text2
  1097  007A50                     __ptext2:
  1098                           	opt stack 0
  1099  007A50                     _write_cmd:
  1100                           	opt stack 29
  1101                           
  1102                           ;comunicacao.c: 46: uint8_t aux[64] = {0};
  1103                           
  1104                           ;incstack = 0
  1105  007A50  EE21  F000         	lfsr	2,write_cmd@F4641
  1106  007A54  EE10  F00D         	lfsr	1,write_cmd@aux
  1107  007A58  0E3F               	movlw	63
  1108  007A5A                     u991:
  1109  007A5A  CFDB FFE3          	movff	plusw2,plusw1
  1110  007A5E  06E8               	decf	wreg,f,c
  1111  007A60  E2FC               	bc	u991
  1112                           
  1113                           ;comunicacao.c: 48: aux[0] = 0x02;
  1114  007A62  0E02               	movlw	2
  1115  007A64  6E0D               	movwf	write_cmd@aux,c
  1116                           
  1117                           ;comunicacao.c: 49: aux[1] = addr_to;
  1118  007A66  C007  F00E         	movff	write_cmd@addr_to,write_cmd@aux+1
  1119                           
  1120                           ;comunicacao.c: 50: aux[2] = 0x09;
  1121  007A6A  0E09               	movlw	9
  1122  007A6C  6E0F               	movwf	write_cmd@aux+2,c
  1123                           
  1124                           ;comunicacao.c: 51: aux[3] = data->command;
  1125  007A6E  EE20 F044          	lfsr	2,68
  1126  007A72  5005               	movf	write_cmd@data,w,c
  1127  007A74  26D9               	addwf	fsr2l,f,c
  1128  007A76  5006               	movf	write_cmd@data+1,w,c
  1129  007A78  22DA               	addwfc	fsr2h,f,c
  1130  007A7A  50DF               	movf	indf2,w,c
  1131  007A7C  6E10               	movwf	write_cmd@aux+3,c
  1132                           
  1133                           ;comunicacao.c: 52: aux[4] = data->count;
  1134  007A7E  C005  FFD9         	movff	write_cmd@data,fsr2l
  1135  007A82  C006  FFDA         	movff	write_cmd@data+1,fsr2h
  1136  007A86  50DF               	movf	indf2,w,c
  1137  007A88  6E11               	movwf	write_cmd@aux+4,c
  1138                           
  1139                           ;comunicacao.c: 54: uint8_t i = 0;
  1140  007A8A  0E00               	movlw	0
  1141  007A8C  6E4E               	movwf	write_cmd@i,c
  1142                           
  1143                           ;comunicacao.c: 55: while (i < data->count) {
  1144  007A8E  D01C               	goto	l91
  1145  007A90                     
  1146                           ;comunicacao.c: 56: aux[i + 5] = data->buff[i++];
  1147  007A90  504E               	movf	write_cmd@i,w,c
  1148  007A92  0D01               	mullw	1
  1149  007A94  0E01               	movlw	1
  1150  007A96  26F3               	addwf	prodl,f,c
  1151  007A98  0E00               	movlw	0
  1152  007A9A  22F4               	addwfc	prodh,f,c
  1153  007A9C  50F3               	movf	prodl,w,c
  1154  007A9E  2405               	addwf	write_cmd@data,w,c
  1155  007AA0  6ED9               	movwf	fsr2l,c
  1156  007AA2  50F4               	movf	prodh,w,c
  1157  007AA4  2006               	addwfc	write_cmd@data+1,w,c
  1158  007AA6  6EDA               	movwf	fsr2h,c
  1159  007AA8  504E               	movf	write_cmd@i,w,c
  1160  007AAA  6E08               	movwf	??_write_cmd& (0+255),c
  1161  007AAC  6A09               	clrf	(??_write_cmd+1)& (0+255),c
  1162  007AAE  0E05               	movlw	5
  1163  007AB0  2608               	addwf	??_write_cmd,f,c
  1164  007AB2  0E00               	movlw	0
  1165  007AB4  2209               	addwfc	??_write_cmd+1,f,c
  1166  007AB6  0E0D               	movlw	low write_cmd@aux
  1167  007AB8  2408               	addwf	??_write_cmd,w,c
  1168  007ABA  6EE1               	movwf	fsr1l,c
  1169  007ABC  0E00               	movlw	high write_cmd@aux
  1170  007ABE  2009               	addwfc	??_write_cmd+1,w,c
  1171  007AC0  6EE2               	movwf	fsr1h,c
  1172  007AC2  CFDF FFE7          	movff	indf2,indf1
  1173  007AC6  2A4E               	incf	write_cmd@i,f,c
  1174  007AC8                     l91:
  1175  007AC8  C005  FFD9         	movff	write_cmd@data,fsr2l
  1176  007ACC  C006  FFDA         	movff	write_cmd@data+1,fsr2h
  1177  007AD0  50DE               	movf	postinc2,w,c
  1178  007AD2  5C4E               	subwf	write_cmd@i,w,c
  1179  007AD4  A0D8               	btfss	status,0,c
  1180  007AD6  D7DC               	goto	l92
  1181                           
  1182                           ;comunicacao.c: 57: }
  1183                           ;comunicacao.c: 59: aux[i + 5] = calc_bcc(data->buff);
  1184  007AD8  0E01               	movlw	1
  1185  007ADA  2405               	addwf	write_cmd@data,w,c
  1186  007ADC  6E01               	movwf	calc_bcc@data,c
  1187  007ADE  0E00               	movlw	0
  1188  007AE0  2006               	addwfc	write_cmd@data+1,w,c
  1189  007AE2  6E02               	movwf	calc_bcc@data+1,c
  1190  007AE4  EC6F  F03A         	call	_calc_bcc	;wreg free
  1191  007AE8  6E08               	movwf	??_write_cmd& (0+255),c
  1192  007AEA  504E               	movf	write_cmd@i,w,c
  1193  007AEC  6E09               	movwf	(??_write_cmd+1)& (0+255),c
  1194  007AEE  6A0A               	clrf	(??_write_cmd+2)& (0+255),c
  1195  007AF0  0E05               	movlw	5
  1196  007AF2  2609               	addwf	??_write_cmd+1,f,c
  1197  007AF4  0E00               	movlw	0
  1198  007AF6  220A               	addwfc	??_write_cmd+2,f,c
  1199  007AF8  0E0D               	movlw	low write_cmd@aux
  1200  007AFA  2409               	addwf	??_write_cmd+1,w,c
  1201  007AFC  6ED9               	movwf	fsr2l,c
  1202  007AFE  0E00               	movlw	high write_cmd@aux
  1203  007B00  200A               	addwfc	??_write_cmd+2,w,c
  1204  007B02  6EDA               	movwf	fsr2h,c
  1205  007B04  C008  FFDF         	movff	??_write_cmd,indf2
  1206                           
  1207                           ;comunicacao.c: 61: for (uint8_t t = 0; t < i + 6; t++) {
  1208  007B08  0E00               	movlw	0
  1209  007B0A  6E4D               	movwf	write_cmd@t,c
  1210  007B0C  D00C               	goto	l94
  1211  007B0E                     
  1212                           ;comunicacao.c: 62: uart_send_byte(aux[t]);
  1213  007B0E  504D               	movf	write_cmd@t,w,c
  1214  007B10  0D01               	mullw	1
  1215  007B12  0E0D               	movlw	low write_cmd@aux
  1216  007B14  24F3               	addwf	prodl,w,c
  1217  007B16  6ED9               	movwf	fsr2l,c
  1218  007B18  0E00               	movlw	high write_cmd@aux
  1219  007B1A  20F4               	addwfc	prodh,w,c
  1220  007B1C  6EDA               	movwf	fsr2h,c
  1221  007B1E  50DF               	movf	indf2,w,c
  1222  007B20  EC1D  F03A         	call	_uart_send_byte
  1223  007B24  2A4D               	incf	write_cmd@t,f,c
  1224  007B26                     l94:
  1225  007B26  504E               	movf	write_cmd@i,w,c
  1226  007B28  6E08               	movwf	??_write_cmd& (0+255),c
  1227  007B2A  6A09               	clrf	(??_write_cmd+1)& (0+255),c
  1228  007B2C  0E06               	movlw	6
  1229  007B2E  2608               	addwf	??_write_cmd,f,c
  1230  007B30  0E00               	movlw	0
  1231  007B32  2209               	addwfc	??_write_cmd+1,f,c
  1232  007B34  504D               	movf	write_cmd@t,w,c
  1233  007B36  6E0A               	movwf	(??_write_cmd+2)& (0+255),c
  1234  007B38  6A0B               	clrf	(??_write_cmd+3)& (0+255),c
  1235  007B3A  5008               	movf	??_write_cmd,w,c
  1236  007B3C  5C0A               	subwf	??_write_cmd+2,w,c
  1237  007B3E  500B               	movf	??_write_cmd+3,w,c
  1238  007B40  0A80               	xorlw	128
  1239  007B42  6E0C               	movwf	(??_write_cmd+4)& (0+255),c
  1240  007B44  5009               	movf	??_write_cmd+1,w,c
  1241  007B46  0A80               	xorlw	128
  1242  007B48  580C               	subwfb	(??_write_cmd+4)& (0+255),w,c
  1243  007B4A  B0D8               	btfsc	status,0,c
  1244  007B4C  0012               	return	
  1245  007B4E  D7DF               	goto	l95
  1246  007B50                     __end_of_write_cmd:
  1247                           	opt stack 0
  1248                           tblptru	equ	0xFF8
  1249                           prodh	equ	0xFF4
  1250                           prodl	equ	0xFF3
  1251                           postinc0	equ	0xFEE
  1252                           wreg	equ	0xFE8
  1253                           indf1	equ	0xFE7
  1254                           plusw1	equ	0xFE3
  1255                           fsr1h	equ	0xFE2
  1256                           fsr1l	equ	0xFE1
  1257                           indf2	equ	0xFDF
  1258                           postinc2	equ	0xFDE
  1259                           postdec2	equ	0xFDD
  1260                           plusw2	equ	0xFDB
  1261                           fsr2h	equ	0xFDA
  1262                           fsr2l	equ	0xFD9
  1263                           status	equ	0xFD8
  1264                           
  1265 ;; *************** function _uart_send_byte *****************
  1266 ;; Defined at:
  1267 ;;		line 53 in file "uart.c"
  1268 ;; Parameters:    Size  Location     Type
  1269 ;;  byte            1    wreg     unsigned char 
  1270 ;; Auto vars:     Size  Location     Type
  1271 ;;  byte            1    0[COMRAM] unsigned char 
  1272 ;; Return value:  Size  Location     Type
  1273 ;;                  1    wreg      void 
  1274 ;; Registers used:
  1275 ;;		wreg
  1276 ;; Tracked objects:
  1277 ;;		On entry : 0/0
  1278 ;;		On exit  : 0/0
  1279 ;;		Unchanged: 0/0
  1280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1281 ;;      Params:         0       0       0       0       0       0       0       0       0
  1282 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1283 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1284 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1285 ;;Total ram usage:        1 bytes
  1286 ;; Hardware stack levels used:    1
  1287 ;; This function calls:
  1288 ;;		Nothing
  1289 ;; This function is called by:
  1290 ;;		_write_cmd
  1291 ;; This function uses a non-reentrant model
  1292 ;;
  1293                           
  1294                           	psect	text3
  1295  00743A                     __ptext3:
  1296                           	opt stack 0
  1297  00743A                     _uart_send_byte:
  1298                           	opt stack 29
  1299                           
  1300                           ;incstack = 0
  1301                           ;uart_send_byte@byte stored from wreg
  1302  00743A  6E01               	movwf	uart_send_byte@byte,c
  1303  00743C                     
  1304                           ;uart.c: 55: while (TXIF == 0);
  1305  00743C  A89E               	btfss	3998,4,c	;volatile
  1306  00743E  D7FE               	goto	l1719
  1307                           
  1308                           ;uart.c: 56: TXREG = byte;
  1309  007440  C001  FFAD         	movff	uart_send_byte@byte,4013	;volatile
  1310  007444  B2AC               	btfsc	4012,1,c	;volatile
  1311  007446  0012               	return	
  1312  007448  D7FD               	goto	l172
  1313  00744A                     __end_of_uart_send_byte:
  1314                           	opt stack 0
  1315                           tblptru	equ	0xFF8
  1316                           prodh	equ	0xFF4
  1317                           prodl	equ	0xFF3
  1318                           postinc0	equ	0xFEE
  1319                           wreg	equ	0xFE8
  1320                           indf1	equ	0xFE7
  1321                           plusw1	equ	0xFE3
  1322                           fsr1h	equ	0xFE2
  1323                           fsr1l	equ	0xFE1
  1324                           indf2	equ	0xFDF
  1325                           postinc2	equ	0xFDE
  1326                           postdec2	equ	0xFDD
  1327                           plusw2	equ	0xFDB
  1328                           fsr2h	equ	0xFDA
  1329                           fsr2l	equ	0xFD9
  1330                           status	equ	0xFD8
  1331                           
  1332 ;; *************** function _uart_init *****************
  1333 ;; Defined at:
  1334 ;;		line 12 in file "uart.c"
  1335 ;; Parameters:    Size  Location     Type
  1336 ;;		None
  1337 ;; Auto vars:     Size  Location     Type
  1338 ;;		None
  1339 ;; Return value:  Size  Location     Type
  1340 ;;                  1    wreg      void 
  1341 ;; Registers used:
  1342 ;;		wreg, status,2
  1343 ;; Tracked objects:
  1344 ;;		On entry : 0/0
  1345 ;;		On exit  : 0/0
  1346 ;;		Unchanged: 0/0
  1347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1348 ;;      Params:         0       0       0       0       0       0       0       0       0
  1349 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1350 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1351 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1352 ;;Total ram usage:        0 bytes
  1353 ;; Hardware stack levels used:    1
  1354 ;; This function calls:
  1355 ;;		Nothing
  1356 ;; This function is called by:
  1357 ;;		_main
  1358 ;; This function uses a non-reentrant model
  1359 ;;
  1360                           
  1361                           	psect	text4
  1362  00742C                     __ptext4:
  1363                           	opt stack 0
  1364  00742C                     _uart_init:
  1365                           	opt stack 30
  1366                           
  1367                           ;uart.c: 14: RCSTA = 0x90;
  1368                           
  1369                           ;incstack = 0
  1370  00742C  0E90               	movlw	144
  1371  00742E  6EAB               	movwf	4011,c	;volatile
  1372                           
  1373                           ;uart.c: 15: TXSTA = 0x24;
  1374  007430  0E24               	movlw	36
  1375  007432  6EAC               	movwf	4012,c	;volatile
  1376                           
  1377                           ;uart.c: 22: SPBRG = 51;
  1378  007434  0E33               	movlw	51
  1379  007436  6EAF               	movwf	4015,c	;volatile
  1380  007438  0012               	return		;funcret
  1381  00743A                     __end_of_uart_init:
  1382                           	opt stack 0
  1383                           tblptru	equ	0xFF8
  1384                           prodh	equ	0xFF4
  1385                           prodl	equ	0xFF3
  1386                           postinc0	equ	0xFEE
  1387                           wreg	equ	0xFE8
  1388                           indf1	equ	0xFE7
  1389                           plusw1	equ	0xFE3
  1390                           fsr1h	equ	0xFE2
  1391                           fsr1l	equ	0xFE1
  1392                           indf2	equ	0xFDF
  1393                           postinc2	equ	0xFDE
  1394                           postdec2	equ	0xFDD
  1395                           plusw2	equ	0xFDB
  1396                           fsr2h	equ	0xFDA
  1397                           fsr2l	equ	0xFD9
  1398                           status	equ	0xFD8
  1399                           
  1400 ;; *************** function _uart_check_rx *****************
  1401 ;; Defined at:
  1402 ;;		line 25 in file "uart.c"
  1403 ;; Parameters:    Size  Location     Type
  1404 ;;		None
  1405 ;; Auto vars:     Size  Location     Type
  1406 ;;  tempo           2    2[COMRAM] unsigned int 
  1407 ;; Return value:  Size  Location     Type
  1408 ;;                  2    0[COMRAM] short 
  1409 ;; Registers used:
  1410 ;;		wreg, status,2, status,0
  1411 ;; Tracked objects:
  1412 ;;		On entry : 0/0
  1413 ;;		On exit  : 0/0
  1414 ;;		Unchanged: 0/0
  1415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1416 ;;      Params:         2       0       0       0       0       0       0       0       0
  1417 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1418 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1419 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1420 ;;Total ram usage:        4 bytes
  1421 ;; Hardware stack levels used:    1
  1422 ;; This function calls:
  1423 ;;		Nothing
  1424 ;; This function is called by:
  1425 ;;		_main
  1426 ;; This function uses a non-reentrant model
  1427 ;;
  1428                           
  1429                           	psect	text5
  1430  00754E                     __ptext5:
  1431                           	opt stack 0
  1432  00754E                     _uart_check_rx:
  1433                           	opt stack 30
  1434                           
  1435                           ;uart.c: 27: uint16_t tempo;
  1436                           ;uart.c: 29: RCSTAbits.OERR = 0;
  1437                           
  1438                           ;incstack = 0
  1439  00754E  92AB               	bcf	4011,1,c	;volatile
  1440                           
  1441                           ;uart.c: 30: RCSTAbits.CREN = 0;
  1442  007550  98AB               	bcf	4011,4,c	;volatile
  1443                           
  1444                           ;uart.c: 31: __nop();
  1445  007552  F000               	nop	
  1446                           
  1447                           ;uart.c: 32: RCSTAbits.CREN = 1;
  1448  007554  88AB               	bsf	4011,4,c	;volatile
  1449                           
  1450                           ;uart.c: 34: tempo = 0xFFF;
  1451  007556  0E0F               	movlw	15
  1452  007558  6E04               	movwf	uart_check_rx@tempo+1,c
  1453  00755A  6803               	setf	uart_check_rx@tempo,c
  1454  00755C                     
  1455                           ;uart.c: 37: --tempo;
  1456  00755C  0603               	decf	uart_check_rx@tempo,f,c
  1457  00755E  A0D8               	btfss	status,0,c
  1458  007560  0604               	decf	uart_check_rx@tempo+1,f,c
  1459                           
  1460                           ;uart.c: 38: } while (!RCIF && tempo > 0);
  1461  007562  BA9E               	btfsc	3998,5,c	;volatile
  1462  007564  D004               	goto	u960
  1463  007566  5003               	movf	uart_check_rx@tempo,w,c
  1464  007568  1004               	iorwf	uart_check_rx@tempo+1,w,c
  1465  00756A  A4D8               	btfss	status,2,c
  1466  00756C  D7F7               	goto	l157
  1467  00756E                     u960:
  1468                           
  1469                           ;uart.c: 40: if (tempo > 0) {
  1470  00756E  5003               	movf	uart_check_rx@tempo,w,c
  1471  007570  1004               	iorwf	uart_check_rx@tempo+1,w,c
  1472  007572  B4D8               	btfsc	status,2,c
  1473  007574  D005               	goto	l161
  1474                           
  1475                           ;uart.c: 41: return(0);
  1476  007576  0E00               	movlw	0
  1477  007578  6E02               	movwf	?_uart_check_rx+1,c
  1478  00757A  0E00               	movlw	0
  1479  00757C  6E01               	movwf	?_uart_check_rx,c
  1480  00757E  0012               	return	
  1481  007580                     l161:
  1482                           
  1483                           ;uart.c: 42: }
  1484                           ;uart.c: 44: return(1);
  1485  007580  0E00               	movlw	0
  1486  007582  6E02               	movwf	?_uart_check_rx+1,c
  1487  007584  0E01               	movlw	1
  1488  007586  6E01               	movwf	?_uart_check_rx,c
  1489  007588  0012               	return	
  1490  00758A                     __end_of_uart_check_rx:
  1491                           	opt stack 0
  1492                           tblptru	equ	0xFF8
  1493                           prodh	equ	0xFF4
  1494                           prodl	equ	0xFF3
  1495                           postinc0	equ	0xFEE
  1496                           wreg	equ	0xFE8
  1497                           indf1	equ	0xFE7
  1498                           plusw1	equ	0xFE3
  1499                           fsr1h	equ	0xFE2
  1500                           fsr1l	equ	0xFE1
  1501                           indf2	equ	0xFDF
  1502                           postinc2	equ	0xFDE
  1503                           postdec2	equ	0xFDD
  1504                           plusw2	equ	0xFDB
  1505                           fsr2h	equ	0xFDA
  1506                           fsr2l	equ	0xFD9
  1507                           status	equ	0xFD8
  1508                           
  1509 ;; *************** function _rcv_msg *****************
  1510 ;; Defined at:
  1511 ;;		line 13 in file "comunicacao.c"
  1512 ;; Parameters:    Size  Location     Type
  1513 ;;  data            2    0[COMRAM] PTR struct .
  1514 ;;		 -> main@dados(69), 
  1515 ;;  msg             2    2[COMRAM] PTR unsigned char 
  1516 ;;		 -> main@msg(33), 
  1517 ;; Auto vars:     Size  Location     Type
  1518 ;;  i               1   11[COMRAM] unsigned char 
  1519 ;; Return value:  Size  Location     Type
  1520 ;;                  1    wreg      void 
  1521 ;; Registers used:
  1522 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1523 ;; Tracked objects:
  1524 ;;		On entry : 0/0
  1525 ;;		On exit  : 0/0
  1526 ;;		Unchanged: 0/0
  1527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1528 ;;      Params:         4       0       0       0       0       0       0       0       0
  1529 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1530 ;;      Temps:          7       0       0       0       0       0       0       0       0
  1531 ;;      Totals:        12       0       0       0       0       0       0       0       0
  1532 ;;Total ram usage:       12 bytes
  1533 ;; Hardware stack levels used:    1
  1534 ;; This function calls:
  1535 ;;		Nothing
  1536 ;; This function is called by:
  1537 ;;		_main
  1538 ;; This function uses a non-reentrant model
  1539 ;;
  1540                           
  1541                           	psect	text6
  1542  0077A8                     __ptext6:
  1543                           	opt stack 0
  1544  0077A8                     _rcv_msg:
  1545                           	opt stack 30
  1546                           
  1547                           ;comunicacao.c: 30: for (uint8_t i = 0; i < data->count - 1; i++) {
  1548                           
  1549                           ;incstack = 0
  1550  0077A8  0E00               	movlw	0
  1551  0077AA  6E0C               	movwf	rcv_msg@i,c
  1552  0077AC  D018               	goto	l77
  1553  0077AE                     
  1554                           ;comunicacao.c: 31: msg[i] = data->buff[i + 6];
  1555  0077AE  500C               	movf	rcv_msg@i,w,c
  1556  0077B0  6E05               	movwf	??_rcv_msg& (0+255),c
  1557  0077B2  6A06               	clrf	(??_rcv_msg+1)& (0+255),c
  1558  0077B4  0E07               	movlw	7
  1559  0077B6  2605               	addwf	??_rcv_msg,f,c
  1560  0077B8  0E00               	movlw	0
  1561  0077BA  2206               	addwfc	??_rcv_msg+1,f,c
  1562  0077BC  5005               	movf	??_rcv_msg,w,c
  1563  0077BE  2401               	addwf	rcv_msg@data,w,c
  1564  0077C0  6ED9               	movwf	fsr2l,c
  1565  0077C2  5006               	movf	??_rcv_msg+1,w,c
  1566  0077C4  2002               	addwfc	rcv_msg@data+1,w,c
  1567  0077C6  6EDA               	movwf	fsr2h,c
  1568  0077C8  500C               	movf	rcv_msg@i,w,c
  1569  0077CA  0D01               	mullw	1
  1570  0077CC  50F3               	movf	prodl,w,c
  1571  0077CE  2403               	addwf	rcv_msg@msg,w,c
  1572  0077D0  6EE1               	movwf	fsr1l,c
  1573  0077D2  50F4               	movf	prodh,w,c
  1574  0077D4  2004               	addwfc	rcv_msg@msg+1,w,c
  1575  0077D6  6EE2               	movwf	fsr1h,c
  1576  0077D8  CFDF FFE7          	movff	indf2,indf1
  1577  0077DC  2A0C               	incf	rcv_msg@i,f,c
  1578  0077DE                     l77:
  1579  0077DE  0EFF               	movlw	255
  1580  0077E0  6E05               	movwf	??_rcv_msg& (0+255),c
  1581  0077E2  0EFF               	movlw	255
  1582  0077E4  6E06               	movwf	(??_rcv_msg+1)& (0+255),c
  1583  0077E6  C001  FFD9         	movff	rcv_msg@data,fsr2l
  1584  0077EA  C002  FFDA         	movff	rcv_msg@data+1,fsr2h
  1585  0077EE  50DF               	movf	indf2,w,c
  1586  0077F0  6E07               	movwf	(??_rcv_msg+2)& (0+255),c
  1587  0077F2  6A08               	clrf	(??_rcv_msg+3)& (0+255),c
  1588  0077F4  5005               	movf	??_rcv_msg,w,c
  1589  0077F6  2607               	addwf	??_rcv_msg+2,f,c
  1590  0077F8  5006               	movf	??_rcv_msg+1,w,c
  1591  0077FA  2208               	addwfc	??_rcv_msg+3,f,c
  1592  0077FC  500C               	movf	rcv_msg@i,w,c
  1593  0077FE  6E09               	movwf	(??_rcv_msg+4)& (0+255),c
  1594  007800  6A0A               	clrf	(??_rcv_msg+5)& (0+255),c
  1595  007802  5007               	movf	??_rcv_msg+2,w,c
  1596  007804  5C09               	subwf	??_rcv_msg+4,w,c
  1597  007806  500A               	movf	??_rcv_msg+5,w,c
  1598  007808  0A80               	xorlw	128
  1599  00780A  6E0B               	movwf	(??_rcv_msg+6)& (0+255),c
  1600  00780C  5008               	movf	??_rcv_msg+3,w,c
  1601  00780E  0A80               	xorlw	128
  1602  007810  580B               	subwfb	(??_rcv_msg+6)& (0+255),w,c
  1603  007812  B0D8               	btfsc	status,0,c
  1604  007814  0012               	return	
  1605  007816  D7CB               	goto	l78
  1606  007818                     __end_of_rcv_msg:
  1607                           	opt stack 0
  1608                           tblptru	equ	0xFF8
  1609                           prodh	equ	0xFF4
  1610                           prodl	equ	0xFF3
  1611                           postinc0	equ	0xFEE
  1612                           wreg	equ	0xFE8
  1613                           indf1	equ	0xFE7
  1614                           plusw1	equ	0xFE3
  1615                           fsr1h	equ	0xFE2
  1616                           fsr1l	equ	0xFE1
  1617                           indf2	equ	0xFDF
  1618                           postinc2	equ	0xFDE
  1619                           postdec2	equ	0xFDD
  1620                           plusw2	equ	0xFDB
  1621                           fsr2h	equ	0xFDA
  1622                           fsr2l	equ	0xFD9
  1623                           status	equ	0xFD8
  1624                           
  1625 ;; *************** function _mk_msg *****************
  1626 ;; Defined at:
  1627 ;;		line 35 in file "comunicacao.c"
  1628 ;; Parameters:    Size  Location     Type
  1629 ;;  data            2    0[COMRAM] PTR struct .
  1630 ;;		 -> main@dados(69), 
  1631 ;;  count           1    2[COMRAM] unsigned char 
  1632 ;;  string          2    3[COMRAM] PTR unsigned char 
  1633 ;;		 -> main@msg(33), 
  1634 ;; Auto vars:     Size  Location     Type
  1635 ;;  i               1    5[COMRAM] unsigned char 
  1636 ;; Return value:  Size  Location     Type
  1637 ;;                  1    wreg      void 
  1638 ;; Registers used:
  1639 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1640 ;; Tracked objects:
  1641 ;;		On entry : 0/0
  1642 ;;		On exit  : 0/0
  1643 ;;		Unchanged: 0/0
  1644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1645 ;;      Params:         5       0       0       0       0       0       0       0       0
  1646 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1647 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1648 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1649 ;;Total ram usage:        6 bytes
  1650 ;; Hardware stack levels used:    1
  1651 ;; This function calls:
  1652 ;;		Nothing
  1653 ;; This function is called by:
  1654 ;;		_main
  1655 ;; This function uses a non-reentrant model
  1656 ;;
  1657                           
  1658                           	psect	text7
  1659  007648                     __ptext7:
  1660                           	opt stack 0
  1661  007648                     _mk_msg:
  1662                           	opt stack 30
  1663                           
  1664                           ;comunicacao.c: 37: data->count = count;
  1665                           
  1666                           ;incstack = 0
  1667  007648  C001  FFD9         	movff	mk_msg@data,fsr2l
  1668  00764C  C002  FFDA         	movff	mk_msg@data+1,fsr2h
  1669  007650  C003  FFDF         	movff	mk_msg@count,indf2
  1670                           
  1671                           ;comunicacao.c: 39: for (uint8_t i = 0; i < count; i++) {
  1672  007654  0E00               	movlw	0
  1673  007656  6E06               	movwf	mk_msg@i,c
  1674  007658  D017               	goto	l83
  1675  00765A                     
  1676                           ;comunicacao.c: 40: data->buff[i] = string[i];
  1677  00765A  5006               	movf	mk_msg@i,w,c
  1678  00765C  0D01               	mullw	1
  1679  00765E  50F3               	movf	prodl,w,c
  1680  007660  2404               	addwf	mk_msg@string,w,c
  1681  007662  6ED9               	movwf	fsr2l,c
  1682  007664  50F4               	movf	prodh,w,c
  1683  007666  2005               	addwfc	mk_msg@string+1,w,c
  1684  007668  6EDA               	movwf	fsr2h,c
  1685  00766A  5006               	movf	mk_msg@i,w,c
  1686  00766C  0D01               	mullw	1
  1687  00766E  0E01               	movlw	1
  1688  007670  26F3               	addwf	prodl,f,c
  1689  007672  0E00               	movlw	0
  1690  007674  22F4               	addwfc	prodh,f,c
  1691  007676  50F3               	movf	prodl,w,c
  1692  007678  2401               	addwf	mk_msg@data,w,c
  1693  00767A  6EE1               	movwf	fsr1l,c
  1694  00767C  50F4               	movf	prodh,w,c
  1695  00767E  2002               	addwfc	mk_msg@data+1,w,c
  1696  007680  6EE2               	movwf	fsr1h,c
  1697  007682  CFDF FFE7          	movff	indf2,indf1
  1698  007686  2A06               	incf	mk_msg@i,f,c
  1699  007688                     l83:
  1700  007688  5003               	movf	mk_msg@count,w,c
  1701  00768A  5C06               	subwf	mk_msg@i,w,c
  1702  00768C  B0D8               	btfsc	status,0,c
  1703  00768E  0012               	return	
  1704  007690  D7E4               	goto	l84
  1705  007692                     __end_of_mk_msg:
  1706                           	opt stack 0
  1707                           tblptru	equ	0xFF8
  1708                           prodh	equ	0xFF4
  1709                           prodl	equ	0xFF3
  1710                           postinc0	equ	0xFEE
  1711                           wreg	equ	0xFE8
  1712                           indf1	equ	0xFE7
  1713                           plusw1	equ	0xFE3
  1714                           fsr1h	equ	0xFE2
  1715                           fsr1l	equ	0xFE1
  1716                           indf2	equ	0xFDF
  1717                           postinc2	equ	0xFDE
  1718                           postdec2	equ	0xFDD
  1719                           plusw2	equ	0xFDB
  1720                           fsr2h	equ	0xFDA
  1721                           fsr2l	equ	0xFD9
  1722                           status	equ	0xFD8
  1723                           
  1724 ;; *************** function _lcd_write *****************
  1725 ;; Defined at:
  1726 ;;		line 51 in file "display.c"
  1727 ;; Parameters:    Size  Location     Type
  1728 ;;  lcd             2    0[COMRAM] PTR struct .
  1729 ;;		 -> main@lcd(33), 
  1730 ;;  row             1    2[COMRAM] unsigned char 
  1731 ;;  col             1    3[COMRAM] unsigned char 
  1732 ;;  string          2    4[COMRAM] PTR unsigned char 
  1733 ;;		 -> main@msg(33), 
  1734 ;; Auto vars:     Size  Location     Type
  1735 ;;		None
  1736 ;; Return value:  Size  Location     Type
  1737 ;;                  2    0[COMRAM] int 
  1738 ;; Registers used:
  1739 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1740 ;; Tracked objects:
  1741 ;;		On entry : 0/0
  1742 ;;		On exit  : 0/0
  1743 ;;		Unchanged: 0/0
  1744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1745 ;;      Params:         6       0       0       0       0       0       0       0       0
  1746 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1747 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1748 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1749 ;;Total ram usage:        6 bytes
  1750 ;; Hardware stack levels used:    1
  1751 ;; This function calls:
  1752 ;;		Nothing
  1753 ;; This function is called by:
  1754 ;;		_main
  1755 ;; This function uses a non-reentrant model
  1756 ;;
  1757                           
  1758                           	psect	text8
  1759  0078BC                     __ptext8:
  1760                           	opt stack 0
  1761  0078BC                     _lcd_write:
  1762                           	opt stack 30
  1763                           
  1764                           ;display.c: 53: if (row == 0 || row > 2 || col == 0 || col > 16) {
  1765                           
  1766                           ;incstack = 0
  1767  0078BC  5003               	movf	lcd_write@row,w,c
  1768  0078BE  B4D8               	btfsc	status,2,c
  1769  0078C0  0012               	return	
  1770  0078C2  0E03               	movlw	3
  1771  0078C4  6003               	cpfslt	lcd_write@row,c
  1772  0078C6  0012               	return	
  1773  0078C8  5004               	movf	lcd_write@col,w,c
  1774  0078CA  B4D8               	btfsc	status,2,c
  1775  0078CC  0012               	return	
  1776  0078CE  0E10               	movlw	16
  1777  0078D0  6404               	cpfsgt	lcd_write@col,c
  1778  0078D2  D001               	goto	l219
  1779  0078D4  0012               	return	
  1780  0078D6                     l219:
  1781                           
  1782                           ;display.c: 55: }
  1783                           ;display.c: 57: row--;
  1784  0078D6  0603               	decf	lcd_write@row,f,c
  1785                           
  1786                           ;display.c: 58: col--;
  1787  0078D8  0604               	decf	lcd_write@col,f,c
  1788                           
  1789                           ;display.c: 60: if (row == 0) {
  1790  0078DA  5003               	movf	lcd_write@row,w,c
  1791  0078DC  B4D8               	btfsc	status,2,c
  1792  0078DE  D016               	goto	l224
  1793  0078E0  D039               	goto	l229
  1794  0078E2                     
  1795                           ;display.c: 62: lcd->Memory[0][col++] = *string;
  1796  0078E2  C005  FFD9         	movff	lcd_write@string,fsr2l
  1797  0078E6  C006  FFDA         	movff	lcd_write@string+1,fsr2h
  1798  0078EA  5004               	movf	lcd_write@col,w,c
  1799  0078EC  0D01               	mullw	1
  1800  0078EE  0E01               	movlw	1
  1801  0078F0  26F3               	addwf	prodl,f,c
  1802  0078F2  0E00               	movlw	0
  1803  0078F4  22F4               	addwfc	prodh,f,c
  1804  0078F6  50F3               	movf	prodl,w,c
  1805  0078F8  2401               	addwf	lcd_write@lcd,w,c
  1806  0078FA  6EE1               	movwf	fsr1l,c
  1807  0078FC  50F4               	movf	prodh,w,c
  1808  0078FE  2002               	addwfc	lcd_write@lcd+1,w,c
  1809  007900  6EE2               	movwf	fsr1h,c
  1810  007902  CFDF FFE7          	movff	indf2,indf1
  1811  007906  2A04               	incf	lcd_write@col,f,c
  1812                           
  1813                           ;display.c: 63: string++;
  1814  007908  4A05               	infsnz	lcd_write@string,f,c
  1815  00790A  2A06               	incf	lcd_write@string+1,f,c
  1816  00790C                     l224:
  1817  00790C  C005  FFD9         	movff	lcd_write@string,fsr2l
  1818  007910  C006  FFDA         	movff	lcd_write@string+1,fsr2h
  1819  007914  50DF               	movf	indf2,w,c
  1820  007916  B4D8               	btfsc	status,2,c
  1821  007918  D003               	goto	u1090
  1822  00791A  0E0F               	movlw	15
  1823  00791C  6404               	cpfsgt	lcd_write@col,c
  1824  00791E  D7E1               	goto	l225
  1825  007920                     u1090:
  1826                           
  1827                           ;display.c: 64: }
  1828                           ;display.c: 65: col = 0;
  1829  007920  0E00               	movlw	0
  1830  007922  6E04               	movwf	lcd_write@col,c
  1831                           
  1832                           ;display.c: 66: row = 1;
  1833  007924  0E01               	movlw	1
  1834  007926  6E03               	movwf	lcd_write@row,c
  1835                           
  1836                           ;display.c: 67: }
  1837                           ;display.c: 70: while (*string && col <= 0x0F) {
  1838  007928  D015               	goto	l229
  1839  00792A                     
  1840                           ;display.c: 71: lcd->Memory[1][col++] = *string;
  1841  00792A  C005  FFD9         	movff	lcd_write@string,fsr2l
  1842  00792E  C006  FFDA         	movff	lcd_write@string+1,fsr2h
  1843  007932  5004               	movf	lcd_write@col,w,c
  1844  007934  0D01               	mullw	1
  1845  007936  0E11               	movlw	17
  1846  007938  26F3               	addwf	prodl,f,c
  1847  00793A  0E00               	movlw	0
  1848  00793C  22F4               	addwfc	prodh,f,c
  1849  00793E  50F3               	movf	prodl,w,c
  1850  007940  2401               	addwf	lcd_write@lcd,w,c
  1851  007942  6EE1               	movwf	fsr1l,c
  1852  007944  50F4               	movf	prodh,w,c
  1853  007946  2002               	addwfc	lcd_write@lcd+1,w,c
  1854  007948  6EE2               	movwf	fsr1h,c
  1855  00794A  CFDF FFE7          	movff	indf2,indf1
  1856  00794E  2A04               	incf	lcd_write@col,f,c
  1857                           
  1858                           ;display.c: 72: string++;
  1859  007950  4A05               	infsnz	lcd_write@string,f,c
  1860  007952  2A06               	incf	lcd_write@string+1,f,c
  1861  007954                     l229:
  1862  007954  C005  FFD9         	movff	lcd_write@string,fsr2l
  1863  007958  C006  FFDA         	movff	lcd_write@string+1,fsr2h
  1864  00795C  50DF               	movf	indf2,w,c
  1865  00795E  B4D8               	btfsc	status,2,c
  1866  007960  D003               	goto	u1110
  1867  007962  0E0F               	movlw	15
  1868  007964  6404               	cpfsgt	lcd_write@col,c
  1869  007966  D7E1               	goto	l230
  1870  007968                     u1110:
  1871                           
  1872                           ;display.c: 73: }
  1873                           ;display.c: 75: lcd->NeedsRedraw = 1;
  1874  007968  C001  FFD9         	movff	lcd_write@lcd,fsr2l
  1875  00796C  C002  FFDA         	movff	lcd_write@lcd+1,fsr2h
  1876  007970  0E01               	movlw	1
  1877  007972  6EDF               	movwf	indf2,c
  1878  007974  0012               	return	
  1879  007976                     __end_of_lcd_write:
  1880                           	opt stack 0
  1881                           tblptru	equ	0xFF8
  1882                           prodh	equ	0xFF4
  1883                           prodl	equ	0xFF3
  1884                           postinc0	equ	0xFEE
  1885                           wreg	equ	0xFE8
  1886                           indf1	equ	0xFE7
  1887                           plusw1	equ	0xFE3
  1888                           fsr1h	equ	0xFE2
  1889                           fsr1l	equ	0xFE1
  1890                           indf2	equ	0xFDF
  1891                           postinc2	equ	0xFDE
  1892                           postdec2	equ	0xFDD
  1893                           plusw2	equ	0xFDB
  1894                           fsr2h	equ	0xFDA
  1895                           fsr2l	equ	0xFD9
  1896                           status	equ	0xFD8
  1897                           
  1898 ;; *************** function _lcd_runtime *****************
  1899 ;; Defined at:
  1900 ;;		line 80 in file "display.c"
  1901 ;; Parameters:    Size  Location     Type
  1902 ;;  lcd             2    6[COMRAM] PTR struct .
  1903 ;;		 -> main@lcd(33), 
  1904 ;; Auto vars:     Size  Location     Type
  1905 ;;  i               2   12[COMRAM] int 
  1906 ;;  i               2   10[COMRAM] int 
  1907 ;; Return value:  Size  Location     Type
  1908 ;;                  1    wreg      void 
  1909 ;; Registers used:
  1910 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1911 ;; Tracked objects:
  1912 ;;		On entry : 0/0
  1913 ;;		On exit  : 0/0
  1914 ;;		Unchanged: 0/0
  1915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1916 ;;      Params:         2       0       0       0       0       0       0       0       0
  1917 ;;      Locals:         4       0       0       0       0       0       0       0       0
  1918 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1919 ;;      Totals:         8       0       0       0       0       0       0       0       0
  1920 ;;Total ram usage:        8 bytes
  1921 ;; Hardware stack levels used:    1
  1922 ;; Hardware stack levels required when called:    2
  1923 ;; This function calls:
  1924 ;;		_BusyXLCD
  1925 ;;		_SetDDRamAddr
  1926 ;;		_WriteDataXLCD
  1927 ;; This function is called by:
  1928 ;;		_main
  1929 ;; This function uses a non-reentrant model
  1930 ;;
  1931                           
  1932                           	psect	text9
  1933  007976                     __ptext9:
  1934                           	opt stack 0
  1935  007976                     _lcd_runtime:
  1936                           	opt stack 28
  1937                           
  1938                           ;display.c: 81: while (BusyXLCD());
  1939                           
  1940                           ;incstack = 0
  1941  007976  EC8A  F03A         	call	_BusyXLCD	;wreg free
  1942  00797A  0900               	iorlw	0
  1943  00797C  A4D8               	btfss	status,2,c
  1944  00797E  D7FB               	goto	_lcd_runtime
  1945                           
  1946                           ;display.c: 83: if (lcd->NeedsRedraw == 1) {
  1947  007980  C007  FFD9         	movff	lcd_runtime@lcd,fsr2l
  1948  007984  C008  FFDA         	movff	lcd_runtime@lcd+1,fsr2h
  1949  007988  04DE               	decf	postinc2,w,c
  1950  00798A  A4D8               	btfss	status,2,c
  1951  00798C  0012               	return	
  1952                           
  1953                           ;display.c: 84: SetDDRamAddr(0x00);
  1954  00798E  0E00               	movlw	0
  1955  007990  EC49  F03B         	call	_SetDDRamAddr
  1956                           
  1957                           ;display.c: 85: for (int i = 0; i < 16; i++) {
  1958  007994  0E00               	movlw	0
  1959  007996  6E0C               	movwf	lcd_runtime@i+1,c
  1960  007998  0E00               	movlw	0
  1961  00799A  6E0B               	movwf	lcd_runtime@i,c
  1962  00799C  BE0C               	btfsc	lcd_runtime@i+1,7,c
  1963  00799E  D006               	goto	l240
  1964  0079A0  500C               	movf	lcd_runtime@i+1,w,c
  1965  0079A2  E122               	bnz	l2067
  1966  0079A4  0E10               	movlw	16
  1967  0079A6  5C0B               	subwf	lcd_runtime@i,w,c
  1968  0079A8  B0D8               	btfsc	status,0,c
  1969  0079AA  D01E               	goto	u1300
  1970  0079AC                     l240:
  1971                           
  1972                           ;display.c: 86: while (BusyXLCD());
  1973  0079AC  EC8A  F03A         	call	_BusyXLCD	;wreg free
  1974  0079B0  0900               	iorlw	0
  1975  0079B2  A4D8               	btfss	status,2,c
  1976  0079B4  D7FB               	goto	l240
  1977                           
  1978                           ;display.c: 87: WriteDataXLCD((char) lcd->Memory[0][i]);
  1979  0079B6  0E01               	movlw	1
  1980  0079B8  240B               	addwf	lcd_runtime@i,w,c
  1981  0079BA  6E09               	movwf	??_lcd_runtime& (0+255),c
  1982  0079BC  0E00               	movlw	0
  1983  0079BE  200C               	addwfc	lcd_runtime@i+1,w,c
  1984  0079C0  6E0A               	movwf	(??_lcd_runtime+1)& (0+255),c
  1985  0079C2  5009               	movf	??_lcd_runtime,w,c
  1986  0079C4  2407               	addwf	lcd_runtime@lcd,w,c
  1987  0079C6  6ED9               	movwf	fsr2l,c
  1988  0079C8  500A               	movf	??_lcd_runtime+1,w,c
  1989  0079CA  2008               	addwfc	lcd_runtime@lcd+1,w,c
  1990  0079CC  6EDA               	movwf	fsr2h,c
  1991  0079CE  50DF               	movf	indf2,w,c
  1992  0079D0  ECE4  F03A         	call	_WriteDataXLCD
  1993  0079D4  4A0B               	infsnz	lcd_runtime@i,f,c
  1994  0079D6  2A0C               	incf	lcd_runtime@i+1,f,c
  1995  0079D8  BE0C               	btfsc	lcd_runtime@i+1,7,c
  1996  0079DA  D7E8               	goto	l240
  1997  0079DC  500C               	movf	lcd_runtime@i+1,w,c
  1998  0079DE  E104               	bnz	l2067
  1999  0079E0  0E10               	movlw	16
  2000  0079E2  5C0B               	subwf	lcd_runtime@i,w,c
  2001  0079E4  A0D8               	btfss	status,0,c
  2002  0079E6  D7E2               	goto	l240
  2003  0079E8                     u1300:
  2004  0079E8                     l2067:
  2005                           
  2006                           ;display.c: 88: }
  2007                           ;display.c: 89: SetDDRamAddr(0x40);
  2008  0079E8  0E40               	movlw	64
  2009  0079EA  EC49  F03B         	call	_SetDDRamAddr
  2010                           
  2011                           ;display.c: 90: for (int i = 0; i < 16; i++) {
  2012  0079EE  0E00               	movlw	0
  2013  0079F0  6E0E               	movwf	lcd_runtime@i_457+1,c
  2014  0079F2  0E00               	movlw	0
  2015  0079F4  6E0D               	movwf	lcd_runtime@i_457,c
  2016  0079F6  BE0E               	btfsc	lcd_runtime@i_457+1,7,c
  2017  0079F8  D006               	goto	l245
  2018  0079FA  500E               	movf	lcd_runtime@i_457+1,w,c
  2019  0079FC  E122               	bnz	l2083
  2020  0079FE  0E10               	movlw	16
  2021  007A00  5C0D               	subwf	lcd_runtime@i_457,w,c
  2022  007A02  B0D8               	btfsc	status,0,c
  2023  007A04  D01E               	goto	u1330
  2024  007A06                     l245:
  2025                           
  2026                           ;display.c: 91: while (BusyXLCD());
  2027  007A06  EC8A  F03A         	call	_BusyXLCD	;wreg free
  2028  007A0A  0900               	iorlw	0
  2029  007A0C  A4D8               	btfss	status,2,c
  2030  007A0E  D7FB               	goto	l245
  2031                           
  2032                           ;display.c: 92: WriteDataXLCD((char) lcd->Memory[1][i]);
  2033  007A10  0E11               	movlw	17
  2034  007A12  240D               	addwf	lcd_runtime@i_457,w,c
  2035  007A14  6E09               	movwf	??_lcd_runtime& (0+255),c
  2036  007A16  0E00               	movlw	0
  2037  007A18  200E               	addwfc	lcd_runtime@i_457+1,w,c
  2038  007A1A  6E0A               	movwf	(??_lcd_runtime+1)& (0+255),c
  2039  007A1C  5009               	movf	??_lcd_runtime,w,c
  2040  007A1E  2407               	addwf	lcd_runtime@lcd,w,c
  2041  007A20  6ED9               	movwf	fsr2l,c
  2042  007A22  500A               	movf	??_lcd_runtime+1,w,c
  2043  007A24  2008               	addwfc	lcd_runtime@lcd+1,w,c
  2044  007A26  6EDA               	movwf	fsr2h,c
  2045  007A28  50DF               	movf	indf2,w,c
  2046  007A2A  ECE4  F03A         	call	_WriteDataXLCD
  2047  007A2E  4A0D               	infsnz	lcd_runtime@i_457,f,c
  2048  007A30  2A0E               	incf	lcd_runtime@i_457+1,f,c
  2049  007A32  BE0E               	btfsc	lcd_runtime@i_457+1,7,c
  2050  007A34  D7E8               	goto	l245
  2051  007A36  500E               	movf	lcd_runtime@i_457+1,w,c
  2052  007A38  E104               	bnz	l2083
  2053  007A3A  0E10               	movlw	16
  2054  007A3C  5C0D               	subwf	lcd_runtime@i_457,w,c
  2055  007A3E  A0D8               	btfss	status,0,c
  2056  007A40  D7E2               	goto	l245
  2057  007A42                     u1330:
  2058  007A42                     l2083:
  2059                           
  2060                           ;display.c: 93: }
  2061                           ;display.c: 95: lcd->NeedsRedraw = 0;
  2062  007A42  C007  FFD9         	movff	lcd_runtime@lcd,fsr2l
  2063  007A46  C008  FFDA         	movff	lcd_runtime@lcd+1,fsr2h
  2064  007A4A  0E00               	movlw	0
  2065  007A4C  6EDF               	movwf	indf2,c
  2066  007A4E  0012               	return	
  2067  007A50                     __end_of_lcd_runtime:
  2068                           	opt stack 0
  2069                           tblptru	equ	0xFF8
  2070                           prodh	equ	0xFF4
  2071                           prodl	equ	0xFF3
  2072                           postinc0	equ	0xFEE
  2073                           wreg	equ	0xFE8
  2074                           indf1	equ	0xFE7
  2075                           plusw1	equ	0xFE3
  2076                           fsr1h	equ	0xFE2
  2077                           fsr1l	equ	0xFE1
  2078                           indf2	equ	0xFDF
  2079                           postinc2	equ	0xFDE
  2080                           postdec2	equ	0xFDD
  2081                           plusw2	equ	0xFDB
  2082                           fsr2h	equ	0xFDA
  2083                           fsr2l	equ	0xFD9
  2084                           status	equ	0xFD8
  2085                           
  2086 ;; *************** function _WriteDataXLCD *****************
  2087 ;; Defined at:
  2088 ;;		line 16 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\pic18\plib\XLCD\writdata.c"
  2089 ;; Parameters:    Size  Location     Type
  2090 ;;  data            1    wreg     unsigned char 
  2091 ;; Auto vars:     Size  Location     Type
  2092 ;;  data            1    2[COMRAM] unsigned char 
  2093 ;; Return value:  Size  Location     Type
  2094 ;;                  1    wreg      void 
  2095 ;; Registers used:
  2096 ;;		wreg, status,2, status,0, cstack
  2097 ;; Tracked objects:
  2098 ;;		On entry : 0/0
  2099 ;;		On exit  : 0/0
  2100 ;;		Unchanged: 0/0
  2101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2102 ;;      Params:         0       0       0       0       0       0       0       0       0
  2103 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2104 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2105 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2106 ;;Total ram usage:        1 bytes
  2107 ;; Hardware stack levels used:    1
  2108 ;; Hardware stack levels required when called:    1
  2109 ;; This function calls:
  2110 ;;		_DelayFor18TCY
  2111 ;; This function is called by:
  2112 ;;		_lcd_runtime
  2113 ;; This function uses a non-reentrant model
  2114 ;;
  2115                           
  2116                           	psect	text10
  2117  0075C8                     __ptext10:
  2118                           	opt stack 0
  2119  0075C8                     _WriteDataXLCD:
  2120                           	opt stack 28
  2121                           
  2122                           ;incstack = 0
  2123                           ;WriteDataXLCD@data stored from wreg
  2124  0075C8  6E03               	movwf	WriteDataXLCD@data,c
  2125  0075CA  0EF0               	movlw	240
  2126  0075CC  1693               	andwf	3987,f,c	;volatile
  2127  0075CE  0EF0               	movlw	240
  2128  0075D0  1681               	andwf	3969,f,c	;volatile
  2129  0075D2  3803               	swapf	WriteDataXLCD@data,w,c
  2130  0075D4  0B0F               	andlw	15
  2131  0075D6  0B0F               	andlw	15
  2132  0075D8  1281               	iorwf	3969,f,c	;volatile
  2133  0075DA  8A8A               	bsf	3978,5,c	;volatile
  2134  0075DC  9C8A               	bcf	3978,6,c	;volatile
  2135  0075DE  EC4A  F03A         	call	_DelayFor18TCY	;wreg free
  2136  0075E2  888A               	bsf	3978,4,c	;volatile
  2137  0075E4  EC4A  F03A         	call	_DelayFor18TCY	;wreg free
  2138  0075E8  988A               	bcf	3978,4,c	;volatile
  2139  0075EA  0EF0               	movlw	240
  2140  0075EC  1681               	andwf	3969,f,c	;volatile
  2141  0075EE  5003               	movf	WriteDataXLCD@data,w,c
  2142  0075F0  0B0F               	andlw	15
  2143  0075F2  1281               	iorwf	3969,f,c	;volatile
  2144  0075F4  EC4A  F03A         	call	_DelayFor18TCY	;wreg free
  2145  0075F8  888A               	bsf	3978,4,c	;volatile
  2146  0075FA  EC4A  F03A         	call	_DelayFor18TCY	;wreg free
  2147  0075FE  988A               	bcf	3978,4,c	;volatile
  2148  007600  0E0F               	movlw	15
  2149  007602  1293               	iorwf	3987,f,c	;volatile
  2150  007604  0012               	return	
  2151  007606                     __end_of_WriteDataXLCD:
  2152                           	opt stack 0
  2153                           tblptru	equ	0xFF8
  2154                           prodh	equ	0xFF4
  2155                           prodl	equ	0xFF3
  2156                           postinc0	equ	0xFEE
  2157                           wreg	equ	0xFE8
  2158                           indf1	equ	0xFE7
  2159                           plusw1	equ	0xFE3
  2160                           fsr1h	equ	0xFE2
  2161                           fsr1l	equ	0xFE1
  2162                           indf2	equ	0xFDF
  2163                           postinc2	equ	0xFDE
  2164                           postdec2	equ	0xFDD
  2165                           plusw2	equ	0xFDB
  2166                           fsr2h	equ	0xFDA
  2167                           fsr2l	equ	0xFD9
  2168                           status	equ	0xFD8
  2169                           
  2170 ;; *************** function _lcd_init *****************
  2171 ;; Defined at:
  2172 ;;		line 16 in file "display.c"
  2173 ;; Parameters:    Size  Location     Type
  2174 ;;  lcd             2    7[COMRAM] PTR struct .
  2175 ;;		 -> main@lcd(33), 
  2176 ;; Auto vars:     Size  Location     Type
  2177 ;;		None
  2178 ;; Return value:  Size  Location     Type
  2179 ;;                  1    wreg      void 
  2180 ;; Registers used:
  2181 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2182 ;; Tracked objects:
  2183 ;;		On entry : 0/0
  2184 ;;		On exit  : 0/0
  2185 ;;		Unchanged: 0/0
  2186 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2187 ;;      Params:         2       0       0       0       0       0       0       0       0
  2188 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2189 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2190 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2191 ;;Total ram usage:        2 bytes
  2192 ;; Hardware stack levels used:    1
  2193 ;; Hardware stack levels required when called:    3
  2194 ;; This function calls:
  2195 ;;		_BusyXLCD
  2196 ;;		_OpenXLCD
  2197 ;;		_WriteCmdXLCD
  2198 ;;		_lcd_clean
  2199 ;;		_lcd_mem_clean
  2200 ;; This function is called by:
  2201 ;;		_main
  2202 ;; This function uses a non-reentrant model
  2203 ;;
  2204                           
  2205                           	psect	text11
  2206  007606                     __ptext11:
  2207                           	opt stack 0
  2208  007606                     _lcd_init:
  2209                           	opt stack 27
  2210                           
  2211                           ;display.c: 17: OpenXLCD(0b00101100 & 0b00111000);
  2212                           
  2213                           ;incstack = 0
  2214  007606  0E28               	movlw	40
  2215  007608  EC0C  F03C         	call	_OpenXLCD
  2216  00760C  EC8A  F03A         	call	_BusyXLCD	;wreg free
  2217  007610  0900               	iorlw	0
  2218  007612  A4D8               	btfss	status,2,c
  2219  007614  D7FB               	goto	l194
  2220                           
  2221                           ;display.c: 19: WriteCmdXLCD(0x06);
  2222  007616  0E06               	movlw	6
  2223  007618  ECC5  F03A         	call	_WriteCmdXLCD
  2224  00761C  EC8A  F03A         	call	_BusyXLCD	;wreg free
  2225  007620  0900               	iorlw	0
  2226  007622  A4D8               	btfss	status,2,c
  2227  007624  D7FB               	goto	l197
  2228                           
  2229                           ;display.c: 21: WriteCmdXLCD(0x0C);
  2230  007626  0E0C               	movlw	12
  2231  007628  ECC5  F03A         	call	_WriteCmdXLCD
  2232  00762C  EC8A  F03A         	call	_BusyXLCD	;wreg free
  2233  007630  0900               	iorlw	0
  2234  007632  A4D8               	btfss	status,2,c
  2235  007634  D7FB               	goto	l200
  2236                           
  2237                           ;display.c: 24: lcd_mem_clean(lcd);
  2238  007636  C008  F001         	movff	lcd_init@lcd,lcd_mem_clean@lcd
  2239  00763A  C009  F002         	movff	lcd_init@lcd+1,lcd_mem_clean@lcd+1
  2240  00763E  EC72  F03B         	call	_lcd_mem_clean	;wreg free
  2241                           
  2242                           ;display.c: 25: lcd_clean();
  2243  007642  EC3B  F03A         	call	_lcd_clean	;wreg free
  2244  007646  0012               	return		;funcret
  2245  007648                     __end_of_lcd_init:
  2246                           	opt stack 0
  2247                           tblptru	equ	0xFF8
  2248                           prodh	equ	0xFF4
  2249                           prodl	equ	0xFF3
  2250                           postinc0	equ	0xFEE
  2251                           wreg	equ	0xFE8
  2252                           indf1	equ	0xFE7
  2253                           plusw1	equ	0xFE3
  2254                           fsr1h	equ	0xFE2
  2255                           fsr1l	equ	0xFE1
  2256                           indf2	equ	0xFDF
  2257                           postinc2	equ	0xFDE
  2258                           postdec2	equ	0xFDD
  2259                           plusw2	equ	0xFDB
  2260                           fsr2h	equ	0xFDA
  2261                           fsr2l	equ	0xFD9
  2262                           status	equ	0xFD8
  2263                           
  2264 ;; *************** function _lcd_mem_clean *****************
  2265 ;; Defined at:
  2266 ;;		line 37 in file "display.c"
  2267 ;; Parameters:    Size  Location     Type
  2268 ;;  lcd             2    0[COMRAM] PTR struct .
  2269 ;;		 -> main@lcd(33), 
  2270 ;; Auto vars:     Size  Location     Type
  2271 ;;  i               1    2[COMRAM] unsigned char 
  2272 ;; Return value:  Size  Location     Type
  2273 ;;                  1    wreg      void 
  2274 ;; Registers used:
  2275 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2276 ;; Tracked objects:
  2277 ;;		On entry : 0/0
  2278 ;;		On exit  : 0/0
  2279 ;;		Unchanged: 0/0
  2280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2281 ;;      Params:         2       0       0       0       0       0       0       0       0
  2282 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2283 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2284 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2285 ;;Total ram usage:        3 bytes
  2286 ;; Hardware stack levels used:    1
  2287 ;; This function calls:
  2288 ;;		Nothing
  2289 ;; This function is called by:
  2290 ;;		_lcd_init
  2291 ;;		_lcd_clean_all
  2292 ;; This function uses a non-reentrant model
  2293 ;;
  2294                           
  2295                           	psect	text12
  2296  0076E4                     __ptext12:
  2297                           	opt stack 0
  2298  0076E4                     _lcd_mem_clean:
  2299                           	opt stack 29
  2300                           
  2301                           ;display.c: 38: for (uint8_t i = 0; i < 16; i++) {
  2302                           
  2303                           ;incstack = 0
  2304  0076E4  0E00               	movlw	0
  2305  0076E6  6E03               	movwf	lcd_mem_clean@i,c
  2306  0076E8                     l1779:
  2307  0076E8  0E0F               	movlw	15
  2308  0076EA  6403               	cpfsgt	lcd_mem_clean@i,c
  2309  0076EC  D001               	goto	l211
  2310  0076EE  D01E               	goto	u880
  2311  0076F0                     l211:
  2312                           
  2313                           ;display.c: 39: lcd->Memory[0][i] = 0x20;
  2314  0076F0  5003               	movf	lcd_mem_clean@i,w,c
  2315  0076F2  0D01               	mullw	1
  2316  0076F4  0E01               	movlw	1
  2317  0076F6  26F3               	addwf	prodl,f,c
  2318  0076F8  0E00               	movlw	0
  2319  0076FA  22F4               	addwfc	prodh,f,c
  2320  0076FC  50F3               	movf	prodl,w,c
  2321  0076FE  2401               	addwf	lcd_mem_clean@lcd,w,c
  2322  007700  6ED9               	movwf	fsr2l,c
  2323  007702  50F4               	movf	prodh,w,c
  2324  007704  2002               	addwfc	lcd_mem_clean@lcd+1,w,c
  2325  007706  6EDA               	movwf	fsr2h,c
  2326  007708  0E20               	movlw	32
  2327  00770A  6EDF               	movwf	indf2,c
  2328                           
  2329                           ;display.c: 40: lcd->Memory[1][i] = 0x20;
  2330  00770C  5003               	movf	lcd_mem_clean@i,w,c
  2331  00770E  0D01               	mullw	1
  2332  007710  0E11               	movlw	17
  2333  007712  26F3               	addwf	prodl,f,c
  2334  007714  0E00               	movlw	0
  2335  007716  22F4               	addwfc	prodh,f,c
  2336  007718  50F3               	movf	prodl,w,c
  2337  00771A  2401               	addwf	lcd_mem_clean@lcd,w,c
  2338  00771C  6ED9               	movwf	fsr2l,c
  2339  00771E  50F4               	movf	prodh,w,c
  2340  007720  2002               	addwfc	lcd_mem_clean@lcd+1,w,c
  2341  007722  6EDA               	movwf	fsr2h,c
  2342  007724  0E20               	movlw	32
  2343  007726  6EDF               	movwf	indf2,c
  2344  007728  2A03               	incf	lcd_mem_clean@i,f,c
  2345  00772A  D7DE               	goto	l1779
  2346  00772C                     u880:
  2347                           
  2348                           ;display.c: 41: }
  2349                           ;display.c: 42: lcd->NeedsRedraw = 1;
  2350  00772C  C001  FFD9         	movff	lcd_mem_clean@lcd,fsr2l
  2351  007730  C002  FFDA         	movff	lcd_mem_clean@lcd+1,fsr2h
  2352  007734  0E01               	movlw	1
  2353  007736  6EDF               	movwf	indf2,c
  2354  007738  0012               	return		;funcret
  2355  00773A                     __end_of_lcd_mem_clean:
  2356                           	opt stack 0
  2357                           tblptru	equ	0xFF8
  2358                           prodh	equ	0xFF4
  2359                           prodl	equ	0xFF3
  2360                           postinc0	equ	0xFEE
  2361                           wreg	equ	0xFE8
  2362                           indf1	equ	0xFE7
  2363                           plusw1	equ	0xFE3
  2364                           fsr1h	equ	0xFE2
  2365                           fsr1l	equ	0xFE1
  2366                           indf2	equ	0xFDF
  2367                           postinc2	equ	0xFDE
  2368                           postdec2	equ	0xFDD
  2369                           plusw2	equ	0xFDB
  2370                           fsr2h	equ	0xFDA
  2371                           fsr2l	equ	0xFD9
  2372                           status	equ	0xFD8
  2373                           
  2374 ;; *************** function _lcd_clean *****************
  2375 ;; Defined at:
  2376 ;;		line 29 in file "display.c"
  2377 ;; Parameters:    Size  Location     Type
  2378 ;;		None
  2379 ;; Auto vars:     Size  Location     Type
  2380 ;;		None
  2381 ;; Return value:  Size  Location     Type
  2382 ;;                  1    wreg      void 
  2383 ;; Registers used:
  2384 ;;		wreg, status,2, status,0, cstack
  2385 ;; Tracked objects:
  2386 ;;		On entry : 0/0
  2387 ;;		On exit  : 0/0
  2388 ;;		Unchanged: 0/0
  2389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2390 ;;      Params:         0       0       0       0       0       0       0       0       0
  2391 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2392 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2393 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2394 ;;Total ram usage:        0 bytes
  2395 ;; Hardware stack levels used:    1
  2396 ;; Hardware stack levels required when called:    2
  2397 ;; This function calls:
  2398 ;;		_BusyXLCD
  2399 ;;		_WriteCmdXLCD
  2400 ;;		_delay_ms
  2401 ;; This function is called by:
  2402 ;;		_lcd_init
  2403 ;;		_lcd_clean_all
  2404 ;; This function uses a non-reentrant model
  2405 ;;
  2406                           
  2407                           	psect	text13
  2408  007476                     __ptext13:
  2409                           	opt stack 0
  2410  007476                     _lcd_clean:
  2411                           	opt stack 27
  2412                           
  2413                           ;display.c: 30: while (BusyXLCD());
  2414                           
  2415                           ;incstack = 0
  2416  007476  EC8A  F03A         	call	_BusyXLCD	;wreg free
  2417  00747A  0900               	iorlw	0
  2418  00747C  A4D8               	btfss	status,2,c
  2419  00747E  D7FB               	goto	_lcd_clean
  2420                           
  2421                           ;display.c: 31: WriteCmdXLCD(0x01);
  2422  007480  0E01               	movlw	1
  2423  007482  ECC5  F03A         	call	_WriteCmdXLCD
  2424                           
  2425                           ;display.c: 33: delay_ms(80);
  2426  007486  0E00               	movlw	0
  2427  007488  6E02               	movwf	delay_ms@milis+1,c
  2428  00748A  0E50               	movlw	80
  2429  00748C  6E01               	movwf	delay_ms@milis,c
  2430  00748E  EC5A  F03A         	call	_delay_ms	;wreg free
  2431  007492  0012               	return		;funcret
  2432  007494                     __end_of_lcd_clean:
  2433                           	opt stack 0
  2434                           tblptru	equ	0xFF8
  2435                           prodh	equ	0xFF4
  2436                           prodl	equ	0xFF3
  2437                           postinc0	equ	0xFEE
  2438                           wreg	equ	0xFE8
  2439                           indf1	equ	0xFE7
  2440                           plusw1	equ	0xFE3
  2441                           fsr1h	equ	0xFE2
  2442                           fsr1l	equ	0xFE1
  2443                           indf2	equ	0xFDF
  2444                           postinc2	equ	0xFDE
  2445                           postdec2	equ	0xFDD
  2446                           plusw2	equ	0xFDB
  2447                           fsr2h	equ	0xFDA
  2448                           fsr2l	equ	0xFD9
  2449                           status	equ	0xFD8
  2450                           
  2451 ;; *************** function _OpenXLCD *****************
  2452 ;; Defined at:
  2453 ;;		line 19 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\pic18\plib\XLCD\openxlcd.c"
  2454 ;; Parameters:    Size  Location     Type
  2455 ;;  lcdtype         1    wreg     unsigned char 
  2456 ;; Auto vars:     Size  Location     Type
  2457 ;;  lcdtype         1    6[COMRAM] unsigned char 
  2458 ;; Return value:  Size  Location     Type
  2459 ;;                  1    wreg      void 
  2460 ;; Registers used:
  2461 ;;		wreg, status,2, status,0, cstack
  2462 ;; Tracked objects:
  2463 ;;		On entry : 0/0
  2464 ;;		On exit  : 0/0
  2465 ;;		Unchanged: 0/0
  2466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2467 ;;      Params:         0       0       0       0       0       0       0       0       0
  2468 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2469 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2470 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2471 ;;Total ram usage:        1 bytes
  2472 ;; Hardware stack levels used:    1
  2473 ;; Hardware stack levels required when called:    2
  2474 ;; This function calls:
  2475 ;;		_BusyXLCD
  2476 ;;		_Delay10KTCYx
  2477 ;;		_DelayPORXLCD
  2478 ;;		_SetDDRamAddr
  2479 ;;		_WriteCmdXLCD
  2480 ;; This function is called by:
  2481 ;;		_lcd_init
  2482 ;; This function uses a non-reentrant model
  2483 ;;
  2484                           
  2485                           	psect	text14
  2486  007818                     __ptext14:
  2487                           	opt stack 0
  2488  007818                     _OpenXLCD:
  2489                           	opt stack 27
  2490                           
  2491                           ;incstack = 0
  2492                           ;OpenXLCD@lcdtype stored from wreg
  2493  007818  6E07               	movwf	OpenXLCD@lcdtype,c
  2494  00781A  0EF0               	movlw	240
  2495  00781C  1681               	andwf	3969,f,c	;volatile
  2496  00781E  0EF0               	movlw	240
  2497  007820  1693               	andwf	3987,f,c	;volatile
  2498  007822  9C93               	bcf	3987,6,c	;volatile
  2499  007824  9A93               	bcf	3987,5,c	;volatile
  2500  007826  9893               	bcf	3987,4,c	;volatile
  2501  007828  9C8A               	bcf	3978,6,c	;volatile
  2502  00782A  9A8A               	bcf	3978,5,c	;volatile
  2503  00782C  988A               	bcf	3978,4,c	;volatile
  2504  00782E  EC0F  F03A         	call	_DelayPORXLCD	;wreg free
  2505  007832  0E30               	movlw	48
  2506  007834  ECC5  F03A         	call	_WriteCmdXLCD
  2507  007838  0E05               	movlw	5
  2508  00783A  EC25  F03A         	call	_Delay10KTCYx
  2509  00783E  0E30               	movlw	48
  2510  007840  ECC5  F03A         	call	_WriteCmdXLCD
  2511  007844  0E01               	movlw	1
  2512  007846  EC25  F03A         	call	_Delay10KTCYx
  2513  00784A  0E32               	movlw	50
  2514  00784C  ECC5  F03A         	call	_WriteCmdXLCD
  2515  007850  EC8A  F03A         	call	_BusyXLCD	;wreg free
  2516  007854  0900               	iorlw	0
  2517  007856  A4D8               	btfss	status,2,c
  2518  007858  D7FB               	goto	l295
  2519  00785A                     u800:
  2520  00785A  EC8A  F03A         	call	_BusyXLCD	;wreg free
  2521  00785E  0900               	iorlw	0
  2522  007860  A4D8               	btfss	status,2,c
  2523  007862  D7FB               	goto	u800
  2524  007864  5007               	movf	OpenXLCD@lcdtype,w,c
  2525  007866  ECC5  F03A         	call	_WriteCmdXLCD
  2526  00786A  EC8A  F03A         	call	_BusyXLCD	;wreg free
  2527  00786E  0900               	iorlw	0
  2528  007870  A4D8               	btfss	status,2,c
  2529  007872  D7FB               	goto	l301
  2530  007874  0E08               	movlw	8
  2531  007876  ECC5  F03A         	call	_WriteCmdXLCD
  2532  00787A  EC8A  F03A         	call	_BusyXLCD	;wreg free
  2533  00787E  0900               	iorlw	0
  2534  007880  A4D8               	btfss	status,2,c
  2535  007882  D7FB               	goto	l304
  2536  007884  0E0F               	movlw	15
  2537  007886  ECC5  F03A         	call	_WriteCmdXLCD
  2538  00788A  EC8A  F03A         	call	_BusyXLCD	;wreg free
  2539  00788E  0900               	iorlw	0
  2540  007890  A4D8               	btfss	status,2,c
  2541  007892  D7FB               	goto	l307
  2542  007894  0E01               	movlw	1
  2543  007896  ECC5  F03A         	call	_WriteCmdXLCD
  2544  00789A  EC8A  F03A         	call	_BusyXLCD	;wreg free
  2545  00789E  0900               	iorlw	0
  2546  0078A0  A4D8               	btfss	status,2,c
  2547  0078A2  D7FB               	goto	l310
  2548  0078A4  0E04               	movlw	4
  2549  0078A6  ECC5  F03A         	call	_WriteCmdXLCD
  2550  0078AA  EC8A  F03A         	call	_BusyXLCD	;wreg free
  2551  0078AE  0900               	iorlw	0
  2552  0078B0  A4D8               	btfss	status,2,c
  2553  0078B2  D7FB               	goto	l313
  2554  0078B4  0E80               	movlw	128
  2555  0078B6  EC49  F03B         	call	_SetDDRamAddr
  2556  0078BA  0012               	return	
  2557  0078BC                     __end_of_OpenXLCD:
  2558                           	opt stack 0
  2559                           tblptru	equ	0xFF8
  2560                           prodh	equ	0xFF4
  2561                           prodl	equ	0xFF3
  2562                           postinc0	equ	0xFEE
  2563                           wreg	equ	0xFE8
  2564                           indf1	equ	0xFE7
  2565                           plusw1	equ	0xFE3
  2566                           fsr1h	equ	0xFE2
  2567                           fsr1l	equ	0xFE1
  2568                           indf2	equ	0xFDF
  2569                           postinc2	equ	0xFDE
  2570                           postdec2	equ	0xFDD
  2571                           plusw2	equ	0xFDB
  2572                           fsr2h	equ	0xFDA
  2573                           fsr2l	equ	0xFD9
  2574                           status	equ	0xFD8
  2575                           
  2576 ;; *************** function _WriteCmdXLCD *****************
  2577 ;; Defined at:
  2578 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\pic18\plib\XLCD\wcmdxlcd.c"
  2579 ;; Parameters:    Size  Location     Type
  2580 ;;  cmd             1    wreg     unsigned char 
  2581 ;; Auto vars:     Size  Location     Type
  2582 ;;  cmd             1    2[COMRAM] unsigned char 
  2583 ;; Return value:  Size  Location     Type
  2584 ;;                  1    wreg      void 
  2585 ;; Registers used:
  2586 ;;		wreg, status,2, status,0, cstack
  2587 ;; Tracked objects:
  2588 ;;		On entry : 0/0
  2589 ;;		On exit  : 0/0
  2590 ;;		Unchanged: 0/0
  2591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2592 ;;      Params:         0       0       0       0       0       0       0       0       0
  2593 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2594 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2595 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2596 ;;Total ram usage:        1 bytes
  2597 ;; Hardware stack levels used:    1
  2598 ;; Hardware stack levels required when called:    1
  2599 ;; This function calls:
  2600 ;;		_DelayFor18TCY
  2601 ;; This function is called by:
  2602 ;;		_lcd_init
  2603 ;;		_lcd_clean
  2604 ;;		_OpenXLCD
  2605 ;; This function uses a non-reentrant model
  2606 ;;
  2607                           
  2608                           	psect	text15
  2609  00758A                     __ptext15:
  2610                           	opt stack 0
  2611  00758A                     _WriteCmdXLCD:
  2612                           	opt stack 27
  2613                           
  2614                           ;incstack = 0
  2615                           ;WriteCmdXLCD@cmd stored from wreg
  2616  00758A  6E03               	movwf	WriteCmdXLCD@cmd,c
  2617  00758C  0EF0               	movlw	240
  2618  00758E  1693               	andwf	3987,f,c	;volatile
  2619  007590  0EF0               	movlw	240
  2620  007592  1681               	andwf	3969,f,c	;volatile
  2621  007594  3803               	swapf	WriteCmdXLCD@cmd,w,c
  2622  007596  0B0F               	andlw	15
  2623  007598  0B0F               	andlw	15
  2624  00759A  1281               	iorwf	3969,f,c	;volatile
  2625  00759C  9C8A               	bcf	3978,6,c	;volatile
  2626  00759E  9A8A               	bcf	3978,5,c	;volatile
  2627  0075A0  EC4A  F03A         	call	_DelayFor18TCY	;wreg free
  2628  0075A4  888A               	bsf	3978,4,c	;volatile
  2629  0075A6  EC4A  F03A         	call	_DelayFor18TCY	;wreg free
  2630  0075AA  988A               	bcf	3978,4,c	;volatile
  2631  0075AC  0EF0               	movlw	240
  2632  0075AE  1681               	andwf	3969,f,c	;volatile
  2633  0075B0  5003               	movf	WriteCmdXLCD@cmd,w,c
  2634  0075B2  0B0F               	andlw	15
  2635  0075B4  1281               	iorwf	3969,f,c	;volatile
  2636  0075B6  EC4A  F03A         	call	_DelayFor18TCY	;wreg free
  2637  0075BA  888A               	bsf	3978,4,c	;volatile
  2638  0075BC  EC4A  F03A         	call	_DelayFor18TCY	;wreg free
  2639  0075C0  988A               	bcf	3978,4,c	;volatile
  2640  0075C2  0E0F               	movlw	15
  2641  0075C4  1293               	iorwf	3987,f,c	;volatile
  2642  0075C6  0012               	return	
  2643  0075C8                     __end_of_WriteCmdXLCD:
  2644                           	opt stack 0
  2645                           tblptru	equ	0xFF8
  2646                           prodh	equ	0xFF4
  2647                           prodl	equ	0xFF3
  2648                           postinc0	equ	0xFEE
  2649                           wreg	equ	0xFE8
  2650                           indf1	equ	0xFE7
  2651                           plusw1	equ	0xFE3
  2652                           fsr1h	equ	0xFE2
  2653                           fsr1l	equ	0xFE1
  2654                           indf2	equ	0xFDF
  2655                           postinc2	equ	0xFDE
  2656                           postdec2	equ	0xFDD
  2657                           plusw2	equ	0xFDB
  2658                           fsr2h	equ	0xFDA
  2659                           fsr2l	equ	0xFD9
  2660                           status	equ	0xFD8
  2661                           
  2662 ;; *************** function _SetDDRamAddr *****************
  2663 ;; Defined at:
  2664 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\pic18\plib\XLCD\setddram.c"
  2665 ;; Parameters:    Size  Location     Type
  2666 ;;  DDaddr          1    wreg     unsigned char 
  2667 ;; Auto vars:     Size  Location     Type
  2668 ;;  DDaddr          1    5[COMRAM] unsigned char 
  2669 ;; Return value:  Size  Location     Type
  2670 ;;                  1    wreg      void 
  2671 ;; Registers used:
  2672 ;;		wreg, status,2, status,0, cstack
  2673 ;; Tracked objects:
  2674 ;;		On entry : 0/0
  2675 ;;		On exit  : 0/0
  2676 ;;		Unchanged: 0/0
  2677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2678 ;;      Params:         0       0       0       0       0       0       0       0       0
  2679 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2680 ;;      Temps:          3       0       0       0       0       0       0       0       0
  2681 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2682 ;;Total ram usage:        4 bytes
  2683 ;; Hardware stack levels used:    1
  2684 ;; Hardware stack levels required when called:    1
  2685 ;; This function calls:
  2686 ;;		_DelayFor18TCY
  2687 ;; This function is called by:
  2688 ;;		_lcd_runtime
  2689 ;;		_OpenXLCD
  2690 ;; This function uses a non-reentrant model
  2691 ;;
  2692                           
  2693                           	psect	text16
  2694  007692                     __ptext16:
  2695                           	opt stack 0
  2696  007692                     _SetDDRamAddr:
  2697                           	opt stack 28
  2698                           
  2699                           ;incstack = 0
  2700                           ;SetDDRamAddr@DDaddr stored from wreg
  2701  007692  6E06               	movwf	SetDDRamAddr@DDaddr,c
  2702  007694  0EF0               	movlw	240
  2703  007696  1693               	andwf	3987,f,c	;volatile
  2704  007698  0EF0               	movlw	240
  2705  00769A  1681               	andwf	3969,f,c	;volatile
  2706  00769C  5006               	movf	SetDDRamAddr@DDaddr,w,c
  2707  00769E  6E03               	movwf	??_SetDDRamAddr& (0+255),c
  2708  0076A0  6A04               	clrf	(??_SetDDRamAddr+1)& (0+255),c
  2709  0076A2  8E03               	bsf	??_SetDDRamAddr,7,c
  2710  0076A4  0E04               	movlw	4
  2711  0076A6  6E05               	movwf	(??_SetDDRamAddr+2)& (0+255),c
  2712  0076A8                     u755:
  2713  0076A8  3404               	rlcf	??_SetDDRamAddr+1,w,c
  2714  0076AA  3204               	rrcf	??_SetDDRamAddr+1,f,c
  2715  0076AC  3203               	rrcf	??_SetDDRamAddr,f,c
  2716  0076AE  2E05               	decfsz	(??_SetDDRamAddr+2)& (0+255),f,c
  2717  0076B0  D7FB               	goto	u755
  2718  0076B2  5003               	movf	??_SetDDRamAddr,w,c
  2719  0076B4  0B0F               	andlw	15
  2720  0076B6  1281               	iorwf	3969,f,c	;volatile
  2721  0076B8  9C8A               	bcf	3978,6,c	;volatile
  2722  0076BA  9A8A               	bcf	3978,5,c	;volatile
  2723  0076BC  EC4A  F03A         	call	_DelayFor18TCY	;wreg free
  2724  0076C0  888A               	bsf	3978,4,c	;volatile
  2725  0076C2  EC4A  F03A         	call	_DelayFor18TCY	;wreg free
  2726  0076C6  988A               	bcf	3978,4,c	;volatile
  2727  0076C8  0EF0               	movlw	240
  2728  0076CA  1681               	andwf	3969,f,c	;volatile
  2729  0076CC  5006               	movf	SetDDRamAddr@DDaddr,w,c
  2730  0076CE  0B0F               	andlw	15
  2731  0076D0  1281               	iorwf	3969,f,c	;volatile
  2732  0076D2  EC4A  F03A         	call	_DelayFor18TCY	;wreg free
  2733  0076D6  888A               	bsf	3978,4,c	;volatile
  2734  0076D8  EC4A  F03A         	call	_DelayFor18TCY	;wreg free
  2735  0076DC  988A               	bcf	3978,4,c	;volatile
  2736  0076DE  0E0F               	movlw	15
  2737  0076E0  1293               	iorwf	3987,f,c	;volatile
  2738  0076E2  0012               	return	
  2739  0076E4                     __end_of_SetDDRamAddr:
  2740                           	opt stack 0
  2741                           tblptru	equ	0xFF8
  2742                           prodh	equ	0xFF4
  2743                           prodl	equ	0xFF3
  2744                           postinc0	equ	0xFEE
  2745                           wreg	equ	0xFE8
  2746                           indf1	equ	0xFE7
  2747                           plusw1	equ	0xFE3
  2748                           fsr1h	equ	0xFE2
  2749                           fsr1l	equ	0xFE1
  2750                           indf2	equ	0xFDF
  2751                           postinc2	equ	0xFDE
  2752                           postdec2	equ	0xFDD
  2753                           plusw2	equ	0xFDB
  2754                           fsr2h	equ	0xFDA
  2755                           fsr2l	equ	0xFD9
  2756                           status	equ	0xFD8
  2757                           
  2758 ;; *************** function _DelayPORXLCD *****************
  2759 ;; Defined at:
  2760 ;;		line 107 in file "display.c"
  2761 ;; Parameters:    Size  Location     Type
  2762 ;;		None
  2763 ;; Auto vars:     Size  Location     Type
  2764 ;;		None
  2765 ;; Return value:  Size  Location     Type
  2766 ;;                  1    wreg      void 
  2767 ;; Registers used:
  2768 ;;		wreg, status,2, status,0, cstack
  2769 ;; Tracked objects:
  2770 ;;		On entry : 0/0
  2771 ;;		On exit  : 0/0
  2772 ;;		Unchanged: 0/0
  2773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2774 ;;      Params:         0       0       0       0       0       0       0       0       0
  2775 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2776 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2777 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2778 ;;Total ram usage:        0 bytes
  2779 ;; Hardware stack levels used:    1
  2780 ;; Hardware stack levels required when called:    1
  2781 ;; This function calls:
  2782 ;;		_delay_ms
  2783 ;; This function is called by:
  2784 ;;		_OpenXLCD
  2785 ;; This function uses a non-reentrant model
  2786 ;;
  2787                           
  2788                           	psect	text17
  2789  00741E                     __ptext17:
  2790                           	opt stack 0
  2791  00741E                     _DelayPORXLCD:
  2792                           	opt stack 27
  2793                           
  2794                           ;display.c: 108: delay_ms(60);
  2795                           
  2796                           ;incstack = 0
  2797  00741E  0E00               	movlw	0
  2798  007420  6E02               	movwf	delay_ms@milis+1,c
  2799  007422  0E3C               	movlw	60
  2800  007424  6E01               	movwf	delay_ms@milis,c
  2801  007426  EC5A  F03A         	call	_delay_ms	;wreg free
  2802  00742A  0012               	return		;funcret
  2803  00742C                     __end_of_DelayPORXLCD:
  2804                           	opt stack 0
  2805                           tblptru	equ	0xFF8
  2806                           prodh	equ	0xFF4
  2807                           prodl	equ	0xFF3
  2808                           postinc0	equ	0xFEE
  2809                           wreg	equ	0xFE8
  2810                           indf1	equ	0xFE7
  2811                           plusw1	equ	0xFE3
  2812                           fsr1h	equ	0xFE2
  2813                           fsr1l	equ	0xFE1
  2814                           indf2	equ	0xFDF
  2815                           postinc2	equ	0xFDE
  2816                           postdec2	equ	0xFDD
  2817                           plusw2	equ	0xFDB
  2818                           fsr2h	equ	0xFDA
  2819                           fsr2l	equ	0xFD9
  2820                           status	equ	0xFD8
  2821                           
  2822 ;; *************** function _delay_ms *****************
  2823 ;; Defined at:
  2824 ;;		line 169 in file "main.c"
  2825 ;; Parameters:    Size  Location     Type
  2826 ;;  milis           2    0[COMRAM] unsigned int 
  2827 ;; Auto vars:     Size  Location     Type
  2828 ;;  t               2    3[COMRAM] unsigned int 
  2829 ;; Return value:  Size  Location     Type
  2830 ;;                  1    wreg      void 
  2831 ;; Registers used:
  2832 ;;		wreg, status,2, status,0
  2833 ;; Tracked objects:
  2834 ;;		On entry : 0/0
  2835 ;;		On exit  : 0/0
  2836 ;;		Unchanged: 0/0
  2837 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2838 ;;      Params:         2       0       0       0       0       0       0       0       0
  2839 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2840 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2841 ;;      Totals:         5       0       0       0       0       0       0       0       0
  2842 ;;Total ram usage:        5 bytes
  2843 ;; Hardware stack levels used:    1
  2844 ;; This function calls:
  2845 ;;		Nothing
  2846 ;; This function is called by:
  2847 ;;		_lcd_clean
  2848 ;;		_DelayPORXLCD
  2849 ;;		_DelayXLCD
  2850 ;; This function uses a non-reentrant model
  2851 ;;
  2852                           
  2853                           	psect	text18
  2854  0074B4                     __ptext18:
  2855                           	opt stack 0
  2856  0074B4                     _delay_ms:
  2857                           	opt stack 28
  2858                           
  2859                           ;main.c: 171: for (uint16_t t = 0; t < milis; t++) {
  2860                           
  2861                           ;incstack = 0
  2862  0074B4  0E00               	movlw	0
  2863  0074B6  6E05               	movwf	delay_ms@t+1,c
  2864  0074B8  0E00               	movlw	0
  2865  0074BA  6E04               	movwf	delay_ms@t,c
  2866  0074BC  D009               	goto	l67
  2867  0074BE                     
  2868                           ;main.c: 172: _delay((unsigned long)((1)*(8000000UL/4000.0)));
  2869  0074BE  0E03               	movlw	3
  2870  0074C0  6E03               	movwf	??_delay_ms& (0+255),c
  2871  0074C2  0E98               	movlw	152
  2872  0074C4                     u1417:
  2873  0074C4  2EE8               	decfsz	wreg,f,c
  2874  0074C6  D7FE               	bra	u1417
  2875  0074C8  2E03               	decfsz	??_delay_ms& (0+255),f,c
  2876  0074CA  D7FC               	bra	u1417
  2877  0074CC  4A04               	infsnz	delay_ms@t,f,c
  2878  0074CE  2A05               	incf	delay_ms@t+1,f,c
  2879  0074D0                     l67:
  2880  0074D0  5001               	movf	delay_ms@milis,w,c
  2881  0074D2  5C04               	subwf	delay_ms@t,w,c
  2882  0074D4  5002               	movf	delay_ms@milis+1,w,c
  2883  0074D6  5805               	subwfb	delay_ms@t+1,w,c
  2884  0074D8  B0D8               	btfsc	status,0,c
  2885  0074DA  0012               	return	
  2886  0074DC  D7F0               	goto	l68
  2887  0074DE                     __end_of_delay_ms:
  2888                           	opt stack 0
  2889                           tblptru	equ	0xFF8
  2890                           prodh	equ	0xFF4
  2891                           prodl	equ	0xFF3
  2892                           postinc0	equ	0xFEE
  2893                           wreg	equ	0xFE8
  2894                           indf1	equ	0xFE7
  2895                           plusw1	equ	0xFE3
  2896                           fsr1h	equ	0xFE2
  2897                           fsr1l	equ	0xFE1
  2898                           indf2	equ	0xFDF
  2899                           postinc2	equ	0xFDE
  2900                           postdec2	equ	0xFDD
  2901                           plusw2	equ	0xFDB
  2902                           fsr2h	equ	0xFDA
  2903                           fsr2l	equ	0xFD9
  2904                           status	equ	0xFD8
  2905                           
  2906 ;; *************** function _Delay10KTCYx *****************
  2907 ;; Defined at:
  2908 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\pic18\d10ktcyx.c"
  2909 ;; Parameters:    Size  Location     Type
  2910 ;;  unit            1    wreg     unsigned char 
  2911 ;; Auto vars:     Size  Location     Type
  2912 ;;  unit            1    1[COMRAM] unsigned char 
  2913 ;; Return value:  Size  Location     Type
  2914 ;;                  1    wreg      void 
  2915 ;; Registers used:
  2916 ;;		wreg
  2917 ;; Tracked objects:
  2918 ;;		On entry : 0/0
  2919 ;;		On exit  : 0/0
  2920 ;;		Unchanged: 0/0
  2921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2922 ;;      Params:         0       0       0       0       0       0       0       0       0
  2923 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2924 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2925 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2926 ;;Total ram usage:        2 bytes
  2927 ;; Hardware stack levels used:    1
  2928 ;; This function calls:
  2929 ;;		Nothing
  2930 ;; This function is called by:
  2931 ;;		_OpenXLCD
  2932 ;; This function uses a non-reentrant model
  2933 ;;
  2934                           
  2935                           	psect	text19
  2936  00744A                     __ptext19:
  2937                           	opt stack 0
  2938  00744A                     _Delay10KTCYx:
  2939                           	opt stack 28
  2940                           
  2941                           ;incstack = 0
  2942                           ;Delay10KTCYx@unit stored from wreg
  2943  00744A  6E02               	movwf	Delay10KTCYx@unit,c
  2944  00744C                     l550:
  2945  00744C  0E0D               	movlw	13
  2946  00744E  6E01               	movwf	??_Delay10KTCYx& (0+255),c
  2947  007450  0EFC               	movlw	252
  2948  007452                     u1427:
  2949  007452  2EE8               	decfsz	wreg,f,c
  2950  007454  D7FE               	bra	u1427
  2951  007456  2E01               	decfsz	??_Delay10KTCYx& (0+255),f,c
  2952  007458  D7FC               	bra	u1427
  2953  00745A  2E02               	decfsz	Delay10KTCYx@unit,f,c
  2954  00745C  D7F7               	goto	l550
  2955  00745E  0012               	return	
  2956  007460                     __end_of_Delay10KTCYx:
  2957                           	opt stack 0
  2958                           tblptru	equ	0xFF8
  2959                           prodh	equ	0xFF4
  2960                           prodl	equ	0xFF3
  2961                           postinc0	equ	0xFEE
  2962                           wreg	equ	0xFE8
  2963                           indf1	equ	0xFE7
  2964                           plusw1	equ	0xFE3
  2965                           fsr1h	equ	0xFE2
  2966                           fsr1l	equ	0xFE1
  2967                           indf2	equ	0xFDF
  2968                           postinc2	equ	0xFDE
  2969                           postdec2	equ	0xFDD
  2970                           plusw2	equ	0xFDB
  2971                           fsr2h	equ	0xFDA
  2972                           fsr2l	equ	0xFD9
  2973                           status	equ	0xFD8
  2974                           
  2975 ;; *************** function _BusyXLCD *****************
  2976 ;; Defined at:
  2977 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\pic18\plib\XLCD\busyxlcd.c"
  2978 ;; Parameters:    Size  Location     Type
  2979 ;;		None
  2980 ;; Auto vars:     Size  Location     Type
  2981 ;;		None
  2982 ;; Return value:  Size  Location     Type
  2983 ;;                  1    wreg      unsigned char 
  2984 ;; Registers used:
  2985 ;;		wreg, status,2, status,0, cstack
  2986 ;; Tracked objects:
  2987 ;;		On entry : 0/0
  2988 ;;		On exit  : 0/0
  2989 ;;		Unchanged: 0/0
  2990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2991 ;;      Params:         0       0       0       0       0       0       0       0       0
  2992 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2993 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2994 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2995 ;;Total ram usage:        0 bytes
  2996 ;; Hardware stack levels used:    1
  2997 ;; Hardware stack levels required when called:    1
  2998 ;; This function calls:
  2999 ;;		_DelayFor18TCY
  3000 ;; This function is called by:
  3001 ;;		_lcd_init
  3002 ;;		_lcd_clean
  3003 ;;		_lcd_runtime
  3004 ;;		_OpenXLCD
  3005 ;; This function uses a non-reentrant model
  3006 ;;
  3007                           
  3008                           	psect	text20
  3009  007514                     __ptext20:
  3010                           	opt stack 0
  3011  007514                     _BusyXLCD:
  3012                           	opt stack 28
  3013                           
  3014                           ;incstack = 0
  3015  007514  8C8A               	bsf	3978,6,c	;volatile
  3016  007516  9A8A               	bcf	3978,5,c	;volatile
  3017  007518  EC4A  F03A         	call	_DelayFor18TCY	;wreg free
  3018  00751C  888A               	bsf	3978,4,c	;volatile
  3019  00751E  EC4A  F03A         	call	_DelayFor18TCY	;wreg free
  3020  007522  A681               	btfss	3969,3,c	;volatile
  3021  007524  D00A               	goto	l271
  3022  007526  988A               	bcf	3978,4,c	;volatile
  3023  007528  EC4A  F03A         	call	_DelayFor18TCY	;wreg free
  3024  00752C  888A               	bsf	3978,4,c	;volatile
  3025  00752E  EC4A  F03A         	call	_DelayFor18TCY	;wreg free
  3026  007532  988A               	bcf	3978,4,c	;volatile
  3027  007534  9C8A               	bcf	3978,6,c	;volatile
  3028  007536  0E01               	movlw	1
  3029  007538  0012               	return	
  3030  00753A                     l271:
  3031  00753A  988A               	bcf	3978,4,c	;volatile
  3032  00753C  EC4A  F03A         	call	_DelayFor18TCY	;wreg free
  3033  007540  888A               	bsf	3978,4,c	;volatile
  3034  007542  EC4A  F03A         	call	_DelayFor18TCY	;wreg free
  3035  007546  988A               	bcf	3978,4,c	;volatile
  3036  007548  9C8A               	bcf	3978,6,c	;volatile
  3037  00754A  0E00               	movlw	0
  3038  00754C  0012               	return	
  3039  00754E                     __end_of_BusyXLCD:
  3040                           	opt stack 0
  3041                           tblptru	equ	0xFF8
  3042                           prodh	equ	0xFF4
  3043                           prodl	equ	0xFF3
  3044                           postinc0	equ	0xFEE
  3045                           wreg	equ	0xFE8
  3046                           indf1	equ	0xFE7
  3047                           plusw1	equ	0xFE3
  3048                           fsr1h	equ	0xFE2
  3049                           fsr1l	equ	0xFE1
  3050                           indf2	equ	0xFDF
  3051                           postinc2	equ	0xFDE
  3052                           postdec2	equ	0xFDD
  3053                           plusw2	equ	0xFDB
  3054                           fsr2h	equ	0xFDA
  3055                           fsr2l	equ	0xFD9
  3056                           status	equ	0xFD8
  3057                           
  3058 ;; *************** function _DelayFor18TCY *****************
  3059 ;; Defined at:
  3060 ;;		line 101 in file "display.c"
  3061 ;; Parameters:    Size  Location     Type
  3062 ;;		None
  3063 ;; Auto vars:     Size  Location     Type
  3064 ;;  i               2    0[COMRAM] int 
  3065 ;; Return value:  Size  Location     Type
  3066 ;;                  1    wreg      void 
  3067 ;; Registers used:
  3068 ;;		wreg, status,2, status,0
  3069 ;; Tracked objects:
  3070 ;;		On entry : 0/0
  3071 ;;		On exit  : 0/0
  3072 ;;		Unchanged: 0/0
  3073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3074 ;;      Params:         0       0       0       0       0       0       0       0       0
  3075 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3076 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3077 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3078 ;;Total ram usage:        2 bytes
  3079 ;; Hardware stack levels used:    1
  3080 ;; This function calls:
  3081 ;;		Nothing
  3082 ;; This function is called by:
  3083 ;;		_BusyXLCD
  3084 ;;		_SetDDRamAddr
  3085 ;;		_WriteCmdXLCD
  3086 ;;		_WriteDataXLCD
  3087 ;; This function uses a non-reentrant model
  3088 ;;
  3089                           
  3090                           	psect	text21
  3091  007494                     __ptext21:
  3092                           	opt stack 0
  3093  007494                     _DelayFor18TCY:
  3094                           	opt stack 28
  3095                           
  3096                           ;display.c: 102: for (int i = 0; i < 18; i++) {
  3097                           
  3098                           ;incstack = 0
  3099  007494  0E00               	movlw	0
  3100  007496  6E02               	movwf	DelayFor18TCY@i+1,c
  3101  007498  0E00               	movlw	0
  3102  00749A  6E01               	movwf	DelayFor18TCY@i,c
  3103  00749C                     l1603:
  3104  00749C  BE02               	btfsc	DelayFor18TCY@i+1,7,c
  3105  00749E  D006               	goto	l253
  3106  0074A0  5002               	movf	DelayFor18TCY@i+1,w,c
  3107  0074A2  E107               	bnz	l256
  3108  0074A4  0E12               	movlw	18
  3109  0074A6  5C01               	subwf	DelayFor18TCY@i,w,c
  3110  0074A8  B0D8               	btfsc	status,0,c
  3111  0074AA  0012               	return	
  3112  0074AC                     l253:
  3113                           
  3114                           ;display.c: 103: continue;
  3115  0074AC  4A01               	infsnz	DelayFor18TCY@i,f,c
  3116  0074AE  2A02               	incf	DelayFor18TCY@i+1,f,c
  3117  0074B0  D7F5               	goto	l1603
  3118  0074B2                     l256:
  3119  0074B2  0012               	return		;funcret
  3120  0074B4                     __end_of_DelayFor18TCY:
  3121                           	opt stack 0
  3122                           tblptru	equ	0xFF8
  3123                           prodh	equ	0xFF4
  3124                           prodl	equ	0xFF3
  3125                           postinc0	equ	0xFEE
  3126                           wreg	equ	0xFE8
  3127                           indf1	equ	0xFE7
  3128                           plusw1	equ	0xFE3
  3129                           fsr1h	equ	0xFE2
  3130                           fsr1l	equ	0xFE1
  3131                           indf2	equ	0xFDF
  3132                           postinc2	equ	0xFDE
  3133                           postdec2	equ	0xFDD
  3134                           plusw2	equ	0xFDB
  3135                           fsr2h	equ	0xFDA
  3136                           fsr2l	equ	0xFD9
  3137                           status	equ	0xFD8
  3138                           
  3139 ;; *************** function _check_data *****************
  3140 ;; Defined at:
  3141 ;;		line 78 in file "comunicacao.c"
  3142 ;; Parameters:    Size  Location     Type
  3143 ;;  data            2    4[COMRAM] PTR struct .
  3144 ;;		 -> main@dados(69), 
  3145 ;; Auto vars:     Size  Location     Type
  3146 ;;		None
  3147 ;; Return value:  Size  Location     Type
  3148 ;;                  1    wreg      enum E4588
  3149 ;; Registers used:
  3150 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3151 ;; Tracked objects:
  3152 ;;		On entry : 0/0
  3153 ;;		On exit  : 0/0
  3154 ;;		Unchanged: 0/0
  3155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3156 ;;      Params:         2       0       0       0       0       0       0       0       0
  3157 ;;      Locals:         4       0       0       0       0       0       0       0       0
  3158 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3159 ;;      Totals:         7       0       0       0       0       0       0       0       0
  3160 ;;Total ram usage:        7 bytes
  3161 ;; Hardware stack levels used:    1
  3162 ;; Hardware stack levels required when called:    1
  3163 ;; This function calls:
  3164 ;;		_calc_bcc
  3165 ;; This function is called by:
  3166 ;;		_main
  3167 ;; This function uses a non-reentrant model
  3168 ;;
  3169                           
  3170                           	psect	text22
  3171  007B50                     __ptext22:
  3172                           	opt stack 0
  3173  007B50                     _check_data:
  3174                           	opt stack 29
  3175                           
  3176                           ;comunicacao.c: 80: if (data->buff[0] != 0x02) {
  3177                           
  3178                           ;incstack = 0
  3179  007B50  EE20 F001          	lfsr	2,1
  3180  007B54  5005               	movf	check_data@data,w,c
  3181  007B56  26D9               	addwf	fsr2l,f,c
  3182  007B58  5006               	movf	check_data@data+1,w,c
  3183  007B5A  22DA               	addwfc	fsr2h,f,c
  3184  007B5C  0E02               	movlw	2
  3185  007B5E  18DE               	xorwf	postinc2,w,c
  3186  007B60  B4D8               	btfsc	status,2,c
  3187  007B62  D002               	goto	l105
  3188                           
  3189                           ;comunicacao.c: 81: return ERR_STX;
  3190  007B64  0E00               	movlw	0
  3191  007B66  0012               	return	
  3192  007B68                     l105:
  3193                           
  3194                           ;comunicacao.c: 82: }
  3195                           ;comunicacao.c: 84: if (data->buff[1] != 0x09) {
  3196  007B68  EE20 F002          	lfsr	2,2
  3197  007B6C  5005               	movf	check_data@data,w,c
  3198  007B6E  26D9               	addwf	fsr2l,f,c
  3199  007B70  5006               	movf	check_data@data+1,w,c
  3200  007B72  22DA               	addwfc	fsr2h,f,c
  3201  007B74  0E09               	movlw	9
  3202  007B76  18DE               	xorwf	postinc2,w,c
  3203  007B78  B4D8               	btfsc	status,2,c
  3204  007B7A  D002               	goto	l107
  3205                           
  3206                           ;comunicacao.c: 85: return ERR_IGNORE_MSG;
  3207  007B7C  0E01               	movlw	1
  3208  007B7E  0012               	return	
  3209  007B80                     l107:
  3210                           
  3211                           ;comunicacao.c: 86: }
  3212                           ;comunicacao.c: 88: if (calc_bcc(data->buff) != 0) {
  3213  007B80  0E01               	movlw	1
  3214  007B82  2405               	addwf	check_data@data,w,c
  3215  007B84  6E01               	movwf	calc_bcc@data,c
  3216  007B86  0E00               	movlw	0
  3217  007B88  2006               	addwfc	check_data@data+1,w,c
  3218  007B8A  6E02               	movwf	calc_bcc@data+1,c
  3219  007B8C  EC6F  F03A         	call	_calc_bcc	;wreg free
  3220  007B90  0900               	iorlw	0
  3221  007B92  B4D8               	btfsc	status,2,c
  3222  007B94  D002               	goto	l108
  3223                           
  3224                           ;comunicacao.c: 89: return ERR_BCC;
  3225  007B96  0E02               	movlw	2
  3226  007B98  0012               	return	
  3227  007B9A                     l108:
  3228                           
  3229                           ;comunicacao.c: 90: }
  3230                           ;comunicacao.c: 92: data->addr_from = data->buff[2];
  3231  007B9A  EE20 F003          	lfsr	2,3
  3232  007B9E  5005               	movf	check_data@data,w,c
  3233  007BA0  26D9               	addwf	fsr2l,f,c
  3234  007BA2  5006               	movf	check_data@data+1,w,c
  3235  007BA4  22DA               	addwfc	fsr2h,f,c
  3236  007BA6  EE10 F043          	lfsr	1,67
  3237  007BAA  5005               	movf	check_data@data,w,c
  3238  007BAC  26E1               	addwf	fsr1l,f,c
  3239  007BAE  5006               	movf	check_data@data+1,w,c
  3240  007BB0  22E2               	addwfc	fsr1h,f,c
  3241  007BB2  CFDF FFE7          	movff	indf2,indf1
  3242                           
  3243                           ;comunicacao.c: 93: data->command = data->buff[3];
  3244  007BB6  EE20 F004          	lfsr	2,4
  3245  007BBA  5005               	movf	check_data@data,w,c
  3246  007BBC  26D9               	addwf	fsr2l,f,c
  3247  007BBE  5006               	movf	check_data@data+1,w,c
  3248  007BC0  22DA               	addwfc	fsr2h,f,c
  3249  007BC2  EE10 F044          	lfsr	1,68
  3250  007BC6  5005               	movf	check_data@data,w,c
  3251  007BC8  26E1               	addwf	fsr1l,f,c
  3252  007BCA  5006               	movf	check_data@data+1,w,c
  3253  007BCC  22E2               	addwfc	fsr1h,f,c
  3254  007BCE  CFDF FFE7          	movff	indf2,indf1
  3255                           
  3256                           ;comunicacao.c: 94: data->count = data->buff[4];
  3257  007BD2  EE20 F005          	lfsr	2,5
  3258  007BD6  5005               	movf	check_data@data,w,c
  3259  007BD8  26D9               	addwf	fsr2l,f,c
  3260  007BDA  5006               	movf	check_data@data+1,w,c
  3261  007BDC  22DA               	addwfc	fsr2h,f,c
  3262  007BDE  C005  FFE1         	movff	check_data@data,fsr1l
  3263  007BE2  C006  FFE2         	movff	check_data@data+1,fsr1h
  3264  007BE6  CFDF FFE7          	movff	indf2,indf1
  3265                           
  3266                           ;comunicacao.c: 97: if (data->count == 0) {
  3267  007BEA  C005  FFD9         	movff	check_data@data,fsr2l
  3268  007BEE  C006  FFDA         	movff	check_data@data+1,fsr2h
  3269  007BF2  50DF               	movf	indf2,w,c
  3270  007BF4  A4D8               	btfss	status,2,c
  3271  007BF6  D017               	goto	l109
  3272                           
  3273                           ;comunicacao.c: 98: if (data->command == 0x01) {
  3274  007BF8  EE20 F044          	lfsr	2,68
  3275  007BFC  5005               	movf	check_data@data,w,c
  3276  007BFE  26D9               	addwf	fsr2l,f,c
  3277  007C00  5006               	movf	check_data@data+1,w,c
  3278  007C02  22DA               	addwfc	fsr2h,f,c
  3279  007C04  04DE               	decf	postinc2,w,c
  3280  007C06  A4D8               	btfss	status,2,c
  3281  007C08  D002               	goto	l110
  3282                           
  3283                           ;comunicacao.c: 99: return LE_BOTAO1;
  3284  007C0A  0E08               	movlw	8
  3285  007C0C  0012               	return	
  3286  007C0E                     l110:
  3287                           
  3288                           ;comunicacao.c: 100: }
  3289                           ;comunicacao.c: 101: if (data->command == 0x02) {
  3290  007C0E  EE20 F044          	lfsr	2,68
  3291  007C12  5005               	movf	check_data@data,w,c
  3292  007C14  26D9               	addwf	fsr2l,f,c
  3293  007C16  5006               	movf	check_data@data+1,w,c
  3294  007C18  22DA               	addwfc	fsr2h,f,c
  3295  007C1A  0E02               	movlw	2
  3296  007C1C  18DE               	xorwf	postinc2,w,c
  3297  007C1E  A4D8               	btfss	status,2,c
  3298  007C20  D063               	goto	l124
  3299                           
  3300                           ;comunicacao.c: 102: return LE_BOTAO2;
  3301  007C22  0E09               	movlw	9
  3302  007C24  0012               	return	
  3303  007C26                     l109:
  3304  007C26  C005  FFD9         	movff	check_data@data,fsr2l
  3305  007C2A  C006  FFDA         	movff	check_data@data+1,fsr2h
  3306  007C2E  04DE               	decf	postinc2,w,c
  3307  007C30  A4D8               	btfss	status,2,c
  3308  007C32  D038               	goto	l113
  3309                           
  3310                           ;comunicacao.c: 105: if (data->command == 0x21) {
  3311  007C34  EE20 F044          	lfsr	2,68
  3312  007C38  5005               	movf	check_data@data,w,c
  3313  007C3A  26D9               	addwf	fsr2l,f,c
  3314  007C3C  5006               	movf	check_data@data+1,w,c
  3315  007C3E  22DA               	addwfc	fsr2h,f,c
  3316  007C40  0E21               	movlw	33
  3317  007C42  18DE               	xorwf	postinc2,w,c
  3318  007C44  A4D8               	btfss	status,2,c
  3319  007C46  D012               	goto	l114
  3320                           
  3321                           ;comunicacao.c: 106: return(data->buff[5] & 0x01 == 1 ? LIGA_LED1 : DESLIGA_LED1);
  3322  007C48  EE20 F006          	lfsr	2,6
  3323  007C4C  5005               	movf	check_data@data,w,c
  3324  007C4E  26D9               	addwf	fsr2l,f,c
  3325  007C50  5006               	movf	check_data@data+1,w,c
  3326  007C52  22DA               	addwfc	fsr2h,f,c
  3327  007C54  B0DF               	btfsc	indf2,0,c
  3328  007C56  D004               	goto	l116
  3329  007C58  0E00               	movlw	0
  3330  007C5A  6E09               	movwf	_check_data$305+1,c
  3331  007C5C  0E06               	movlw	6
  3332  007C5E  D003               	goto	L3
  3333  007C60                     l116:
  3334  007C60  0E00               	movlw	0
  3335  007C62  6E09               	movwf	_check_data$305+1,c
  3336  007C64  0E04               	movlw	4
  3337  007C66                     L3:
  3338  007C66  6E08               	movwf	_check_data$305,c
  3339  007C68  5008               	movf	_check_data$305,w,c
  3340  007C6A  0012               	return	
  3341  007C6C                     l114:
  3342                           
  3343                           ;comunicacao.c: 107: }
  3344                           ;comunicacao.c: 108: if (data->command == 0x22) {
  3345  007C6C  EE20 F044          	lfsr	2,68
  3346  007C70  5005               	movf	check_data@data,w,c
  3347  007C72  26D9               	addwf	fsr2l,f,c
  3348  007C74  5006               	movf	check_data@data+1,w,c
  3349  007C76  22DA               	addwfc	fsr2h,f,c
  3350  007C78  0E22               	movlw	34
  3351  007C7A  18DE               	xorwf	postinc2,w,c
  3352  007C7C  A4D8               	btfss	status,2,c
  3353  007C7E  D034               	goto	l124
  3354                           
  3355                           ;comunicacao.c: 109: return(data->buff[5] & 0x01 == 1 ? LIGA_LED2 : DESLIGA_LED2);
  3356  007C80  EE20 F006          	lfsr	2,6
  3357  007C84  5005               	movf	check_data@data,w,c
  3358  007C86  26D9               	addwf	fsr2l,f,c
  3359  007C88  5006               	movf	check_data@data+1,w,c
  3360  007C8A  22DA               	addwfc	fsr2h,f,c
  3361  007C8C  B0DF               	btfsc	indf2,0,c
  3362  007C8E  D004               	goto	l121
  3363  007C90  0E00               	movlw	0
  3364  007C92  6E0B               	movwf	_check_data$306+1,c
  3365  007C94  0E07               	movlw	7
  3366  007C96  D003               	goto	L4
  3367  007C98                     l121:
  3368  007C98  0E00               	movlw	0
  3369  007C9A  6E0B               	movwf	_check_data$306+1,c
  3370  007C9C  0E05               	movlw	5
  3371  007C9E                     L4:
  3372  007C9E  6E0A               	movwf	_check_data$306,c
  3373  007CA0  500A               	movf	_check_data$306,w,c
  3374  007CA2  0012               	return	
  3375  007CA4                     l113:
  3376                           
  3377                           ;comunicacao.c: 112: if (data->command == 0x70) {
  3378  007CA4  EE20 F044          	lfsr	2,68
  3379  007CA8  5005               	movf	check_data@data,w,c
  3380  007CAA  26D9               	addwf	fsr2l,f,c
  3381  007CAC  5006               	movf	check_data@data+1,w,c
  3382  007CAE  22DA               	addwfc	fsr2h,f,c
  3383  007CB0  0E70               	movlw	112
  3384  007CB2  18DE               	xorwf	postinc2,w,c
  3385  007CB4  A4D8               	btfss	status,2,c
  3386  007CB6  D016               	goto	l125
  3387                           
  3388                           ;comunicacao.c: 114: if (data->buff[5] < 0x80 && data->buff[5] > 0x9F) {
  3389  007CB8  EE20 F006          	lfsr	2,6
  3390  007CBC  5005               	movf	check_data@data,w,c
  3391  007CBE  26D9               	addwf	fsr2l,f,c
  3392  007CC0  5006               	movf	check_data@data+1,w,c
  3393  007CC2  22DA               	addwfc	fsr2h,f,c
  3394  007CC4  0E80               	movlw	128
  3395  007CC6  60DF               	cpfslt	indf2,c
  3396  007CC8  D00B               	goto	l126
  3397  007CCA  EE20 F006          	lfsr	2,6
  3398  007CCE  5005               	movf	check_data@data,w,c
  3399  007CD0  26D9               	addwf	fsr2l,f,c
  3400  007CD2  5006               	movf	check_data@data+1,w,c
  3401  007CD4  22DA               	addwfc	fsr2h,f,c
  3402  007CD6  0E9F               	movlw	159
  3403  007CD8  64DF               	cpfsgt	indf2,c
  3404  007CDA  D002               	goto	l126
  3405                           
  3406                           ;comunicacao.c: 115: return ERR_NAK;
  3407  007CDC  0E03               	movlw	3
  3408  007CDE  0012               	return	
  3409  007CE0                     l126:
  3410                           
  3411                           ;comunicacao.c: 116: }
  3412                           ;comunicacao.c: 117: return LE_MSG;
  3413  007CE0  0E0A               	movlw	10
  3414  007CE2  0012               	return	
  3415  007CE4                     l125:
  3416                           
  3417                           ;comunicacao.c: 118: }
  3418                           ;comunicacao.c: 119: return ERR_NAK;
  3419  007CE4  0E03               	movlw	3
  3420  007CE6  0012               	return	
  3421  007CE8                     l124:
  3422                           
  3423                           ;comunicacao.c: 120: }
  3424                           ;comunicacao.c: 122: return ERR_UNDETECTED;
  3425  007CE8  0E0B               	movlw	11
  3426  007CEA  0012               	return	
  3427  007CEC                     __end_of_check_data:
  3428                           	opt stack 0
  3429                           tblptru	equ	0xFF8
  3430                           prodh	equ	0xFF4
  3431                           prodl	equ	0xFF3
  3432                           postinc0	equ	0xFEE
  3433                           wreg	equ	0xFE8
  3434                           indf1	equ	0xFE7
  3435                           plusw1	equ	0xFE3
  3436                           fsr1h	equ	0xFE2
  3437                           fsr1l	equ	0xFE1
  3438                           indf2	equ	0xFDF
  3439                           postinc2	equ	0xFDE
  3440                           postdec2	equ	0xFDD
  3441                           plusw2	equ	0xFDB
  3442                           fsr2h	equ	0xFDA
  3443                           fsr2l	equ	0xFD9
  3444                           status	equ	0xFD8
  3445                           
  3446 ;; *************** function _calc_bcc *****************
  3447 ;; Defined at:
  3448 ;;		line 66 in file "comunicacao.c"
  3449 ;; Parameters:    Size  Location     Type
  3450 ;;  data            2    0[COMRAM] PTR unsigned char 
  3451 ;;		 -> main@dados(69), 
  3452 ;; Auto vars:     Size  Location     Type
  3453 ;;  i               1    3[COMRAM] unsigned char 
  3454 ;;  bcc             1    2[COMRAM] unsigned char 
  3455 ;; Return value:  Size  Location     Type
  3456 ;;                  1    wreg      unsigned char 
  3457 ;; Registers used:
  3458 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3459 ;; Tracked objects:
  3460 ;;		On entry : 0/0
  3461 ;;		On exit  : 0/0
  3462 ;;		Unchanged: 0/0
  3463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3464 ;;      Params:         2       0       0       0       0       0       0       0       0
  3465 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3466 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3467 ;;      Totals:         4       0       0       0       0       0       0       0       0
  3468 ;;Total ram usage:        4 bytes
  3469 ;; Hardware stack levels used:    1
  3470 ;; This function calls:
  3471 ;;		Nothing
  3472 ;; This function is called by:
  3473 ;;		_write_cmd
  3474 ;;		_check_data
  3475 ;; This function uses a non-reentrant model
  3476 ;;
  3477                           
  3478                           	psect	text23
  3479  0074DE                     __ptext23:
  3480                           	opt stack 0
  3481  0074DE                     _calc_bcc:
  3482                           	opt stack 29
  3483                           
  3484                           ;comunicacao.c: 68: uint8_t bcc = data[0];
  3485                           
  3486                           ;incstack = 0
  3487  0074DE  C001  FFD9         	movff	calc_bcc@data,fsr2l
  3488  0074E2  C002  FFDA         	movff	calc_bcc@data+1,fsr2h
  3489  0074E6  50DF               	movf	indf2,w,c
  3490  0074E8  6E03               	movwf	calc_bcc@bcc,c
  3491                           
  3492                           ;comunicacao.c: 71: for (uint8_t i = 1; i < 64; i++) {
  3493  0074EA  0E01               	movlw	1
  3494  0074EC  6E04               	movwf	calc_bcc@i,c
  3495  0074EE                     l1705:
  3496  0074EE  0E3F               	movlw	63
  3497  0074F0  6404               	cpfsgt	calc_bcc@i,c
  3498  0074F2  D001               	goto	l100
  3499  0074F4  D00D               	goto	u770
  3500  0074F6                     l100:
  3501                           
  3502                           ;comunicacao.c: 72: bcc = (uint8_t) (bcc ^ data[i]);
  3503  0074F6  5004               	movf	calc_bcc@i,w,c
  3504  0074F8  0D01               	mullw	1
  3505  0074FA  50F3               	movf	prodl,w,c
  3506  0074FC  2401               	addwf	calc_bcc@data,w,c
  3507  0074FE  6ED9               	movwf	fsr2l,c
  3508  007500  50F4               	movf	prodh,w,c
  3509  007502  2002               	addwfc	calc_bcc@data+1,w,c
  3510  007504  6EDA               	movwf	fsr2h,c
  3511  007506  50DF               	movf	indf2,w,c
  3512  007508  1803               	xorwf	calc_bcc@bcc,w,c
  3513  00750A  6E03               	movwf	calc_bcc@bcc,c
  3514  00750C  2A04               	incf	calc_bcc@i,f,c
  3515  00750E  D7EF               	goto	l1705
  3516  007510                     u770:
  3517                           
  3518                           ;comunicacao.c: 73: }
  3519                           ;comunicacao.c: 75: return(bcc);
  3520  007510  5003               	movf	calc_bcc@bcc,w,c
  3521  007512  0012               	return	
  3522  007514                     __end_of_calc_bcc:
  3523                           	opt stack 0
  3524  0000                     tblptru	equ	0xFF8
  3525                           prodh	equ	0xFF4
  3526                           prodl	equ	0xFF3
  3527                           postinc0	equ	0xFEE
  3528                           wreg	equ	0xFE8
  3529                           indf1	equ	0xFE7
  3530                           plusw1	equ	0xFE3
  3531                           fsr1h	equ	0xFE2
  3532                           fsr1l	equ	0xFE1
  3533                           indf2	equ	0xFDF
  3534                           postinc2	equ	0xFDE
  3535                           postdec2	equ	0xFDD
  3536                           plusw2	equ	0xFDB
  3537                           fsr2h	equ	0xFDA
  3538                           fsr2l	equ	0xFD9
  3539                           status	equ	0xFD8
  3540                           tblptru	equ	0xFF8
  3541                           prodh	equ	0xFF4
  3542                           prodl	equ	0xFF3
  3543                           postinc0	equ	0xFEE
  3544                           wreg	equ	0xFE8
  3545                           indf1	equ	0xFE7
  3546                           plusw1	equ	0xFE3
  3547                           fsr1h	equ	0xFE2
  3548                           fsr1l	equ	0xFE1
  3549                           indf2	equ	0xFDF
  3550                           postinc2	equ	0xFDE
  3551                           postdec2	equ	0xFDD
  3552                           plusw2	equ	0xFDB
  3553                           fsr2h	equ	0xFDA
  3554                           fsr2l	equ	0xFD9
  3555                           status	equ	0xFD8
  3556                           
  3557                           	psect	rparam
  3558  0000                     tblptru	equ	0xFF8
  3559                           prodh	equ	0xFF4
  3560                           prodl	equ	0xFF3
  3561                           postinc0	equ	0xFEE
  3562                           wreg	equ	0xFE8
  3563                           indf1	equ	0xFE7
  3564                           plusw1	equ	0xFE3
  3565                           fsr1h	equ	0xFE2
  3566                           fsr1l	equ	0xFE1
  3567                           indf2	equ	0xFDF
  3568                           postinc2	equ	0xFDE
  3569                           postdec2	equ	0xFDD
  3570                           plusw2	equ	0xFDB
  3571                           fsr2h	equ	0xFDA
  3572                           fsr2l	equ	0xFD9
  3573                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         97
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     79      79
    BANK0           160    141     141
    BANK1           256      0      97
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    lcd_runtime@lcd	PTR struct . size(2) Largest target is 33
		 -> main@lcd(BANK0[33]), 

    lcd_write@string	PTR unsigned char  size(2) Largest target is 33
		 -> main@msg(BANK0[33]), 

    lcd_write@lcd	PTR struct . size(2) Largest target is 33
		 -> main@lcd(BANK0[33]), 

    lcd_mem_clean@lcd	PTR struct . size(2) Largest target is 33
		 -> main@lcd(BANK0[33]), 

    lcd_init@lcd	PTR struct . size(2) Largest target is 33
		 -> main@lcd(BANK0[33]), 

    write_zero@dados	PTR struct . size(2) Largest target is 69
		 -> main@dados(BANK0[69]), 

    check_data@data	PTR struct . size(2) Largest target is 69
		 -> main@dados(BANK0[69]), 

    calc_bcc@data	PTR unsigned char  size(2) Largest target is 69
		 -> main@dados(BANK0[69]), 

    write_cmd@data	PTR struct . size(2) Largest target is 69
		 -> main@dados(BANK0[69]), 

    mk_msg@string	PTR unsigned char  size(2) Largest target is 33
		 -> main@msg(BANK0[33]), 

    mk_msg@data	PTR struct . size(2) Largest target is 69
		 -> main@dados(BANK0[69]), 

    rcv_msg@data	PTR struct . size(2) Largest target is 69
		 -> main@dados(BANK0[69]), 

    rcv_msg@msg	PTR unsigned char  size(2) Largest target is 33
		 -> main@msg(BANK0[33]), 


Critical Paths under _main in COMRAM

    _main->_write_cmd
    _write_cmd->_calc_bcc
    _lcd_runtime->_SetDDRamAddr
    _WriteDataXLCD->_DelayFor18TCY
    _lcd_init->_OpenXLCD
    _lcd_clean->_delay_ms
    _OpenXLCD->_SetDDRamAddr
    _WriteCmdXLCD->_DelayFor18TCY
    _SetDDRamAddr->_DelayFor18TCY
    _DelayPORXLCD->_delay_ms
    _BusyXLCD->_DelayFor18TCY
    _check_data->_calc_bcc

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               142   142      0    9591
                                             78 COMRAM     1     1      0
                                              0 BANK0    141   141      0
                         _check_data
                           _lcd_init
                        _lcd_runtime
                          _lcd_write
                             _mk_msg
                            _rcv_msg
                      _uart_check_rx
                          _uart_init
                          _write_cmd
                         _write_zero
 ---------------------------------------------------------------------------------
 (1) _write_zero                                           3     1      2     330
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _write_cmd                                           74    71      3    2007
                                              4 COMRAM    74    71      3
                           _calc_bcc
                     _uart_send_byte
 ---------------------------------------------------------------------------------
 (2) _uart_send_byte                                       1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _uart_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _uart_check_rx                                        4     2      2      46
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _rcv_msg                                             12     8      4     286
                                              0 COMRAM    12     8      4
 ---------------------------------------------------------------------------------
 (1) _mk_msg                                               6     1      5    2002
                                              0 COMRAM     6     1      5
 ---------------------------------------------------------------------------------
 (1) _lcd_write                                            6     0      6     664
                                              0 COMRAM     6     0      6
 ---------------------------------------------------------------------------------
 (1) _lcd_runtime                                          8     6      2     526
                                              6 COMRAM     8     6      2
                           _BusyXLCD
                       _SetDDRamAddr
                      _WriteDataXLCD
 ---------------------------------------------------------------------------------
 (2) _WriteDataXLCD                                        1     1      0      90
                                              2 COMRAM     1     1      0
                      _DelayFor18TCY
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             2     0      2    1496
                                              7 COMRAM     2     0      2
                           _BusyXLCD
                           _OpenXLCD
                       _WriteCmdXLCD
                          _lcd_clean
                      _lcd_mem_clean
 ---------------------------------------------------------------------------------
 (2) _lcd_mem_clean                                        3     1      2     308
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _lcd_clean                                            0     0      0     410
                           _BusyXLCD
                       _WriteCmdXLCD
                           _delay_ms
 ---------------------------------------------------------------------------------
 (2) _OpenXLCD                                             1     1      0     544
                                              6 COMRAM     1     1      0
                           _BusyXLCD
                       _Delay10KTCYx
                       _DelayPORXLCD
                       _SetDDRamAddr
                       _WriteCmdXLCD
 ---------------------------------------------------------------------------------
 (3) _WriteCmdXLCD                                         1     1      0      90
                                              2 COMRAM     1     1      0
                      _DelayFor18TCY
 ---------------------------------------------------------------------------------
 (2) _SetDDRamAddr                                         4     4      0      90
                                              2 COMRAM     4     4      0
                      _DelayFor18TCY
 ---------------------------------------------------------------------------------
 (3) _DelayPORXLCD                                         0     0      0     274
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                             5     3      2     274
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (3) _Delay10KTCYx                                         2     2      0      22
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _BusyXLCD                                             0     0      0      46
                      _DelayFor18TCY
 ---------------------------------------------------------------------------------
 (3) _DelayFor18TCY                                        2     2      0      46
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _check_data                                           7     5      2     874
                                              4 COMRAM     7     5      2
                           _calc_bcc
 ---------------------------------------------------------------------------------
 (2) _calc_bcc                                             4     2      2     310
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _check_data
     _calc_bcc
   _lcd_init
     _BusyXLCD
       _DelayFor18TCY
     _OpenXLCD
       _BusyXLCD
         _DelayFor18TCY
       _Delay10KTCYx
       _DelayPORXLCD
         _delay_ms
       _SetDDRamAddr
         _DelayFor18TCY
       _WriteCmdXLCD
         _DelayFor18TCY
     _WriteCmdXLCD
       _DelayFor18TCY
     _lcd_clean
       _BusyXLCD
         _DelayFor18TCY
       _WriteCmdXLCD
         _DelayFor18TCY
       _delay_ms
     _lcd_mem_clean
   _lcd_runtime
     _BusyXLCD
       _DelayFor18TCY
     _SetDDRamAddr
       _DelayFor18TCY
     _WriteDataXLCD
       _DelayFor18TCY
   _lcd_write
   _mk_msg
   _rcv_msg
   _uart_check_rx
   _uart_init
   _write_cmd
     _calc_bcc
     _uart_send_byte
   _write_zero

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      61       7       37.9%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     8D      8D       5       88.1%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     4F      4F       1       83.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     13D      20        0.0%
DATA                 0      0     13D       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Wed Jun 06 00:01:35 2018

                     l41 7FF2                       l42 7F98                       l50 7E12  
                     l51 7E44                       l44 7FE6                       l52 7E76  
                     l53 7EAE                       l37 7D30                       l54 7EE6  
                     l38 7D72                       l47 7D7E                       l56 7EFC  
                     l48 7DAE                       l49 7DE0                       l67 74D0  
                     l83 7688                       l91 7AC8                       l59 7F20  
                     l68 74BE                       l84 765A                       l92 7A90  
                     l77 77DE                       l78 77AE                       l94 7B26  
                     l95 7B0E             ?_lcd_runtime 0007              __CFG_BORV$3 000000  
           __CFG_CP0$OFF 000000             __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000  
           __CFG_CP3$OFF 000000              __CFG_LVP$ON 000000                      l100 74F6  
                    l110 7C0E                      l200 762C                      l113 7CA4  
                    l121 7C98                      l105 7B68                      l114 7C6C  
                    l107 7B80                      l211 76F0                      l124 7CE8  
                    l116 7C60                      l108 7B9A                      l125 7CE4  
                    l109 7C26                      l301 786A                      l126 7CE0  
                    l310 789A                      l230 792A                      l304 787A  
                    l240 79AC                      l224 790C                      l313 78AA  
                    l225 78E2                      l161 7580                      l129 7746  
                    l307 788A                      l219 78D6                      l172 7444  
                    l253 74AC                      l245 7A06                      l229 7954  
                    l157 755C                      l271 753A                      l256 74B2  
                    l194 760C                      l197 761C                      l550 744C  
                    l295 7850             __CFG_CPB$OFF 000000             __CFG_CPD$OFF 000000  
                    u800 785A                      u770 7510                      u755 76A8  
                    u940 7766                      u880 772C                      u960 756E  
                    u991 7A5A             __CFG_BOR$OFF 000000              lcd_init@lcd 0008  
  __size_of_WriteCmdXLCD 003E                      prod 000FF3          lcd_write@string 0005  
                    wreg 000FE8            write_cmd@data 0005             __CFG_FOSC$HS 000000  
         write_cmd@F4641 0100             __CFG_WDT$OFF 000000                     l1603 749C  
                   l2083 7A42                     l2067 79E8                     l1705 74EE  
                   l1719 743C                     l1841 773E                     l1779 76E8  
                   u1110 7968                     u1300 79E8                     u1400 7F38  
                   u1330 7A42                     u1090 7920                     u1341 7D12  
                   u1350 7D3C                     u1417 74C4                     u1427 7452  
                   _RCIF 007CF5                     _TRMT 007D61                     _TXIF 007CF4  
                   _main 7CEC                     fsr1h 000FE2                     fsr2h 000FDA  
                   indf1 000FE7                     indf2 000FDF                     fsr1l 000FE1  
                   fsr2l 000FD9   __size_of_WriteDataXLCD 003E                     prodh 000FF4  
                   prodl 000FF3                     start 0000            __CFG_IESO$OFF 000000  
          __CFG_MCLRE$ON 000000             ___param_bank 000000         ??_uart_send_byte 0001  
           _WriteCmdXLCD 758A            __CFG_PLLDIV$2 000000            ?_SetDDRamAddr 0001  
                  ?_main 0001                    _RCREG 000FAE                    _RCSTA 000FAB  
                  _SPBRG 000FAF                    _PORTB 000F81            __CFG_USBDIV$1 000000  
                  _TRISB 000F93                    _TXREG 000FAD    __size_of_Delay10KTCYx 0016  
                  _TXSTA 000FAC            __CFG_PWRT$OFF 000000            __CFG_WRT0$OFF 000000  
          __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000            __CFG_WRT3$OFF 000000  
         __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000  
         __CFG_EBTR2$OFF 000000           __CFG_EBTR3$OFF 000000            __CFG_WRTB$OFF 000000  
          __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000           __CFG_EBTRB$OFF 000000  
        ??_lcd_mem_clean 0003                    main@i 0086          __end_of_rcv_msg 7818  
                  plusw1 000FE3                    plusw2 000FDB                    status 000FD8  
         __CFG_ICPRT$OFF 000000             lcd_runtime@i 000B             lcd_write@col 0004  
           lcd_write@lcd 0001             lcd_write@row 0003          __initialization 7460  
           __end_of_main 8000         __end_of_BusyXLCD 754E             _Delay10KTCYx 744A  
  __size_of_DelayPORXLCD 000E           ??_SetDDRamAddr 0003         __end_of_OpenXLCD 78BC  
                 ??_main 004F            __activetblptr 000002            _WriteDataXLCD 75C8  
        __CFG_CCP2MX$OFF 000000           DelayFor18TCY@i 0001                   _ADCON1 000FC1  
       __end_of_calc_bcc 7514         __end_of_delay_ms 74DE             _DelayPORXLCD 741E  
         __CFG_XINST$OFF 000000         __end_of_lcd_init 7648              mk_msg@count 0003  
                 _mk_msg 7648                   clear_0 7466           ?_WriteDataXLCD 0001  
         lcd_mem_clean@i 0003     __size_of_lcd_runtime 00DA                ??_rcv_msg 0005  
                 tblptru 000FF8         write_cmd@addr_to 0007               __accesstop 0060  
__end_of__initialization 746C          __CFG_PBADEN$OFF 000000            ___rparam_used 000001  
         __pcstackCOMRAM 0001       __size_of_lcd_clean 001E       __size_of_lcd_write 00BA  
 __size_of_DelayFor18TCY 0020               __pbssBANK1 0100               _check_data 7B50  
              ?_BusyXLCD 0001          WriteCmdXLCD@cmd 0003     __end_of_SetDDRamAddr 76E4  
              ?_OpenXLCD 0001        WriteDataXLCD@data 0003    __end_of_uart_check_rx 758A  
        write_zero@dados 0001          ??_WriteDataXLCD 0003                  ?_mk_msg 0001  
              ?_calc_bcc 0001       __size_of_uart_init 000E                ?_delay_ms 0001  
              ?_lcd_init 0008               ??_BusyXLCD 0003          __CFG_VREGEN$OFF 000000  
            rcv_msg@data 0001               ??_OpenXLCD 0007       __size_of_write_cmd 0100  
                __Hparam 0000                  __Lparam 0000        __end_of_lcd_clean 7494  
          _DelayFor18TCY 7494        __end_of_lcd_write 7976          __CFG_STVREN$OFF 000000  
                __pcinit 7460          __size_of_mk_msg 004A                  __ramtop 0800  
                __ptext0 7CEC                  __ptext1 773A                  __ptext2 7A50  
                __ptext3 743A                  __ptext4 742C                  __ptext5 754E  
                __ptext6 77A8                  __ptext7 7648                  __ptext8 78BC  
                __ptext9 7976               ??_calc_bcc 0003             mk_msg@string 0004  
                _rcv_msg 77A8               ??_delay_ms 0003                  main@lcd 0087  
                main@msg 0060                  main@pos 0085               ??_lcd_init 000A  
   end_of_initialization 746C              ?_check_data 0005    __end_of_lcd_mem_clean 773A  
                mk_msg@i 0006            __Lmediumconst 0000        __end_of_uart_init 743A  
           calc_bcc@data 0001                _RCSTAbits 000FAB           ?_DelayFor18TCY 0001  
                postdec2 000FDD                  postinc0 000FEE                  postinc2 000FDE  
              _PORTDbits 000F83           lcd_runtime@lcd 0007        __end_of_write_cmd 7B50  
__size_of_uart_send_byte 0010                _TRISBbits 000F93                _TRISDbits 000F95  
  __size_of_SetDDRamAddr 0052             write_cmd@aux 000D               main@coluna 0084  
          ??_lcd_runtime 0009            delay_ms@milis 0001           check_data@data 0005  
    __size_of_check_data 019C               _write_zero 773A           __end_of_mk_msg 7692  
           _SetDDRamAddr 7692       SetDDRamAddr@DDaddr 0006      start_initialization 7460  
     uart_check_rx@tempo 0003        __size_of_BusyXLCD 003A          ??_DelayFor18TCY 0001  
      __size_of_OpenXLCD 00A4               mk_msg@data 0001            ?_WriteCmdXLCD 0001  
       __CFG_LPT1OSC$OFF 000000                 ??_mk_msg 0006      __end_of_lcd_runtime 7A50  
          __pcstackBANK0 0060        __size_of_calc_bcc 0036        __size_of_delay_ms 002A  
      __size_of_lcd_init 0042           ??_WriteCmdXLCD 0003            ?_Delay10KTCYx 0001  
              _lcd_clean 7476                calc_bcc@i 0004              ?_write_zero 0001  
  __end_of_WriteDataXLCD 7606                _lcd_write 78BC           _uart_send_byte 743A  
             rcv_msg@msg 0003                 ?_rcv_msg 0001             ??_check_data 0007  
 __size_of_uart_check_rx 003C                 _LATBbits 000F8A                delay_ms@t 0004  
          ?_DelayPORXLCD 0001              calc_bcc@bcc 0003          OpenXLCD@lcdtype 0007  
       __CFG_WDTPS$32768 000000           ??_Delay10KTCYx 0001                main@F4662 0140  
              _uart_init 742C               ?_lcd_clean 0001              _lcd_runtime 7976  
 __end_of_uart_send_byte 744A               ?_lcd_write 0001       __end_of_check_data 7CEC  
              main@dados 00A8                main@linha 0083         Delay10KTCYx@unit 0002  
            write_zero@i 0003                _write_cmd 7A50                 _BusyXLCD 7514  
     uart_send_byte@byte 0001      __size_of_write_zero 006E           ??_DelayPORXLCD 0006  
               _OpenXLCD 7818                 __Hrparam 0000                 __Lrparam 0000  
             ?_uart_init 0001            _uart_check_rx 754E          ?_uart_send_byte 0001  
 __size_of_lcd_mem_clean 0056                 _calc_bcc 74DE                 _main$228 0081  
               _delay_ms 74B4         __size_of_rcv_msg 0070                 __ptext10 75C8  
               __ptext11 7606                 __ptext20 7514                 __ptext12 76E4  
               __ptext21 7494                 __ptext13 7476                 __ptext22 7B50  
               __ptext14 7818                 __ptext23 74DE                 __ptext15 758A  
               __ptext16 7692                 __ptext17 741E                 __ptext18 74B4  
               __ptext19 744A               ?_write_cmd 0005                 _lcd_init 7606  
   __end_of_WriteCmdXLCD 75C8            __size_of_main 0314           ?_uart_check_rx 0001  
             write_cmd@i 004E               write_cmd@t 004D              ??_lcd_clean 0006  
       lcd_mem_clean@lcd 0001              ??_lcd_write 0007    __CFG_CPUDIV$OSC1_PLL2 000000  
   __end_of_Delay10KTCYx 7460            _lcd_mem_clean 76E4                 rcv_msg@i 000C  
  __end_of_DelayFor18TCY 74B4              ??_uart_init 0001             ??_write_zero 0003  
   __end_of_DelayPORXLCD 742C         lcd_runtime@i_457 000D              ??_write_cmd 0008  
         ?_lcd_mem_clean 0001       __end_of_write_zero 77A8           _check_data$305 0008  
         _check_data$306 000A          ??_uart_check_rx 0003  
