

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sun Jun 10 13:13:59 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=2
    25                           	psect	text16,global,reloc=2,class=CODE,delta=1
    26                           	psect	text17,global,reloc=2,class=CODE,delta=1
    27                           	psect	text18,global,reloc=2,class=CODE,delta=1
    28                           	psect	text19,global,reloc=2,class=CODE,delta=1
    29                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text22,global,reloc=2,class=CODE,delta=1
    32                           	psect	text23,global,reloc=2,class=CODE,delta=1
    33                           	psect	text24,global,reloc=2,class=CODE,delta=1
    34                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    35                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    36  0000                     
    37                           ; Version 1.45
    38                           ; Generated 16/11/2017 GMT
    39                           ; 
    40                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    41                           ; All rights reserved.
    42                           ; 
    43                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    44                           ; 
    45                           ; Redistribution and use in source and binary forms, with or without modification, are
    46                           ; permitted provided that the following conditions are met:
    47                           ; 
    48                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    49                           ;        conditions and the following disclaimer.
    50                           ; 
    51                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    52                           ;        of conditions and the following disclaimer in the documentation and/or other
    53                           ;        materials provided with the distribution.
    54                           ; 
    55                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    56                           ;        software without specific prior written permission.
    57                           ; 
    58                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    59                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    60                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    61                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    62                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    63                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    64                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    65                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    66                           ; 
    67                           ; 
    68                           ; Code-generator required, PIC18F4550 Definitions
    69                           ; 
    70                           ; SFR Addresses
    71  0000                     _TRISBbits	set	3987
    72  0000                     _PORTB	set	3969
    73  0000                     _LATBbits	set	3978
    74  0000                     _TRISB	set	3987
    75  0000                     _TXREG	set	4013
    76  0000                     _RCSTAbits	set	4011
    77  0000                     _SPBRG	set	4015
    78  0000                     _TXSTA	set	4012
    79  0000                     _RCSTA	set	4011
    80  0000                     _RCREG	set	4014
    81  0000                     _PORTDbits	set	3971
    82  0000                     _PORTCbits	set	3970
    83  0000                     _TRISCbits	set	3988
    84  0000                     _TRISDbits	set	3989
    85  0000                     _OSCCON	set	4051
    86  0000                     _ADCON1	set	4033
    87  0000                     _TRMT	set	32097
    88  0000                     _TXIF	set	31988
    89  0000                     _RCIF	set	31989
    90                           
    91                           ; #config settings
    92  0000                     
    93                           	psect	cinit
    94  007422                     __pcinit:
    95                           	opt stack 0
    96  007422                     start_initialization:
    97                           	opt stack 0
    98  007422                     __initialization:
    99                           	opt stack 0
   100                           
   101                           ; Clear objects allocated to BANK1 (97 bytes)
   102  007422  EE01  F000         	lfsr	0,__pbssBANK1
   103  007426  0E61               	movlw	97
   104  007428                     clear_0:
   105  007428  6AEE               	clrf	postinc0,c
   106  00742A  06E8               	decf	wreg,f,c
   107  00742C  E1FD               	bnz	clear_0
   108  00742E                     end_of_initialization:
   109                           	opt stack 0
   110  00742E                     __end_of__initialization:
   111                           	opt stack 0
   112  00742E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   113  007430  6EF8               	movwf	tblptru,c
   114  007432  0100               	movlb	0
   115  007434  EF6C  F03E         	goto	_main	;jump to C main() function
   116                           tblptru	equ	0xFF8
   117                           postinc0	equ	0xFEE
   118                           wreg	equ	0xFE8
   119                           
   120                           	psect	bssBANK1
   121  000100                     __pbssBANK1:
   122                           	opt stack 0
   123  000100                     write_cmd@F4641:
   124                           	opt stack 0
   125  000100                     	ds	64
   126  000140                     main@F4662:
   127                           	opt stack 0
   128  000140                     	ds	33
   129                           tblptru	equ	0xFF8
   130                           postinc0	equ	0xFEE
   131                           wreg	equ	0xFE8
   132                           
   133                           	psect	cstackBANK0
   134  000060                     __pcstackBANK0:
   135                           	opt stack 0
   136  000060                     main@msg:
   137                           	opt stack 0
   138                           
   139                           ; 33 bytes @ 0x0
   140  000060                     	ds	33
   141  000081                     _main$347:
   142                           	opt stack 0
   143                           
   144                           ; 2 bytes @ 0x21
   145  000081                     	ds	2
   146  000083                     main@linha:
   147                           	opt stack 0
   148                           
   149                           ; 1 bytes @ 0x23
   150  000083                     	ds	1
   151  000084                     main@coluna:
   152                           	opt stack 0
   153                           
   154                           ; 1 bytes @ 0x24
   155  000084                     	ds	1
   156  000085                     main@pos:
   157                           	opt stack 0
   158                           
   159                           ; 1 bytes @ 0x25
   160  000085                     	ds	1
   161  000086                     main@i:
   162                           	opt stack 0
   163                           
   164                           ; 1 bytes @ 0x26
   165  000086                     	ds	1
   166  000087                     main@lcd:
   167                           	opt stack 0
   168                           
   169                           ; 33 bytes @ 0x27
   170  000087                     	ds	33
   171  0000A8                     main@dados:
   172                           	opt stack 0
   173                           
   174                           ; 69 bytes @ 0x48
   175  0000A8                     	ds	69
   176                           tblptru	equ	0xFF8
   177                           postinc0	equ	0xFEE
   178                           wreg	equ	0xFE8
   179                           
   180                           	psect	cstackCOMRAM
   181  000001                     __pcstackCOMRAM:
   182                           	opt stack 0
   183  000001                     ??_Delay10KTCYx:
   184  000001                     ?_uart_check_rx:
   185                           	opt stack 0
   186  000001                     uart_send_byte@byte:
   187                           	opt stack 0
   188  000001                     delay_ms@milis:
   189                           	opt stack 0
   190  000001                     rcv_msg@data:
   191                           	opt stack 0
   192  000001                     mk_msg@data:
   193                           	opt stack 0
   194  000001                     calc_bcc@data:
   195                           	opt stack 0
   196  000001                     write_zero@dados:
   197                           	opt stack 0
   198  000001                     lcd_mem_clean@lcd:
   199                           	opt stack 0
   200  000001                     lcd_write@lcd:
   201                           	opt stack 0
   202  000001                     DelayFor18TCY@i:
   203                           	opt stack 0
   204                           
   205                           ; 2 bytes @ 0x0
   206  000001                     	ds	1
   207  000002                     Delay10KTCYx@unit:
   208                           	opt stack 0
   209                           
   210                           ; 1 bytes @ 0x1
   211  000002                     	ds	1
   212  000003                     ??_SetDDRamAddr:
   213  000003                     ??_delay_ms:
   214  000003                     mk_msg@count:
   215                           	opt stack 0
   216  000003                     calc_bcc@bcc:
   217                           	opt stack 0
   218  000003                     write_zero@i:
   219                           	opt stack 0
   220  000003                     lcd_mem_clean@i:
   221                           	opt stack 0
   222  000003                     lcd_write@row:
   223                           	opt stack 0
   224  000003                     WriteCmdXLCD@cmd:
   225                           	opt stack 0
   226  000003                     WriteDataXLCD@data:
   227                           	opt stack 0
   228  000003                     rcv_msg@msg:
   229                           	opt stack 0
   230  000003                     uart_check_rx@tempo:
   231                           	opt stack 0
   232                           
   233                           ; 2 bytes @ 0x2
   234  000003                     	ds	1
   235  000004                     calc_bcc@i:
   236                           	opt stack 0
   237  000004                     lcd_write@col:
   238                           	opt stack 0
   239  000004                     delay_ms@t:
   240                           	opt stack 0
   241  000004                     mk_msg@string:
   242                           	opt stack 0
   243                           
   244                           ; 2 bytes @ 0x3
   245  000004                     	ds	1
   246  000005                     ??_rcv_msg:
   247  000005                     write_cmd@data:
   248                           	opt stack 0
   249  000005                     check_data@data:
   250                           	opt stack 0
   251  000005                     lcd_write@string:
   252                           	opt stack 0
   253                           
   254                           ; 2 bytes @ 0x4
   255  000005                     	ds	1
   256  000006                     mk_msg@i:
   257                           	opt stack 0
   258  000006                     SetDDRamAddr@DDaddr:
   259                           	opt stack 0
   260  000006                     lcd_clean_all@lcd:
   261                           	opt stack 0
   262                           
   263                           ; 2 bytes @ 0x5
   264  000006                     	ds	1
   265  000007                     write_cmd@addr_to:
   266                           	opt stack 0
   267  000007                     OpenXLCD@lcdtype:
   268                           	opt stack 0
   269  000007                     lcd_runtime@lcd:
   270                           	opt stack 0
   271                           
   272                           ; 2 bytes @ 0x6
   273  000007                     	ds	1
   274  000008                     ??_write_cmd:
   275  000008                     _check_data$461:
   276                           	opt stack 0
   277  000008                     lcd_init@lcd:
   278                           	opt stack 0
   279                           
   280                           ; 2 bytes @ 0x7
   281  000008                     	ds	1
   282  000009                     ??_lcd_runtime:
   283                           
   284                           ; 1 bytes @ 0x8
   285  000009                     	ds	1
   286  00000A                     _check_data$462:
   287                           	opt stack 0
   288                           
   289                           ; 2 bytes @ 0x9
   290  00000A                     	ds	1
   291  00000B                     lcd_runtime@i:
   292                           	opt stack 0
   293                           
   294                           ; 2 bytes @ 0xA
   295  00000B                     	ds	1
   296  00000C                     rcv_msg@i:
   297                           	opt stack 0
   298                           
   299                           ; 1 bytes @ 0xB
   300  00000C                     	ds	1
   301  00000D                     lcd_runtime@i_640:
   302                           	opt stack 0
   303  00000D                     write_cmd@aux:
   304                           	opt stack 0
   305                           
   306                           ; 64 bytes @ 0xC
   307  00000D                     	ds	64
   308  00004D                     write_cmd@t:
   309                           	opt stack 0
   310                           
   311                           ; 1 bytes @ 0x4C
   312  00004D                     	ds	1
   313  00004E                     write_cmd@i:
   314                           	opt stack 0
   315                           
   316                           ; 1 bytes @ 0x4D
   317  00004E                     	ds	1
   318  00004F                     ??_main:
   319                           
   320                           ; 1 bytes @ 0x4E
   321  00004F                     	ds	1
   322                           tblptru	equ	0xFF8
   323                           postinc0	equ	0xFEE
   324                           wreg	equ	0xFE8
   325                           
   326 ;;
   327 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   328 ;;
   329 ;; *************** function _main *****************
   330 ;; Defined at:
   331 ;;		line 16 in file "main.c"
   332 ;; Parameters:    Size  Location     Type
   333 ;;		None
   334 ;; Auto vars:     Size  Location     Type
   335 ;;  i               1   38[BANK0 ] unsigned char 
   336 ;;  coluna          1   36[BANK0 ] unsigned char 
   337 ;;  linha           1   35[BANK0 ] unsigned char 
   338 ;;  dados          69   72[BANK0 ] struct .
   339 ;;  msg            33    0[BANK0 ] unsigned char [33]
   340 ;;  lcd            33   39[BANK0 ] struct .
   341 ;;  pos             1   37[BANK0 ] unsigned char 
   342 ;; Return value:  Size  Location     Type
   343 ;;                  1    wreg      void 
   344 ;; Registers used:
   345 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   346 ;; Tracked objects:
   347 ;;		On entry : 0/0
   348 ;;		On exit  : 0/0
   349 ;;		Unchanged: 0/0
   350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   351 ;;      Params:         0       0       0       0       0       0       0       0       0
   352 ;;      Locals:         0     141       0       0       0       0       0       0       0
   353 ;;      Temps:          1       0       0       0       0       0       0       0       0
   354 ;;      Totals:         1     141       0       0       0       0       0       0       0
   355 ;;Total ram usage:      142 bytes
   356 ;; Hardware stack levels required when called:    4
   357 ;; This function calls:
   358 ;;		_check_data
   359 ;;		_lcd_clean_all
   360 ;;		_lcd_init
   361 ;;		_lcd_runtime
   362 ;;		_lcd_write
   363 ;;		_mk_msg
   364 ;;		_rcv_msg
   365 ;;		_uart_check_rx
   366 ;;		_uart_init
   367 ;;		_write_cmd
   368 ;;		_write_zero
   369 ;; This function is called by:
   370 ;;		Startup code after reset
   371 ;; This function uses a non-reentrant model
   372 ;;
   373                           
   374                           	psect	text0
   375  007CD8                     __ptext0:
   376                           	opt stack 0
   377  007CD8                     _main:
   378                           	opt stack 27
   379                           
   380                           ;main.c: 19: ADCON1 = 0x0F;
   381                           
   382                           ;incstack = 0
   383  007CD8  0E0F               	movlw	15
   384  007CDA  6EC1               	movwf	4033,c	;volatile
   385                           
   386                           ;main.c: 20: OSCCON = 0b01110010;
   387  007CDC  0E72               	movlw	114
   388  007CDE  6ED3               	movwf	4051,c	;volatile
   389                           
   390                           ;main.c: 22: TRISDbits.RD0 = 0;
   391  007CE0  9095               	bcf	3989,0,c	;volatile
   392                           
   393                           ;main.c: 23: TRISDbits.RD1 = 0;
   394  007CE2  9295               	bcf	3989,1,c	;volatile
   395                           
   396                           ;main.c: 24: TRISDbits.RD2 = 1;
   397  007CE4  8495               	bsf	3989,2,c	;volatile
   398                           
   399                           ;main.c: 25: TRISDbits.RD3 = 1;
   400  007CE6  8695               	bsf	3989,3,c	;volatile
   401                           
   402                           ;main.c: 29: uart_init();
   403  007CE8  ECEE  F039         	call	_uart_init	;wreg free
   404                           
   405                           ;main.c: 30: TRISCbits.RC2 = 0;
   406  007CEC  9494               	bcf	3988,2,c	;volatile
   407                           
   408                           ;main.c: 31: PORTCbits.RC2 = 1;
   409  007CEE  8482               	bsf	3970,2,c	;volatile
   410                           
   411                           ;main.c: 38: dados_t dados;
   412                           ;main.c: 39: lcd_t lcd;
   413                           ;main.c: 42: lcd_init(&lcd);
   414  007CF0  0E87               	movlw	low main@lcd
   415  007CF2  6E08               	movwf	lcd_init@lcd,c
   416  007CF4  0E00               	movlw	high main@lcd
   417  007CF6  6E09               	movwf	lcd_init@lcd+1,c
   418  007CF8  ECE4  F03A         	call	_lcd_init	;wreg free
   419                           
   420                           ;main.c: 45: char msg[33] = {0};
   421  007CFC  EE21  F040         	lfsr	2,main@F4662
   422  007D00  EE10  F060         	lfsr	1,main@msg
   423  007D04  0E20               	movlw	32
   424  007D06                     u1381:
   425  007D06  CFDB FFE3          	movff	plusw2,plusw1
   426  007D0A  06E8               	decf	wreg,f,c
   427  007D0C  E2FC               	bc	u1381
   428                           
   429                           ;main.c: 46: uint8_t pos = 0;
   430  007D0E  0E00               	movlw	0
   431  007D10  0100               	movlb	0	; () banked
   432  007D12  6F85               	movwf	main@pos& (0+255),b
   433                           
   434                           ; BSR set to: 0
   435                           ;main.c: 50: PORTDbits.RD0 = 1;
   436  007D14  8083               	bsf	3971,0,c	;volatile
   437                           
   438                           ; BSR set to: 0
   439                           ;main.c: 51: PORTDbits.RD1 = 1;
   440  007D16  8283               	bsf	3971,1,c	;volatile
   441                           
   442                           ; BSR set to: 0
   443                           ;main.c: 52: write_zero(&dados);
   444  007D18  0EA8               	movlw	low main@dados
   445  007D1A  6E01               	movwf	write_zero@dados,c
   446  007D1C  0E00               	movlw	high main@dados
   447  007D1E  6E02               	movwf	write_zero@dados+1,c
   448  007D20  EC80  F03B         	call	_write_zero	;wreg free
   449  007D24                     
   450                           ;main.c: 59: if (!uart_check_rx()) {
   451  007D24  EC88  F03A         	call	_uart_check_rx	;wreg free
   452  007D28  5001               	movf	?_uart_check_rx,w,c
   453  007D2A  1002               	iorwf	?_uart_check_rx+1,w,c
   454  007D2C  A4D8               	btfss	status,2,c
   455  007D2E  D01B               	goto	l46
   456  007D30                     u1390:
   457                           
   458                           ;main.c: 62: dados.buff[dados.count++] = RCREG;
   459                           
   460                           ;main.c: 60: do {
   461  007D30  0100               	movlb	0	; () banked
   462  007D32  51A8               	movf	main@dados& (0+255),w,b
   463  007D34  0D01               	mullw	1
   464  007D36  0E01               	movlw	1
   465  007D38  26F3               	addwf	prodl,f,c
   466  007D3A  0E00               	movlw	0
   467  007D3C  22F4               	addwfc	prodh,f,c
   468  007D3E  0EA8               	movlw	low main@dados
   469  007D40  24F3               	addwf	prodl,w,c
   470  007D42  6ED9               	movwf	fsr2l,c
   471  007D44  0E00               	movlw	high main@dados
   472  007D46  20F4               	addwfc	prodh,w,c
   473  007D48  6EDA               	movwf	fsr2h,c
   474  007D4A  CFAE FFDF          	movff	4014,indf2	;volatile
   475                           
   476                           ; BSR set to: 0
   477  007D4E  2BA8               	incf	main@dados& (0+255),f,b
   478                           
   479                           ; BSR set to: 0
   480                           ;main.c: 63: } while (!uart_check_rx());
   481  007D50  EC88  F03A         	call	_uart_check_rx	;wreg free
   482  007D54  5001               	movf	?_uart_check_rx,w,c
   483  007D56  1002               	iorwf	?_uart_check_rx+1,w,c
   484  007D58  B4D8               	btfsc	status,2,c
   485  007D5A  D7EA               	goto	u1390
   486                           
   487                           ;main.c: 64: dados.data_flag = 1;
   488  007D5C  0E00               	movlw	0
   489  007D5E  0100               	movlb	0	; () banked
   490  007D60  6FEA               	movwf	(main@dados+66)& (0+255),b
   491  007D62  0E01               	movlw	1
   492  007D64  6FE9               	movwf	(main@dados+65)& (0+255),b
   493  007D66                     l46:
   494                           
   495                           ;main.c: 65: }
   496                           ;main.c: 68: if (dados.data_flag) {
   497                           
   498                           ; BSR set to: 0
   499  007D66  0100               	movlb	0	; () banked
   500  007D68  51E9               	movf	(main@dados+65)& (0+255),w,b
   501  007D6A  11EA               	iorwf	(main@dados+66)& (0+255),w,b
   502  007D6C  A4D8               	btfss	status,2,c
   503  007D6E  D114               	goto	l50
   504  007D70  D140               	goto	l49
   505  007D72                     
   506                           ;main.c: 80: msg[0] = 0x15;
   507                           
   508                           ; BSR set to: 0
   509  007D72  0E15               	movlw	21
   510  007D74  0100               	movlb	0	; () banked
   511  007D76  6F60               	movwf	main@msg& (0+255),b
   512                           
   513                           ; BSR set to: 0
   514                           ;main.c: 81: mk_msg(&dados, 1, msg);
   515  007D78  0EA8               	movlw	low main@dados
   516  007D7A  6E01               	movwf	mk_msg@data,c
   517  007D7C  0E00               	movlw	high main@dados
   518  007D7E  6E02               	movwf	mk_msg@data+1,c
   519  007D80  0E01               	movlw	1
   520  007D82  6E03               	movwf	mk_msg@count,c
   521  007D84  0E60               	movlw	low main@msg
   522  007D86  6E04               	movwf	mk_msg@string,c
   523  007D88  0E00               	movlw	high main@msg
   524  007D8A  6E05               	movwf	mk_msg@string+1,c
   525  007D8C  EC07  F03B         	call	_mk_msg	;wreg free
   526                           
   527                           ;main.c: 82: write_cmd(&dados, dados.addr_from);
   528  007D90  0EA8               	movlw	low main@dados
   529  007D92  6E05               	movwf	write_cmd@data,c
   530  007D94  0E00               	movlw	high main@dados
   531  007D96  6E06               	movwf	write_cmd@data+1,c
   532  007D98  C0EB  F007         	movff	main@dados+67,write_cmd@addr_to
   533  007D9C  EC1C  F03D         	call	_write_cmd	;wreg free
   534                           
   535                           ;main.c: 84: break;
   536  007DA0  D122               	goto	l52
   537  007DA2                     l56:
   538                           
   539                           ;main.c: 86: PORTDbits.RD0 = 0;
   540  007DA2  9083               	bcf	3971,0,c	;volatile
   541                           
   542                           ;main.c: 88: msg[0] = 0x06;
   543  007DA4  0E06               	movlw	6
   544  007DA6  0100               	movlb	0	; () banked
   545  007DA8  6F60               	movwf	main@msg& (0+255),b
   546                           
   547                           ; BSR set to: 0
   548                           ;main.c: 89: mk_msg(&dados, 1, msg);
   549  007DAA  0EA8               	movlw	low main@dados
   550  007DAC  6E01               	movwf	mk_msg@data,c
   551  007DAE  0E00               	movlw	high main@dados
   552  007DB0  6E02               	movwf	mk_msg@data+1,c
   553  007DB2  0E01               	movlw	1
   554  007DB4  6E03               	movwf	mk_msg@count,c
   555  007DB6  0E60               	movlw	low main@msg
   556  007DB8  6E04               	movwf	mk_msg@string,c
   557  007DBA  0E00               	movlw	high main@msg
   558  007DBC  6E05               	movwf	mk_msg@string+1,c
   559  007DBE  EC07  F03B         	call	_mk_msg	;wreg free
   560                           
   561                           ;main.c: 90: write_cmd(&dados, dados.addr_from);
   562  007DC2  0EA8               	movlw	low main@dados
   563  007DC4  6E05               	movwf	write_cmd@data,c
   564  007DC6  0E00               	movlw	high main@dados
   565  007DC8  6E06               	movwf	write_cmd@data+1,c
   566  007DCA  C0EB  F007         	movff	main@dados+67,write_cmd@addr_to
   567  007DCE  EC1C  F03D         	call	_write_cmd	;wreg free
   568                           
   569                           ;main.c: 92: break;
   570  007DD2  D109               	goto	l52
   571  007DD4                     l57:
   572                           
   573                           ;main.c: 94: PORTDbits.RD0 = 1;
   574  007DD4  8083               	bsf	3971,0,c	;volatile
   575                           
   576                           ;main.c: 96: msg[0] = 0x06;
   577  007DD6  0E06               	movlw	6
   578  007DD8  0100               	movlb	0	; () banked
   579  007DDA  6F60               	movwf	main@msg& (0+255),b
   580                           
   581                           ; BSR set to: 0
   582                           ;main.c: 97: mk_msg(&dados, 1, msg);
   583  007DDC  0EA8               	movlw	low main@dados
   584  007DDE  6E01               	movwf	mk_msg@data,c
   585  007DE0  0E00               	movlw	high main@dados
   586  007DE2  6E02               	movwf	mk_msg@data+1,c
   587  007DE4  0E01               	movlw	1
   588  007DE6  6E03               	movwf	mk_msg@count,c
   589  007DE8  0E60               	movlw	low main@msg
   590  007DEA  6E04               	movwf	mk_msg@string,c
   591  007DEC  0E00               	movlw	high main@msg
   592  007DEE  6E05               	movwf	mk_msg@string+1,c
   593  007DF0  EC07  F03B         	call	_mk_msg	;wreg free
   594                           
   595                           ;main.c: 98: write_cmd(&dados, dados.addr_from);
   596  007DF4  0EA8               	movlw	low main@dados
   597  007DF6  6E05               	movwf	write_cmd@data,c
   598  007DF8  0E00               	movlw	high main@dados
   599  007DFA  6E06               	movwf	write_cmd@data+1,c
   600  007DFC  C0EB  F007         	movff	main@dados+67,write_cmd@addr_to
   601  007E00  EC1C  F03D         	call	_write_cmd	;wreg free
   602                           
   603                           ;main.c: 100: break;
   604  007E04  D0F0               	goto	l52
   605  007E06                     l58:
   606                           
   607                           ;main.c: 102: PORTDbits.RD1 = 0;
   608  007E06  9283               	bcf	3971,1,c	;volatile
   609                           
   610                           ;main.c: 104: msg[0] = 0x06;
   611  007E08  0E06               	movlw	6
   612  007E0A  0100               	movlb	0	; () banked
   613  007E0C  6F60               	movwf	main@msg& (0+255),b
   614                           
   615                           ; BSR set to: 0
   616                           ;main.c: 105: mk_msg(&dados, 1, msg);
   617  007E0E  0EA8               	movlw	low main@dados
   618  007E10  6E01               	movwf	mk_msg@data,c
   619  007E12  0E00               	movlw	high main@dados
   620  007E14  6E02               	movwf	mk_msg@data+1,c
   621  007E16  0E01               	movlw	1
   622  007E18  6E03               	movwf	mk_msg@count,c
   623  007E1A  0E60               	movlw	low main@msg
   624  007E1C  6E04               	movwf	mk_msg@string,c
   625  007E1E  0E00               	movlw	high main@msg
   626  007E20  6E05               	movwf	mk_msg@string+1,c
   627  007E22  EC07  F03B         	call	_mk_msg	;wreg free
   628                           
   629                           ;main.c: 106: write_cmd(&dados, dados.addr_from);
   630  007E26  0EA8               	movlw	low main@dados
   631  007E28  6E05               	movwf	write_cmd@data,c
   632  007E2A  0E00               	movlw	high main@dados
   633  007E2C  6E06               	movwf	write_cmd@data+1,c
   634  007E2E  C0EB  F007         	movff	main@dados+67,write_cmd@addr_to
   635  007E32  EC1C  F03D         	call	_write_cmd	;wreg free
   636                           
   637                           ;main.c: 108: break;
   638  007E36  D0D7               	goto	l52
   639  007E38                     l59:
   640                           
   641                           ;main.c: 110: PORTDbits.RD1 = 1;
   642  007E38  8283               	bsf	3971,1,c	;volatile
   643                           
   644                           ;main.c: 112: msg[0] = 0x06;
   645  007E3A  0E06               	movlw	6
   646  007E3C  0100               	movlb	0	; () banked
   647  007E3E  6F60               	movwf	main@msg& (0+255),b
   648                           
   649                           ; BSR set to: 0
   650                           ;main.c: 113: mk_msg(&dados, 1, msg);
   651  007E40  0EA8               	movlw	low main@dados
   652  007E42  6E01               	movwf	mk_msg@data,c
   653  007E44  0E00               	movlw	high main@dados
   654  007E46  6E02               	movwf	mk_msg@data+1,c
   655  007E48  0E01               	movlw	1
   656  007E4A  6E03               	movwf	mk_msg@count,c
   657  007E4C  0E60               	movlw	low main@msg
   658  007E4E  6E04               	movwf	mk_msg@string,c
   659  007E50  0E00               	movlw	high main@msg
   660  007E52  6E05               	movwf	mk_msg@string+1,c
   661  007E54  EC07  F03B         	call	_mk_msg	;wreg free
   662                           
   663                           ;main.c: 114: write_cmd(&dados, dados.addr_from);
   664  007E58  0EA8               	movlw	low main@dados
   665  007E5A  6E05               	movwf	write_cmd@data,c
   666  007E5C  0E00               	movlw	high main@dados
   667  007E5E  6E06               	movwf	write_cmd@data+1,c
   668  007E60  C0EB  F007         	movff	main@dados+67,write_cmd@addr_to
   669  007E64  EC1C  F03D         	call	_write_cmd	;wreg free
   670                           
   671                           ;main.c: 116: break;
   672  007E68  D0BE               	goto	l52
   673  007E6A                     
   674                           ;main.c: 118: msg[0] = 0x06;
   675  007E6A  0E06               	movlw	6
   676  007E6C  0100               	movlb	0	; () banked
   677  007E6E  6F60               	movwf	main@msg& (0+255),b
   678                           
   679                           ; BSR set to: 0
   680                           ;main.c: 119: msg[1] = (char) PORTDbits.RD2;
   681  007E70  0E00               	movlw	0
   682  007E72  B483               	btfsc	3971,2,c	;volatile
   683  007E74  0E01               	movlw	1
   684  007E76  6F61               	movwf	(main@msg+1)& (0+255),b
   685                           
   686                           ; BSR set to: 0
   687                           ;main.c: 120: mk_msg(&dados, 2, msg);
   688  007E78  0EA8               	movlw	low main@dados
   689  007E7A  6E01               	movwf	mk_msg@data,c
   690  007E7C  0E00               	movlw	high main@dados
   691  007E7E  6E02               	movwf	mk_msg@data+1,c
   692  007E80  0E02               	movlw	2
   693  007E82  6E03               	movwf	mk_msg@count,c
   694  007E84  0E60               	movlw	low main@msg
   695  007E86  6E04               	movwf	mk_msg@string,c
   696  007E88  0E00               	movlw	high main@msg
   697  007E8A  6E05               	movwf	mk_msg@string+1,c
   698  007E8C  EC07  F03B         	call	_mk_msg	;wreg free
   699                           
   700                           ;main.c: 121: write_cmd(&dados, dados.addr_from);
   701  007E90  0EA8               	movlw	low main@dados
   702  007E92  6E05               	movwf	write_cmd@data,c
   703  007E94  0E00               	movlw	high main@dados
   704  007E96  6E06               	movwf	write_cmd@data+1,c
   705  007E98  C0EB  F007         	movff	main@dados+67,write_cmd@addr_to
   706  007E9C  EC1C  F03D         	call	_write_cmd	;wreg free
   707                           
   708                           ;main.c: 123: break;
   709  007EA0  D0A2               	goto	l52
   710  007EA2                     
   711                           ;main.c: 125: msg[0] = 0x06;
   712  007EA2  0E06               	movlw	6
   713  007EA4  0100               	movlb	0	; () banked
   714  007EA6  6F60               	movwf	main@msg& (0+255),b
   715                           
   716                           ; BSR set to: 0
   717                           ;main.c: 126: msg[1] = (char) PORTDbits.RD3;
   718  007EA8  0E00               	movlw	0
   719  007EAA  B683               	btfsc	3971,3,c	;volatile
   720  007EAC  0E01               	movlw	1
   721  007EAE  6F61               	movwf	(main@msg+1)& (0+255),b
   722                           
   723                           ; BSR set to: 0
   724                           ;main.c: 127: mk_msg(&dados, 2, msg);
   725  007EB0  0EA8               	movlw	low main@dados
   726  007EB2  6E01               	movwf	mk_msg@data,c
   727  007EB4  0E00               	movlw	high main@dados
   728  007EB6  6E02               	movwf	mk_msg@data+1,c
   729  007EB8  0E02               	movlw	2
   730  007EBA  6E03               	movwf	mk_msg@count,c
   731  007EBC  0E60               	movlw	low main@msg
   732  007EBE  6E04               	movwf	mk_msg@string,c
   733  007EC0  0E00               	movlw	high main@msg
   734  007EC2  6E05               	movwf	mk_msg@string+1,c
   735  007EC4  EC07  F03B         	call	_mk_msg	;wreg free
   736                           
   737                           ;main.c: 128: write_cmd(&dados, dados.addr_from);
   738  007EC8  0EA8               	movlw	low main@dados
   739  007ECA  6E05               	movwf	write_cmd@data,c
   740  007ECC  0E00               	movlw	high main@dados
   741  007ECE  6E06               	movwf	write_cmd@data+1,c
   742  007ED0  C0EB  F007         	movff	main@dados+67,write_cmd@addr_to
   743  007ED4  EC1C  F03D         	call	_write_cmd	;wreg free
   744                           
   745                           ;main.c: 130: break;
   746  007ED8  D086               	goto	l52
   747  007EDA                     
   748                           ;main.c: 132: pos = (dados.buff[5]) - 0x80;
   749  007EDA  0100               	movlb	0	; () banked
   750  007EDC  51AE               	movf	(main@dados+6)& (0+255),w,b
   751  007EDE  0F80               	addlw	128
   752  007EE0  6F85               	movwf	main@pos& (0+255),b
   753                           
   754                           ;main.c: 135: uint8_t linha = pos < 16 ? 1 : 2;
   755  007EE2  0E0F               	movlw	15
   756  007EE4  6585               	cpfsgt	main@pos& (0+255),b
   757  007EE6  D004               	goto	l64
   758                           
   759                           ; BSR set to: 0
   760  007EE8  0E00               	movlw	0
   761  007EEA  6F82               	movwf	(_main$347+1)& (0+255),b
   762  007EEC  0E02               	movlw	2
   763  007EEE  D003               	goto	L1
   764  007EF0                     l64:
   765                           
   766                           ; BSR set to: 0
   767                           
   768                           ; BSR set to: 0
   769  007EF0  0E00               	movlw	0
   770  007EF2  6F82               	movwf	(_main$347+1)& (0+255),b
   771  007EF4  0E01               	movlw	1
   772  007EF6                     L1:
   773  007EF6  6F81               	movwf	_main$347& (0+255),b
   774                           
   775                           ; BSR set to: 0
   776                           
   777                           ; BSR set to: 0
   778  007EF8  C081  F083         	movff	_main$347,main@linha
   779                           
   780                           ; BSR set to: 0
   781                           ;main.c: 136: uint8_t coluna = (pos % 16) + 1;
   782  007EFC  C085  F04F         	movff	main@pos,??_main
   783  007F00  0E0F               	movlw	15
   784  007F02  164F               	andwf	??_main,f,c
   785  007F04  284F               	incf	??_main,w,c
   786  007F06  6F84               	movwf	main@coluna& (0+255),b
   787                           
   788                           ; BSR set to: 0
   789                           ;main.c: 139: for (uint8_t i = 0; i < 33; i++) {
   790  007F08  0E00               	movlw	0
   791  007F0A  6F86               	movwf	main@i& (0+255),b
   792  007F0C  0E20               	movlw	32
   793  007F0E  6586               	cpfsgt	main@i& (0+255),b
   794  007F10  D001               	goto	l67
   795  007F12  D00C               	goto	u1440
   796  007F14                     l67:
   797                           
   798                           ; BSR set to: 0
   799                           ;main.c: 140: msg[i] = 0;
   800                           
   801                           ; BSR set to: 0
   802  007F14  5186               	movf	main@i& (0+255),w,b
   803  007F16  0D01               	mullw	1
   804  007F18  0E60               	movlw	low main@msg
   805  007F1A  24F3               	addwf	prodl,w,c
   806  007F1C  6ED9               	movwf	fsr2l,c
   807  007F1E  0E00               	movlw	high main@msg
   808  007F20  20F4               	addwfc	prodh,w,c
   809  007F22  6EDA               	movwf	fsr2h,c
   810  007F24  0E00               	movlw	0
   811  007F26  6EDF               	movwf	indf2,c
   812                           
   813                           ; BSR set to: 0
   814  007F28  2B86               	incf	main@i& (0+255),f,b
   815  007F2A  D7F0               	goto	L2
   816  007F2C                     u1440:
   817                           
   818                           ; BSR set to: 0
   819                           ;main.c: 141: }
   820                           ;main.c: 144: rcv_msg(&dados, msg);
   821                           
   822                           ; BSR set to: 0
   823  007F2C  0EA8               	movlw	low main@dados
   824  007F2E  6E01               	movwf	rcv_msg@data,c
   825  007F30  0E00               	movlw	high main@dados
   826  007F32  6E02               	movwf	rcv_msg@data+1,c
   827  007F34  0E60               	movlw	low main@msg
   828  007F36  6E03               	movwf	rcv_msg@msg,c
   829  007F38  0E00               	movlw	high main@msg
   830  007F3A  6E04               	movwf	rcv_msg@msg+1,c
   831  007F3C  ECB7  F03B         	call	_rcv_msg	;wreg free
   832                           
   833                           ;main.c: 147: lcd_clean_all(&lcd);
   834  007F40  0E87               	movlw	low main@lcd
   835  007F42  6E06               	movwf	lcd_clean_all@lcd,c
   836  007F44  0E00               	movlw	high main@lcd
   837  007F46  6E07               	movwf	lcd_clean_all@lcd+1,c
   838  007F48  ECFD  F039         	call	_lcd_clean_all	;wreg free
   839                           
   840                           ;main.c: 148: lcd_write(&lcd, linha, coluna, msg);
   841  007F4C  0E87               	movlw	low main@lcd
   842  007F4E  6E01               	movwf	lcd_write@lcd,c
   843  007F50  0E00               	movlw	high main@lcd
   844  007F52  6E02               	movwf	lcd_write@lcd+1,c
   845  007F54  C083  F003         	movff	main@linha,lcd_write@row
   846  007F58  C084  F004         	movff	main@coluna,lcd_write@col
   847  007F5C  0E60               	movlw	low main@msg
   848  007F5E  6E05               	movwf	lcd_write@string,c
   849  007F60  0E00               	movlw	high main@msg
   850  007F62  6E06               	movwf	lcd_write@string+1,c
   851  007F64  EC41  F03C         	call	_lcd_write	;wreg free
   852                           
   853                           ;main.c: 151: msg[0] = 0x06;
   854  007F68  0E06               	movlw	6
   855  007F6A  0100               	movlb	0	; () banked
   856  007F6C  6F60               	movwf	main@msg& (0+255),b
   857                           
   858                           ; BSR set to: 0
   859                           ;main.c: 152: mk_msg(&dados, 1, msg);
   860  007F6E  0EA8               	movlw	low main@dados
   861  007F70  6E01               	movwf	mk_msg@data,c
   862  007F72  0E00               	movlw	high main@dados
   863  007F74  6E02               	movwf	mk_msg@data+1,c
   864  007F76  0E01               	movlw	1
   865  007F78  6E03               	movwf	mk_msg@count,c
   866  007F7A  0E60               	movlw	low main@msg
   867  007F7C  6E04               	movwf	mk_msg@string,c
   868  007F7E  0E00               	movlw	high main@msg
   869  007F80  6E05               	movwf	mk_msg@string+1,c
   870  007F82  EC07  F03B         	call	_mk_msg	;wreg free
   871                           
   872                           ;main.c: 153: write_cmd(&dados, dados.addr_from);
   873  007F86  0EA8               	movlw	low main@dados
   874  007F88  6E05               	movwf	write_cmd@data,c
   875  007F8A  0E00               	movlw	high main@dados
   876  007F8C  6E06               	movwf	write_cmd@data+1,c
   877  007F8E  C0EB  F007         	movff	main@dados+67,write_cmd@addr_to
   878  007F92  EC1C  F03D         	call	_write_cmd	;wreg free
   879                           
   880                           ;main.c: 159: }
   881                           
   882                           ;main.c: 158: break;
   883                           
   884                           ;main.c: 156: default:
   885                           
   886                           ;main.c: 155: break;
   887  007F96  D027               	goto	l52
   888  007F98                     l50:
   889  007F98  0EA8               	movlw	low main@dados
   890  007F9A  6E05               	movwf	check_data@data,c
   891  007F9C  0E00               	movlw	high main@dados
   892  007F9E  6E06               	movwf	check_data@data+1,c
   893  007FA0  EC9E  F03D         	call	_check_data	;wreg free
   894                           
   895                           ; Switch size 1, requested type "space"
   896                           ; Number of cases is 11, Range of values is 0 to 10
   897                           ; switch strategies available:
   898                           ; Name         Instructions Cycles
   899                           ; simple_byte           34    18 (average)
   900                           ;	Chosen strategy is simple_byte
   901  007FA4  0A00               	xorlw	0	; case 0
   902  007FA6  B4D8               	btfsc	status,2,c
   903  007FA8  D01E               	goto	l52
   904  007FAA  0A01               	xorlw	1	; case 1
   905  007FAC  B4D8               	btfsc	status,2,c
   906  007FAE  D01B               	goto	l52
   907  007FB0  0A03               	xorlw	3	; case 2
   908  007FB2  B4D8               	btfsc	status,2,c
   909  007FB4  D018               	goto	l52
   910  007FB6  0A01               	xorlw	1	; case 3
   911  007FB8  B4D8               	btfsc	status,2,c
   912  007FBA  D6DB               	goto	l55
   913  007FBC  0A07               	xorlw	7	; case 4
   914  007FBE  B4D8               	btfsc	status,2,c
   915  007FC0  D6F0               	goto	l56
   916  007FC2  0A01               	xorlw	1	; case 5
   917  007FC4  B4D8               	btfsc	status,2,c
   918  007FC6  D71F               	goto	l58
   919  007FC8  0A03               	xorlw	3	; case 6
   920  007FCA  B4D8               	btfsc	status,2,c
   921  007FCC  D703               	goto	l57
   922  007FCE  0A01               	xorlw	1	; case 7
   923  007FD0  B4D8               	btfsc	status,2,c
   924  007FD2  D732               	goto	l59
   925  007FD4  0A0F               	xorlw	15	; case 8
   926  007FD6  B4D8               	btfsc	status,2,c
   927  007FD8  D748               	goto	l60
   928  007FDA  0A01               	xorlw	1	; case 9
   929  007FDC  B4D8               	btfsc	status,2,c
   930  007FDE  D761               	goto	l61
   931  007FE0  0A03               	xorlw	3	; case 10
   932  007FE2  B4D8               	btfsc	status,2,c
   933  007FE4  D77A               	goto	l62
   934  007FE6                     l52:
   935                           
   936                           ;main.c: 161: write_zero(&dados);
   937  007FE6  0EA8               	movlw	low main@dados
   938  007FE8  6E01               	movwf	write_zero@dados,c
   939  007FEA  0E00               	movlw	high main@dados
   940  007FEC  6E02               	movwf	write_zero@dados+1,c
   941  007FEE  EC80  F03B         	call	_write_zero	;wreg free
   942  007FF2                     l49:
   943                           
   944                           ;main.c: 163: }
   945                           ;main.c: 165: lcd_runtime(&lcd);
   946  007FF2  0E87               	movlw	low main@lcd
   947  007FF4  6E07               	movwf	lcd_runtime@lcd,c
   948  007FF6  0E00               	movlw	high main@lcd
   949  007FF8  6E08               	movwf	lcd_runtime@lcd+1,c
   950  007FFA  EC9E  F03C         	call	_lcd_runtime	;wreg free
   951  007FFE  D692               	goto	l45
   952  008000                     __end_of_main:
   953                           	opt stack 0
   954                           tblptru	equ	0xFF8
   955                           prodh	equ	0xFF4
   956                           prodl	equ	0xFF3
   957                           postinc0	equ	0xFEE
   958                           wreg	equ	0xFE8
   959                           plusw1	equ	0xFE3
   960                           indf2	equ	0xFDF
   961                           plusw2	equ	0xFDB
   962                           fsr2h	equ	0xFDA
   963                           fsr2l	equ	0xFD9
   964                           status	equ	0xFD8
   965                           
   966 ;; *************** function _write_zero *****************
   967 ;; Defined at:
   968 ;;		line 127 in file "comunicacao.c"
   969 ;; Parameters:    Size  Location     Type
   970 ;;  dados           2    0[COMRAM] PTR struct .
   971 ;;		 -> main@dados(69), 
   972 ;; Auto vars:     Size  Location     Type
   973 ;;  i               1    2[COMRAM] unsigned char 
   974 ;; Return value:  Size  Location     Type
   975 ;;                  1    wreg      void 
   976 ;; Registers used:
   977 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
   978 ;; Tracked objects:
   979 ;;		On entry : 0/0
   980 ;;		On exit  : 0/0
   981 ;;		Unchanged: 0/0
   982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   983 ;;      Params:         2       0       0       0       0       0       0       0       0
   984 ;;      Locals:         1       0       0       0       0       0       0       0       0
   985 ;;      Temps:          0       0       0       0       0       0       0       0       0
   986 ;;      Totals:         3       0       0       0       0       0       0       0       0
   987 ;;Total ram usage:        3 bytes
   988 ;; Hardware stack levels used:    1
   989 ;; This function calls:
   990 ;;		Nothing
   991 ;; This function is called by:
   992 ;;		_main
   993 ;; This function uses a non-reentrant model
   994 ;;
   995                           
   996                           	psect	text1
   997  007700                     __ptext1:
   998                           	opt stack 0
   999  007700                     _write_zero:
  1000                           	opt stack 30
  1001                           
  1002                           ;comunicacao.c: 129: for (uint8_t i = 0; i < 64; i++) {
  1003                           
  1004                           ;incstack = 0
  1005  007700  0E00               	movlw	0
  1006  007702  6E03               	movwf	write_zero@i,c
  1007  007704                     l1873:
  1008  007704  0E3F               	movlw	63
  1009  007706  6403               	cpfsgt	write_zero@i,c
  1010  007708  D001               	goto	l139
  1011  00770A  D010               	goto	u960
  1012  00770C                     l139:
  1013                           
  1014                           ;comunicacao.c: 130: dados->buff[i] = 0x00;
  1015  00770C  5003               	movf	write_zero@i,w,c
  1016  00770E  0D01               	mullw	1
  1017  007710  0E01               	movlw	1
  1018  007712  26F3               	addwf	prodl,f,c
  1019  007714  0E00               	movlw	0
  1020  007716  22F4               	addwfc	prodh,f,c
  1021  007718  50F3               	movf	prodl,w,c
  1022  00771A  2401               	addwf	write_zero@dados,w,c
  1023  00771C  6ED9               	movwf	fsr2l,c
  1024  00771E  50F4               	movf	prodh,w,c
  1025  007720  2002               	addwfc	write_zero@dados+1,w,c
  1026  007722  6EDA               	movwf	fsr2h,c
  1027  007724  0E00               	movlw	0
  1028  007726  6EDF               	movwf	indf2,c
  1029  007728  2A03               	incf	write_zero@i,f,c
  1030  00772A  D7EC               	goto	l1873
  1031  00772C                     u960:
  1032                           
  1033                           ;comunicacao.c: 131: }
  1034                           ;comunicacao.c: 133: dados->count = 0;
  1035  00772C  C001  FFD9         	movff	write_zero@dados,fsr2l
  1036  007730  C002  FFDA         	movff	write_zero@dados+1,fsr2h
  1037  007734  0E00               	movlw	0
  1038  007736  6EDF               	movwf	indf2,c
  1039                           
  1040                           ;comunicacao.c: 134: dados->command = 0;
  1041  007738  EE20 F044          	lfsr	2,68
  1042  00773C  5001               	movf	write_zero@dados,w,c
  1043  00773E  26D9               	addwf	fsr2l,f,c
  1044  007740  5002               	movf	write_zero@dados+1,w,c
  1045  007742  22DA               	addwfc	fsr2h,f,c
  1046  007744  0E00               	movlw	0
  1047  007746  6EDF               	movwf	indf2,c
  1048                           
  1049                           ;comunicacao.c: 135: dados->data_flag = 0;
  1050  007748  EE20 F041          	lfsr	2,65
  1051  00774C  5001               	movf	write_zero@dados,w,c
  1052  00774E  26D9               	addwf	fsr2l,f,c
  1053  007750  5002               	movf	write_zero@dados+1,w,c
  1054  007752  22DA               	addwfc	fsr2h,f,c
  1055  007754  0E00               	movlw	0
  1056  007756  6EDE               	movwf	postinc2,c
  1057  007758  0E00               	movlw	0
  1058  00775A  6EDD               	movwf	postdec2,c
  1059                           
  1060                           ;comunicacao.c: 136: dados->addr_from = 0;
  1061  00775C  EE20 F043          	lfsr	2,67
  1062  007760  5001               	movf	write_zero@dados,w,c
  1063  007762  26D9               	addwf	fsr2l,f,c
  1064  007764  5002               	movf	write_zero@dados+1,w,c
  1065  007766  22DA               	addwfc	fsr2h,f,c
  1066  007768  0E00               	movlw	0
  1067  00776A  6EDF               	movwf	indf2,c
  1068  00776C  0012               	return		;funcret
  1069  00776E                     __end_of_write_zero:
  1070                           	opt stack 0
  1071                           tblptru	equ	0xFF8
  1072                           prodh	equ	0xFF4
  1073                           prodl	equ	0xFF3
  1074                           postinc0	equ	0xFEE
  1075                           wreg	equ	0xFE8
  1076                           plusw1	equ	0xFE3
  1077                           indf2	equ	0xFDF
  1078                           postinc2	equ	0xFDE
  1079                           postdec2	equ	0xFDD
  1080                           plusw2	equ	0xFDB
  1081                           fsr2h	equ	0xFDA
  1082                           fsr2l	equ	0xFD9
  1083                           status	equ	0xFD8
  1084                           
  1085 ;; *************** function _write_cmd *****************
  1086 ;; Defined at:
  1087 ;;		line 44 in file "comunicacao.c"
  1088 ;; Parameters:    Size  Location     Type
  1089 ;;  data            2    4[COMRAM] PTR struct .
  1090 ;;		 -> main@dados(69), 
  1091 ;;  addr_to         1    6[COMRAM] unsigned char 
  1092 ;; Auto vars:     Size  Location     Type
  1093 ;;  t               1   76[COMRAM] unsigned char 
  1094 ;;  aux            64   12[COMRAM] unsigned char [64]
  1095 ;;  i               1   77[COMRAM] unsigned char 
  1096 ;; Return value:  Size  Location     Type
  1097 ;;                  1    wreg      void 
  1098 ;; Registers used:
  1099 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1100 ;; Tracked objects:
  1101 ;;		On entry : 0/0
  1102 ;;		On exit  : 0/0
  1103 ;;		Unchanged: 0/0
  1104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1105 ;;      Params:         3       0       0       0       0       0       0       0       0
  1106 ;;      Locals:        66       0       0       0       0       0       0       0       0
  1107 ;;      Temps:          5       0       0       0       0       0       0       0       0
  1108 ;;      Totals:        74       0       0       0       0       0       0       0       0
  1109 ;;Total ram usage:       74 bytes
  1110 ;; Hardware stack levels used:    1
  1111 ;; Hardware stack levels required when called:    1
  1112 ;; This function calls:
  1113 ;;		_calc_bcc
  1114 ;;		_uart_send_byte
  1115 ;; This function is called by:
  1116 ;;		_main
  1117 ;; This function uses a non-reentrant model
  1118 ;;
  1119                           
  1120                           	psect	text2
  1121  007A38                     __ptext2:
  1122                           	opt stack 0
  1123  007A38                     _write_cmd:
  1124                           	opt stack 29
  1125                           
  1126                           ;comunicacao.c: 46: uint8_t aux[64] = {0};
  1127                           
  1128                           ;incstack = 0
  1129  007A38  EE21  F000         	lfsr	2,write_cmd@F4641
  1130  007A3C  EE10  F00D         	lfsr	1,write_cmd@aux
  1131  007A40  0E3F               	movlw	63
  1132  007A42                     u1011:
  1133  007A42  CFDB FFE3          	movff	plusw2,plusw1
  1134  007A46  06E8               	decf	wreg,f,c
  1135  007A48  E2FC               	bc	u1011
  1136                           
  1137                           ;comunicacao.c: 48: aux[0] = 0x02;
  1138  007A4A  0E02               	movlw	2
  1139  007A4C  6E0D               	movwf	write_cmd@aux,c
  1140                           
  1141                           ;comunicacao.c: 49: aux[1] = addr_to;
  1142  007A4E  C007  F00E         	movff	write_cmd@addr_to,write_cmd@aux+1
  1143                           
  1144                           ;comunicacao.c: 50: aux[2] = 0x09;
  1145  007A52  0E09               	movlw	9
  1146  007A54  6E0F               	movwf	write_cmd@aux+2,c
  1147                           
  1148                           ;comunicacao.c: 51: aux[3] = data->command;
  1149  007A56  EE20 F044          	lfsr	2,68
  1150  007A5A  5005               	movf	write_cmd@data,w,c
  1151  007A5C  26D9               	addwf	fsr2l,f,c
  1152  007A5E  5006               	movf	write_cmd@data+1,w,c
  1153  007A60  22DA               	addwfc	fsr2h,f,c
  1154  007A62  50DF               	movf	indf2,w,c
  1155  007A64  6E10               	movwf	write_cmd@aux+3,c
  1156                           
  1157                           ;comunicacao.c: 52: aux[4] = data->count;
  1158  007A66  C005  FFD9         	movff	write_cmd@data,fsr2l
  1159  007A6A  C006  FFDA         	movff	write_cmd@data+1,fsr2h
  1160  007A6E  50DF               	movf	indf2,w,c
  1161  007A70  6E11               	movwf	write_cmd@aux+4,c
  1162                           
  1163                           ;comunicacao.c: 54: uint8_t i = 0;
  1164  007A72  0E00               	movlw	0
  1165  007A74  6E4E               	movwf	write_cmd@i,c
  1166                           
  1167                           ;comunicacao.c: 55: while (i < data->count) {
  1168  007A76  D01C               	goto	l101
  1169  007A78                     
  1170                           ;comunicacao.c: 56: aux[i + 5] = data->buff[i++];
  1171  007A78  504E               	movf	write_cmd@i,w,c
  1172  007A7A  0D01               	mullw	1
  1173  007A7C  0E01               	movlw	1
  1174  007A7E  26F3               	addwf	prodl,f,c
  1175  007A80  0E00               	movlw	0
  1176  007A82  22F4               	addwfc	prodh,f,c
  1177  007A84  50F3               	movf	prodl,w,c
  1178  007A86  2405               	addwf	write_cmd@data,w,c
  1179  007A88  6ED9               	movwf	fsr2l,c
  1180  007A8A  50F4               	movf	prodh,w,c
  1181  007A8C  2006               	addwfc	write_cmd@data+1,w,c
  1182  007A8E  6EDA               	movwf	fsr2h,c
  1183  007A90  504E               	movf	write_cmd@i,w,c
  1184  007A92  6E08               	movwf	??_write_cmd& (0+255),c
  1185  007A94  6A09               	clrf	(??_write_cmd+1)& (0+255),c
  1186  007A96  0E05               	movlw	5
  1187  007A98  2608               	addwf	??_write_cmd,f,c
  1188  007A9A  0E00               	movlw	0
  1189  007A9C  2209               	addwfc	??_write_cmd+1,f,c
  1190  007A9E  0E0D               	movlw	low write_cmd@aux
  1191  007AA0  2408               	addwf	??_write_cmd,w,c
  1192  007AA2  6EE1               	movwf	fsr1l,c
  1193  007AA4  0E00               	movlw	high write_cmd@aux
  1194  007AA6  2009               	addwfc	??_write_cmd+1,w,c
  1195  007AA8  6EE2               	movwf	fsr1h,c
  1196  007AAA  CFDF FFE7          	movff	indf2,indf1
  1197  007AAE  2A4E               	incf	write_cmd@i,f,c
  1198  007AB0                     l101:
  1199  007AB0  C005  FFD9         	movff	write_cmd@data,fsr2l
  1200  007AB4  C006  FFDA         	movff	write_cmd@data+1,fsr2h
  1201  007AB8  50DE               	movf	postinc2,w,c
  1202  007ABA  5C4E               	subwf	write_cmd@i,w,c
  1203  007ABC  A0D8               	btfss	status,0,c
  1204  007ABE  D7DC               	goto	l102
  1205                           
  1206                           ;comunicacao.c: 57: }
  1207                           ;comunicacao.c: 59: aux[i + 5] = calc_bcc(data->buff);
  1208  007AC0  0E01               	movlw	1
  1209  007AC2  2405               	addwf	write_cmd@data,w,c
  1210  007AC4  6E01               	movwf	calc_bcc@data,c
  1211  007AC6  0E00               	movlw	0
  1212  007AC8  2006               	addwfc	write_cmd@data+1,w,c
  1213  007ACA  6E02               	movwf	calc_bcc@data+1,c
  1214  007ACC  EC50  F03A         	call	_calc_bcc	;wreg free
  1215  007AD0  6E08               	movwf	??_write_cmd& (0+255),c
  1216  007AD2  504E               	movf	write_cmd@i,w,c
  1217  007AD4  6E09               	movwf	(??_write_cmd+1)& (0+255),c
  1218  007AD6  6A0A               	clrf	(??_write_cmd+2)& (0+255),c
  1219  007AD8  0E05               	movlw	5
  1220  007ADA  2609               	addwf	??_write_cmd+1,f,c
  1221  007ADC  0E00               	movlw	0
  1222  007ADE  220A               	addwfc	??_write_cmd+2,f,c
  1223  007AE0  0E0D               	movlw	low write_cmd@aux
  1224  007AE2  2409               	addwf	??_write_cmd+1,w,c
  1225  007AE4  6ED9               	movwf	fsr2l,c
  1226  007AE6  0E00               	movlw	high write_cmd@aux
  1227  007AE8  200A               	addwfc	??_write_cmd+2,w,c
  1228  007AEA  6EDA               	movwf	fsr2h,c
  1229  007AEC  C008  FFDF         	movff	??_write_cmd,indf2
  1230                           
  1231                           ;comunicacao.c: 61: PORTCbits.RC2 = 0;
  1232  007AF0  9482               	bcf	3970,2,c	;volatile
  1233                           
  1234                           ;comunicacao.c: 62: for (uint8_t t = 0; t < i + 6; t++) {
  1235  007AF2  0E00               	movlw	0
  1236  007AF4  6E4D               	movwf	write_cmd@t,c
  1237  007AF6  D00C               	goto	l104
  1238  007AF8                     
  1239                           ;comunicacao.c: 63: uart_send_byte(aux[t]);
  1240  007AF8  504D               	movf	write_cmd@t,w,c
  1241  007AFA  0D01               	mullw	1
  1242  007AFC  0E0D               	movlw	low write_cmd@aux
  1243  007AFE  24F3               	addwf	prodl,w,c
  1244  007B00  6ED9               	movwf	fsr2l,c
  1245  007B02  0E00               	movlw	high write_cmd@aux
  1246  007B04  20F4               	addwfc	prodh,w,c
  1247  007B06  6EDA               	movwf	fsr2h,c
  1248  007B08  50DF               	movf	indf2,w,c
  1249  007B0A  ECF5  F039         	call	_uart_send_byte
  1250  007B0E  2A4D               	incf	write_cmd@t,f,c
  1251  007B10                     l104:
  1252  007B10  504E               	movf	write_cmd@i,w,c
  1253  007B12  6E08               	movwf	??_write_cmd& (0+255),c
  1254  007B14  6A09               	clrf	(??_write_cmd+1)& (0+255),c
  1255  007B16  0E06               	movlw	6
  1256  007B18  2608               	addwf	??_write_cmd,f,c
  1257  007B1A  0E00               	movlw	0
  1258  007B1C  2209               	addwfc	??_write_cmd+1,f,c
  1259  007B1E  504D               	movf	write_cmd@t,w,c
  1260  007B20  6E0A               	movwf	(??_write_cmd+2)& (0+255),c
  1261  007B22  6A0B               	clrf	(??_write_cmd+3)& (0+255),c
  1262  007B24  5008               	movf	??_write_cmd,w,c
  1263  007B26  5C0A               	subwf	??_write_cmd+2,w,c
  1264  007B28  500B               	movf	??_write_cmd+3,w,c
  1265  007B2A  0A80               	xorlw	128
  1266  007B2C  6E0C               	movwf	(??_write_cmd+4)& (0+255),c
  1267  007B2E  5009               	movf	??_write_cmd+1,w,c
  1268  007B30  0A80               	xorlw	128
  1269  007B32  580C               	subwfb	(??_write_cmd+4)& (0+255),w,c
  1270  007B34  A0D8               	btfss	status,0,c
  1271  007B36  D7E0               	goto	l105
  1272                           
  1273                           ;comunicacao.c: 64: }
  1274                           ;comunicacao.c: 65: PORTCbits.RC2 = 1;
  1275  007B38  8482               	bsf	3970,2,c	;volatile
  1276  007B3A  0012               	return		;funcret
  1277  007B3C                     __end_of_write_cmd:
  1278                           	opt stack 0
  1279                           tblptru	equ	0xFF8
  1280                           prodh	equ	0xFF4
  1281                           prodl	equ	0xFF3
  1282                           postinc0	equ	0xFEE
  1283                           wreg	equ	0xFE8
  1284                           indf1	equ	0xFE7
  1285                           plusw1	equ	0xFE3
  1286                           fsr1h	equ	0xFE2
  1287                           fsr1l	equ	0xFE1
  1288                           indf2	equ	0xFDF
  1289                           postinc2	equ	0xFDE
  1290                           postdec2	equ	0xFDD
  1291                           plusw2	equ	0xFDB
  1292                           fsr2h	equ	0xFDA
  1293                           fsr2l	equ	0xFD9
  1294                           status	equ	0xFD8
  1295                           
  1296 ;; *************** function _uart_send_byte *****************
  1297 ;; Defined at:
  1298 ;;		line 54 in file "uart.c"
  1299 ;; Parameters:    Size  Location     Type
  1300 ;;  byte            1    wreg     unsigned char 
  1301 ;; Auto vars:     Size  Location     Type
  1302 ;;  byte            1    0[COMRAM] unsigned char 
  1303 ;; Return value:  Size  Location     Type
  1304 ;;                  1    wreg      void 
  1305 ;; Registers used:
  1306 ;;		wreg
  1307 ;; Tracked objects:
  1308 ;;		On entry : 0/0
  1309 ;;		On exit  : 0/0
  1310 ;;		Unchanged: 0/0
  1311 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1312 ;;      Params:         0       0       0       0       0       0       0       0       0
  1313 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1314 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1315 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1316 ;;Total ram usage:        1 bytes
  1317 ;; Hardware stack levels used:    1
  1318 ;; This function calls:
  1319 ;;		Nothing
  1320 ;; This function is called by:
  1321 ;;		_write_cmd
  1322 ;; This function uses a non-reentrant model
  1323 ;;
  1324                           
  1325                           	psect	text3
  1326  0073EA                     __ptext3:
  1327                           	opt stack 0
  1328  0073EA                     _uart_send_byte:
  1329                           	opt stack 29
  1330                           
  1331                           ;incstack = 0
  1332                           ;uart_send_byte@byte stored from wreg
  1333  0073EA  6E01               	movwf	uart_send_byte@byte,c
  1334  0073EC                     
  1335                           ;uart.c: 56: while (TXIF == 0);
  1336  0073EC  A89E               	btfss	3998,4,c	;volatile
  1337  0073EE  D7FE               	goto	l1749
  1338                           
  1339                           ;uart.c: 57: TXREG = byte;
  1340  0073F0  C001  FFAD         	movff	uart_send_byte@byte,4013	;volatile
  1341  0073F4  B2AC               	btfsc	4012,1,c	;volatile
  1342  0073F6  0012               	return	
  1343  0073F8  D7FD               	goto	l182
  1344  0073FA                     __end_of_uart_send_byte:
  1345                           	opt stack 0
  1346                           tblptru	equ	0xFF8
  1347                           prodh	equ	0xFF4
  1348                           prodl	equ	0xFF3
  1349                           postinc0	equ	0xFEE
  1350                           wreg	equ	0xFE8
  1351                           indf1	equ	0xFE7
  1352                           plusw1	equ	0xFE3
  1353                           fsr1h	equ	0xFE2
  1354                           fsr1l	equ	0xFE1
  1355                           indf2	equ	0xFDF
  1356                           postinc2	equ	0xFDE
  1357                           postdec2	equ	0xFDD
  1358                           plusw2	equ	0xFDB
  1359                           fsr2h	equ	0xFDA
  1360                           fsr2l	equ	0xFD9
  1361                           status	equ	0xFD8
  1362                           
  1363 ;; *************** function _uart_init *****************
  1364 ;; Defined at:
  1365 ;;		line 12 in file "uart.c"
  1366 ;; Parameters:    Size  Location     Type
  1367 ;;		None
  1368 ;; Auto vars:     Size  Location     Type
  1369 ;;		None
  1370 ;; Return value:  Size  Location     Type
  1371 ;;                  1    wreg      void 
  1372 ;; Registers used:
  1373 ;;		wreg, status,2
  1374 ;; Tracked objects:
  1375 ;;		On entry : 0/0
  1376 ;;		On exit  : 0/0
  1377 ;;		Unchanged: 0/0
  1378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1379 ;;      Params:         0       0       0       0       0       0       0       0       0
  1380 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1381 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1382 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1383 ;;Total ram usage:        0 bytes
  1384 ;; Hardware stack levels used:    1
  1385 ;; This function calls:
  1386 ;;		Nothing
  1387 ;; This function is called by:
  1388 ;;		_main
  1389 ;; This function uses a non-reentrant model
  1390 ;;
  1391                           
  1392                           	psect	text4
  1393  0073DC                     __ptext4:
  1394                           	opt stack 0
  1395  0073DC                     _uart_init:
  1396                           	opt stack 30
  1397                           
  1398                           ;uart.c: 14: RCSTA = 0x90;
  1399                           
  1400                           ;incstack = 0
  1401  0073DC  0E90               	movlw	144
  1402  0073DE  6EAB               	movwf	4011,c	;volatile
  1403                           
  1404                           ;uart.c: 15: TXSTA = 0x24;
  1405  0073E0  0E24               	movlw	36
  1406  0073E2  6EAC               	movwf	4012,c	;volatile
  1407                           
  1408                           ;uart.c: 23: SPBRG = 51;
  1409  0073E4  0E33               	movlw	51
  1410  0073E6  6EAF               	movwf	4015,c	;volatile
  1411  0073E8  0012               	return		;funcret
  1412  0073EA                     __end_of_uart_init:
  1413                           	opt stack 0
  1414                           tblptru	equ	0xFF8
  1415                           prodh	equ	0xFF4
  1416                           prodl	equ	0xFF3
  1417                           postinc0	equ	0xFEE
  1418                           wreg	equ	0xFE8
  1419                           indf1	equ	0xFE7
  1420                           plusw1	equ	0xFE3
  1421                           fsr1h	equ	0xFE2
  1422                           fsr1l	equ	0xFE1
  1423                           indf2	equ	0xFDF
  1424                           postinc2	equ	0xFDE
  1425                           postdec2	equ	0xFDD
  1426                           plusw2	equ	0xFDB
  1427                           fsr2h	equ	0xFDA
  1428                           fsr2l	equ	0xFD9
  1429                           status	equ	0xFD8
  1430                           
  1431 ;; *************** function _uart_check_rx *****************
  1432 ;; Defined at:
  1433 ;;		line 26 in file "uart.c"
  1434 ;; Parameters:    Size  Location     Type
  1435 ;;		None
  1436 ;; Auto vars:     Size  Location     Type
  1437 ;;  tempo           2    2[COMRAM] unsigned int 
  1438 ;; Return value:  Size  Location     Type
  1439 ;;                  2    0[COMRAM] short 
  1440 ;; Registers used:
  1441 ;;		wreg, status,2, status,0
  1442 ;; Tracked objects:
  1443 ;;		On entry : 0/0
  1444 ;;		On exit  : 0/0
  1445 ;;		Unchanged: 0/0
  1446 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1447 ;;      Params:         2       0       0       0       0       0       0       0       0
  1448 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1449 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1450 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1451 ;;Total ram usage:        4 bytes
  1452 ;; Hardware stack levels used:    1
  1453 ;; This function calls:
  1454 ;;		Nothing
  1455 ;; This function is called by:
  1456 ;;		_main
  1457 ;; This function uses a non-reentrant model
  1458 ;;
  1459                           
  1460                           	psect	text5
  1461  007510                     __ptext5:
  1462                           	opt stack 0
  1463  007510                     _uart_check_rx:
  1464                           	opt stack 30
  1465                           
  1466                           ;uart.c: 28: uint16_t tempo;
  1467                           ;uart.c: 30: RCSTAbits.OERR = 0;
  1468                           
  1469                           ;incstack = 0
  1470  007510  92AB               	bcf	4011,1,c	;volatile
  1471                           
  1472                           ;uart.c: 31: RCSTAbits.CREN = 0;
  1473  007512  98AB               	bcf	4011,4,c	;volatile
  1474                           
  1475                           ;uart.c: 32: __nop();
  1476  007514  F000               	nop	
  1477                           
  1478                           ;uart.c: 33: RCSTAbits.CREN = 1;
  1479  007516  88AB               	bsf	4011,4,c	;volatile
  1480                           
  1481                           ;uart.c: 35: tempo = 0xFFF;
  1482  007518  0E0F               	movlw	15
  1483  00751A  6E04               	movwf	uart_check_rx@tempo+1,c
  1484  00751C  6803               	setf	uart_check_rx@tempo,c
  1485  00751E                     
  1486                           ;uart.c: 38: --tempo;
  1487  00751E  0603               	decf	uart_check_rx@tempo,f,c
  1488  007520  A0D8               	btfss	status,0,c
  1489  007522  0604               	decf	uart_check_rx@tempo+1,f,c
  1490                           
  1491                           ;uart.c: 39: } while (!RCIF && tempo > 0);
  1492  007524  BA9E               	btfsc	3998,5,c	;volatile
  1493  007526  D004               	goto	u980
  1494  007528  5003               	movf	uart_check_rx@tempo,w,c
  1495  00752A  1004               	iorwf	uart_check_rx@tempo+1,w,c
  1496  00752C  A4D8               	btfss	status,2,c
  1497  00752E  D7F7               	goto	l167
  1498  007530                     u980:
  1499                           
  1500                           ;uart.c: 41: if (tempo > 0) {
  1501  007530  5003               	movf	uart_check_rx@tempo,w,c
  1502  007532  1004               	iorwf	uart_check_rx@tempo+1,w,c
  1503  007534  B4D8               	btfsc	status,2,c
  1504  007536  D005               	goto	l171
  1505                           
  1506                           ;uart.c: 42: return(0);
  1507  007538  0E00               	movlw	0
  1508  00753A  6E02               	movwf	?_uart_check_rx+1,c
  1509  00753C  0E00               	movlw	0
  1510  00753E  6E01               	movwf	?_uart_check_rx,c
  1511  007540  0012               	return	
  1512  007542                     l171:
  1513                           
  1514                           ;uart.c: 43: }
  1515                           ;uart.c: 45: return(1);
  1516  007542  0E00               	movlw	0
  1517  007544  6E02               	movwf	?_uart_check_rx+1,c
  1518  007546  0E01               	movlw	1
  1519  007548  6E01               	movwf	?_uart_check_rx,c
  1520  00754A  0012               	return	
  1521  00754C                     __end_of_uart_check_rx:
  1522                           	opt stack 0
  1523                           tblptru	equ	0xFF8
  1524                           prodh	equ	0xFF4
  1525                           prodl	equ	0xFF3
  1526                           postinc0	equ	0xFEE
  1527                           wreg	equ	0xFE8
  1528                           indf1	equ	0xFE7
  1529                           plusw1	equ	0xFE3
  1530                           fsr1h	equ	0xFE2
  1531                           fsr1l	equ	0xFE1
  1532                           indf2	equ	0xFDF
  1533                           postinc2	equ	0xFDE
  1534                           postdec2	equ	0xFDD
  1535                           plusw2	equ	0xFDB
  1536                           fsr2h	equ	0xFDA
  1537                           fsr2l	equ	0xFD9
  1538                           status	equ	0xFD8
  1539                           
  1540 ;; *************** function _rcv_msg *****************
  1541 ;; Defined at:
  1542 ;;		line 13 in file "comunicacao.c"
  1543 ;; Parameters:    Size  Location     Type
  1544 ;;  data            2    0[COMRAM] PTR struct .
  1545 ;;		 -> main@dados(69), 
  1546 ;;  msg             2    2[COMRAM] PTR unsigned char 
  1547 ;;		 -> main@msg(33), 
  1548 ;; Auto vars:     Size  Location     Type
  1549 ;;  i               1   11[COMRAM] unsigned char 
  1550 ;; Return value:  Size  Location     Type
  1551 ;;                  1    wreg      void 
  1552 ;; Registers used:
  1553 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1554 ;; Tracked objects:
  1555 ;;		On entry : 0/0
  1556 ;;		On exit  : 0/0
  1557 ;;		Unchanged: 0/0
  1558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1559 ;;      Params:         4       0       0       0       0       0       0       0       0
  1560 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1561 ;;      Temps:          7       0       0       0       0       0       0       0       0
  1562 ;;      Totals:        12       0       0       0       0       0       0       0       0
  1563 ;;Total ram usage:       12 bytes
  1564 ;; Hardware stack levels used:    1
  1565 ;; This function calls:
  1566 ;;		Nothing
  1567 ;; This function is called by:
  1568 ;;		_main
  1569 ;; This function uses a non-reentrant model
  1570 ;;
  1571                           
  1572                           	psect	text6
  1573  00776E                     __ptext6:
  1574                           	opt stack 0
  1575  00776E                     _rcv_msg:
  1576                           	opt stack 30
  1577                           
  1578                           ;comunicacao.c: 30: for (uint8_t i = 0; i < data->count - 1; i++) {
  1579                           
  1580                           ;incstack = 0
  1581  00776E  0E00               	movlw	0
  1582  007770  6E0C               	movwf	rcv_msg@i,c
  1583  007772  D018               	goto	l87
  1584  007774                     
  1585                           ;comunicacao.c: 31: msg[i] = data->buff[i + 6];
  1586  007774  500C               	movf	rcv_msg@i,w,c
  1587  007776  6E05               	movwf	??_rcv_msg& (0+255),c
  1588  007778  6A06               	clrf	(??_rcv_msg+1)& (0+255),c
  1589  00777A  0E07               	movlw	7
  1590  00777C  2605               	addwf	??_rcv_msg,f,c
  1591  00777E  0E00               	movlw	0
  1592  007780  2206               	addwfc	??_rcv_msg+1,f,c
  1593  007782  5005               	movf	??_rcv_msg,w,c
  1594  007784  2401               	addwf	rcv_msg@data,w,c
  1595  007786  6ED9               	movwf	fsr2l,c
  1596  007788  5006               	movf	??_rcv_msg+1,w,c
  1597  00778A  2002               	addwfc	rcv_msg@data+1,w,c
  1598  00778C  6EDA               	movwf	fsr2h,c
  1599  00778E  500C               	movf	rcv_msg@i,w,c
  1600  007790  0D01               	mullw	1
  1601  007792  50F3               	movf	prodl,w,c
  1602  007794  2403               	addwf	rcv_msg@msg,w,c
  1603  007796  6EE1               	movwf	fsr1l,c
  1604  007798  50F4               	movf	prodh,w,c
  1605  00779A  2004               	addwfc	rcv_msg@msg+1,w,c
  1606  00779C  6EE2               	movwf	fsr1h,c
  1607  00779E  CFDF FFE7          	movff	indf2,indf1
  1608  0077A2  2A0C               	incf	rcv_msg@i,f,c
  1609  0077A4                     l87:
  1610  0077A4  0EFF               	movlw	255
  1611  0077A6  6E05               	movwf	??_rcv_msg& (0+255),c
  1612  0077A8  0EFF               	movlw	255
  1613  0077AA  6E06               	movwf	(??_rcv_msg+1)& (0+255),c
  1614  0077AC  C001  FFD9         	movff	rcv_msg@data,fsr2l
  1615  0077B0  C002  FFDA         	movff	rcv_msg@data+1,fsr2h
  1616  0077B4  50DF               	movf	indf2,w,c
  1617  0077B6  6E07               	movwf	(??_rcv_msg+2)& (0+255),c
  1618  0077B8  6A08               	clrf	(??_rcv_msg+3)& (0+255),c
  1619  0077BA  5005               	movf	??_rcv_msg,w,c
  1620  0077BC  2607               	addwf	??_rcv_msg+2,f,c
  1621  0077BE  5006               	movf	??_rcv_msg+1,w,c
  1622  0077C0  2208               	addwfc	??_rcv_msg+3,f,c
  1623  0077C2  500C               	movf	rcv_msg@i,w,c
  1624  0077C4  6E09               	movwf	(??_rcv_msg+4)& (0+255),c
  1625  0077C6  6A0A               	clrf	(??_rcv_msg+5)& (0+255),c
  1626  0077C8  5007               	movf	??_rcv_msg+2,w,c
  1627  0077CA  5C09               	subwf	??_rcv_msg+4,w,c
  1628  0077CC  500A               	movf	??_rcv_msg+5,w,c
  1629  0077CE  0A80               	xorlw	128
  1630  0077D0  6E0B               	movwf	(??_rcv_msg+6)& (0+255),c
  1631  0077D2  5008               	movf	??_rcv_msg+3,w,c
  1632  0077D4  0A80               	xorlw	128
  1633  0077D6  580B               	subwfb	(??_rcv_msg+6)& (0+255),w,c
  1634  0077D8  B0D8               	btfsc	status,0,c
  1635  0077DA  0012               	return	
  1636  0077DC  D7CB               	goto	l88
  1637  0077DE                     __end_of_rcv_msg:
  1638                           	opt stack 0
  1639                           tblptru	equ	0xFF8
  1640                           prodh	equ	0xFF4
  1641                           prodl	equ	0xFF3
  1642                           postinc0	equ	0xFEE
  1643                           wreg	equ	0xFE8
  1644                           indf1	equ	0xFE7
  1645                           plusw1	equ	0xFE3
  1646                           fsr1h	equ	0xFE2
  1647                           fsr1l	equ	0xFE1
  1648                           indf2	equ	0xFDF
  1649                           postinc2	equ	0xFDE
  1650                           postdec2	equ	0xFDD
  1651                           plusw2	equ	0xFDB
  1652                           fsr2h	equ	0xFDA
  1653                           fsr2l	equ	0xFD9
  1654                           status	equ	0xFD8
  1655                           
  1656 ;; *************** function _mk_msg *****************
  1657 ;; Defined at:
  1658 ;;		line 35 in file "comunicacao.c"
  1659 ;; Parameters:    Size  Location     Type
  1660 ;;  data            2    0[COMRAM] PTR struct .
  1661 ;;		 -> main@dados(69), 
  1662 ;;  count           1    2[COMRAM] unsigned char 
  1663 ;;  string          2    3[COMRAM] PTR unsigned char 
  1664 ;;		 -> main@msg(33), 
  1665 ;; Auto vars:     Size  Location     Type
  1666 ;;  i               1    5[COMRAM] unsigned char 
  1667 ;; Return value:  Size  Location     Type
  1668 ;;                  1    wreg      void 
  1669 ;; Registers used:
  1670 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1671 ;; Tracked objects:
  1672 ;;		On entry : 0/0
  1673 ;;		On exit  : 0/0
  1674 ;;		Unchanged: 0/0
  1675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1676 ;;      Params:         5       0       0       0       0       0       0       0       0
  1677 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1678 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1679 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1680 ;;Total ram usage:        6 bytes
  1681 ;; Hardware stack levels used:    1
  1682 ;; This function calls:
  1683 ;;		Nothing
  1684 ;; This function is called by:
  1685 ;;		_main
  1686 ;; This function uses a non-reentrant model
  1687 ;;
  1688                           
  1689                           	psect	text7
  1690  00760E                     __ptext7:
  1691                           	opt stack 0
  1692  00760E                     _mk_msg:
  1693                           	opt stack 30
  1694                           
  1695                           ;comunicacao.c: 37: data->count = count;
  1696                           
  1697                           ;incstack = 0
  1698  00760E  C001  FFD9         	movff	mk_msg@data,fsr2l
  1699  007612  C002  FFDA         	movff	mk_msg@data+1,fsr2h
  1700  007616  C003  FFDF         	movff	mk_msg@count,indf2
  1701                           
  1702                           ;comunicacao.c: 39: for (uint8_t i = 0; i < count; i++) {
  1703  00761A  0E00               	movlw	0
  1704  00761C  6E06               	movwf	mk_msg@i,c
  1705  00761E  D017               	goto	l93
  1706  007620                     
  1707                           ;comunicacao.c: 40: data->buff[i] = string[i];
  1708  007620  5006               	movf	mk_msg@i,w,c
  1709  007622  0D01               	mullw	1
  1710  007624  50F3               	movf	prodl,w,c
  1711  007626  2404               	addwf	mk_msg@string,w,c
  1712  007628  6ED9               	movwf	fsr2l,c
  1713  00762A  50F4               	movf	prodh,w,c
  1714  00762C  2005               	addwfc	mk_msg@string+1,w,c
  1715  00762E  6EDA               	movwf	fsr2h,c
  1716  007630  5006               	movf	mk_msg@i,w,c
  1717  007632  0D01               	mullw	1
  1718  007634  0E01               	movlw	1
  1719  007636  26F3               	addwf	prodl,f,c
  1720  007638  0E00               	movlw	0
  1721  00763A  22F4               	addwfc	prodh,f,c
  1722  00763C  50F3               	movf	prodl,w,c
  1723  00763E  2401               	addwf	mk_msg@data,w,c
  1724  007640  6EE1               	movwf	fsr1l,c
  1725  007642  50F4               	movf	prodh,w,c
  1726  007644  2002               	addwfc	mk_msg@data+1,w,c
  1727  007646  6EE2               	movwf	fsr1h,c
  1728  007648  CFDF FFE7          	movff	indf2,indf1
  1729  00764C  2A06               	incf	mk_msg@i,f,c
  1730  00764E                     l93:
  1731  00764E  5003               	movf	mk_msg@count,w,c
  1732  007650  5C06               	subwf	mk_msg@i,w,c
  1733  007652  B0D8               	btfsc	status,0,c
  1734  007654  0012               	return	
  1735  007656  D7E4               	goto	l94
  1736  007658                     __end_of_mk_msg:
  1737                           	opt stack 0
  1738                           tblptru	equ	0xFF8
  1739                           prodh	equ	0xFF4
  1740                           prodl	equ	0xFF3
  1741                           postinc0	equ	0xFEE
  1742                           wreg	equ	0xFE8
  1743                           indf1	equ	0xFE7
  1744                           plusw1	equ	0xFE3
  1745                           fsr1h	equ	0xFE2
  1746                           fsr1l	equ	0xFE1
  1747                           indf2	equ	0xFDF
  1748                           postinc2	equ	0xFDE
  1749                           postdec2	equ	0xFDD
  1750                           plusw2	equ	0xFDB
  1751                           fsr2h	equ	0xFDA
  1752                           fsr2l	equ	0xFD9
  1753                           status	equ	0xFD8
  1754                           
  1755 ;; *************** function _lcd_write *****************
  1756 ;; Defined at:
  1757 ;;		line 53 in file "display.c"
  1758 ;; Parameters:    Size  Location     Type
  1759 ;;  lcd             2    0[COMRAM] PTR struct .
  1760 ;;		 -> main@lcd(33), 
  1761 ;;  row             1    2[COMRAM] unsigned char 
  1762 ;;  col             1    3[COMRAM] unsigned char 
  1763 ;;  string          2    4[COMRAM] PTR unsigned char 
  1764 ;;		 -> main@msg(33), 
  1765 ;; Auto vars:     Size  Location     Type
  1766 ;;		None
  1767 ;; Return value:  Size  Location     Type
  1768 ;;                  2    0[COMRAM] int 
  1769 ;; Registers used:
  1770 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1771 ;; Tracked objects:
  1772 ;;		On entry : 0/0
  1773 ;;		On exit  : 0/0
  1774 ;;		Unchanged: 0/0
  1775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1776 ;;      Params:         6       0       0       0       0       0       0       0       0
  1777 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1778 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1779 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1780 ;;Total ram usage:        6 bytes
  1781 ;; Hardware stack levels used:    1
  1782 ;; This function calls:
  1783 ;;		Nothing
  1784 ;; This function is called by:
  1785 ;;		_main
  1786 ;; This function uses a non-reentrant model
  1787 ;;
  1788                           
  1789                           	psect	text8
  1790  007882                     __ptext8:
  1791                           	opt stack 0
  1792  007882                     _lcd_write:
  1793                           	opt stack 30
  1794                           
  1795                           ;display.c: 55: if (row == 0 || row > 2 || col == 0 || col > 16) {
  1796                           
  1797                           ;incstack = 0
  1798  007882  5003               	movf	lcd_write@row,w,c
  1799  007884  B4D8               	btfsc	status,2,c
  1800  007886  0012               	return	
  1801  007888  0E03               	movlw	3
  1802  00788A  6003               	cpfslt	lcd_write@row,c
  1803  00788C  0012               	return	
  1804  00788E  5004               	movf	lcd_write@col,w,c
  1805  007890  B4D8               	btfsc	status,2,c
  1806  007892  0012               	return	
  1807  007894  0E10               	movlw	16
  1808  007896  6404               	cpfsgt	lcd_write@col,c
  1809  007898  D001               	goto	l233
  1810  00789A  0012               	return	
  1811  00789C                     l233:
  1812                           
  1813                           ;display.c: 57: }
  1814                           ;display.c: 59: row--;
  1815  00789C  0603               	decf	lcd_write@row,f,c
  1816                           
  1817                           ;display.c: 60: col--;
  1818  00789E  0604               	decf	lcd_write@col,f,c
  1819                           
  1820                           ;display.c: 62: if (row == 0) {
  1821  0078A0  5003               	movf	lcd_write@row,w,c
  1822  0078A2  B4D8               	btfsc	status,2,c
  1823  0078A4  D016               	goto	l238
  1824  0078A6  D039               	goto	l243
  1825  0078A8                     
  1826                           ;display.c: 64: lcd->Memory[0][col++] = *string;
  1827  0078A8  C005  FFD9         	movff	lcd_write@string,fsr2l
  1828  0078AC  C006  FFDA         	movff	lcd_write@string+1,fsr2h
  1829  0078B0  5004               	movf	lcd_write@col,w,c
  1830  0078B2  0D01               	mullw	1
  1831  0078B4  0E01               	movlw	1
  1832  0078B6  26F3               	addwf	prodl,f,c
  1833  0078B8  0E00               	movlw	0
  1834  0078BA  22F4               	addwfc	prodh,f,c
  1835  0078BC  50F3               	movf	prodl,w,c
  1836  0078BE  2401               	addwf	lcd_write@lcd,w,c
  1837  0078C0  6EE1               	movwf	fsr1l,c
  1838  0078C2  50F4               	movf	prodh,w,c
  1839  0078C4  2002               	addwfc	lcd_write@lcd+1,w,c
  1840  0078C6  6EE2               	movwf	fsr1h,c
  1841  0078C8  CFDF FFE7          	movff	indf2,indf1
  1842  0078CC  2A04               	incf	lcd_write@col,f,c
  1843                           
  1844                           ;display.c: 65: string++;
  1845  0078CE  4A05               	infsnz	lcd_write@string,f,c
  1846  0078D0  2A06               	incf	lcd_write@string+1,f,c
  1847  0078D2                     l238:
  1848  0078D2  C005  FFD9         	movff	lcd_write@string,fsr2l
  1849  0078D6  C006  FFDA         	movff	lcd_write@string+1,fsr2h
  1850  0078DA  50DF               	movf	indf2,w,c
  1851  0078DC  B4D8               	btfsc	status,2,c
  1852  0078DE  D003               	goto	u1110
  1853  0078E0  0E0F               	movlw	15
  1854  0078E2  6404               	cpfsgt	lcd_write@col,c
  1855  0078E4  D7E1               	goto	l239
  1856  0078E6                     u1110:
  1857                           
  1858                           ;display.c: 66: }
  1859                           ;display.c: 67: col = 0;
  1860  0078E6  0E00               	movlw	0
  1861  0078E8  6E04               	movwf	lcd_write@col,c
  1862                           
  1863                           ;display.c: 68: row = 1;
  1864  0078EA  0E01               	movlw	1
  1865  0078EC  6E03               	movwf	lcd_write@row,c
  1866                           
  1867                           ;display.c: 69: }
  1868                           ;display.c: 72: while (*string && col <= 0x0F) {
  1869  0078EE  D015               	goto	l243
  1870  0078F0                     
  1871                           ;display.c: 73: lcd->Memory[1][col++] = *string;
  1872  0078F0  C005  FFD9         	movff	lcd_write@string,fsr2l
  1873  0078F4  C006  FFDA         	movff	lcd_write@string+1,fsr2h
  1874  0078F8  5004               	movf	lcd_write@col,w,c
  1875  0078FA  0D01               	mullw	1
  1876  0078FC  0E11               	movlw	17
  1877  0078FE  26F3               	addwf	prodl,f,c
  1878  007900  0E00               	movlw	0
  1879  007902  22F4               	addwfc	prodh,f,c
  1880  007904  50F3               	movf	prodl,w,c
  1881  007906  2401               	addwf	lcd_write@lcd,w,c
  1882  007908  6EE1               	movwf	fsr1l,c
  1883  00790A  50F4               	movf	prodh,w,c
  1884  00790C  2002               	addwfc	lcd_write@lcd+1,w,c
  1885  00790E  6EE2               	movwf	fsr1h,c
  1886  007910  CFDF FFE7          	movff	indf2,indf1
  1887  007914  2A04               	incf	lcd_write@col,f,c
  1888                           
  1889                           ;display.c: 74: string++;
  1890  007916  4A05               	infsnz	lcd_write@string,f,c
  1891  007918  2A06               	incf	lcd_write@string+1,f,c
  1892  00791A                     l243:
  1893  00791A  C005  FFD9         	movff	lcd_write@string,fsr2l
  1894  00791E  C006  FFDA         	movff	lcd_write@string+1,fsr2h
  1895  007922  50DF               	movf	indf2,w,c
  1896  007924  B4D8               	btfsc	status,2,c
  1897  007926  D003               	goto	u1130
  1898  007928  0E0F               	movlw	15
  1899  00792A  6404               	cpfsgt	lcd_write@col,c
  1900  00792C  D7E1               	goto	l244
  1901  00792E                     u1130:
  1902                           
  1903                           ;display.c: 75: }
  1904                           ;display.c: 77: lcd->NeedsRedraw = 1;
  1905  00792E  C001  FFD9         	movff	lcd_write@lcd,fsr2l
  1906  007932  C002  FFDA         	movff	lcd_write@lcd+1,fsr2h
  1907  007936  0E01               	movlw	1
  1908  007938  6EDF               	movwf	indf2,c
  1909  00793A  0012               	return	
  1910  00793C                     __end_of_lcd_write:
  1911                           	opt stack 0
  1912                           tblptru	equ	0xFF8
  1913                           prodh	equ	0xFF4
  1914                           prodl	equ	0xFF3
  1915                           postinc0	equ	0xFEE
  1916                           wreg	equ	0xFE8
  1917                           indf1	equ	0xFE7
  1918                           plusw1	equ	0xFE3
  1919                           fsr1h	equ	0xFE2
  1920                           fsr1l	equ	0xFE1
  1921                           indf2	equ	0xFDF
  1922                           postinc2	equ	0xFDE
  1923                           postdec2	equ	0xFDD
  1924                           plusw2	equ	0xFDB
  1925                           fsr2h	equ	0xFDA
  1926                           fsr2l	equ	0xFD9
  1927                           status	equ	0xFD8
  1928                           
  1929 ;; *************** function _lcd_runtime *****************
  1930 ;; Defined at:
  1931 ;;		line 82 in file "display.c"
  1932 ;; Parameters:    Size  Location     Type
  1933 ;;  lcd             2    6[COMRAM] PTR struct .
  1934 ;;		 -> main@lcd(33), 
  1935 ;; Auto vars:     Size  Location     Type
  1936 ;;  i               2   12[COMRAM] int 
  1937 ;;  i               2   10[COMRAM] int 
  1938 ;; Return value:  Size  Location     Type
  1939 ;;                  1    wreg      void 
  1940 ;; Registers used:
  1941 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1942 ;; Tracked objects:
  1943 ;;		On entry : 0/0
  1944 ;;		On exit  : 0/0
  1945 ;;		Unchanged: 0/0
  1946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1947 ;;      Params:         2       0       0       0       0       0       0       0       0
  1948 ;;      Locals:         4       0       0       0       0       0       0       0       0
  1949 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1950 ;;      Totals:         8       0       0       0       0       0       0       0       0
  1951 ;;Total ram usage:        8 bytes
  1952 ;; Hardware stack levels used:    1
  1953 ;; Hardware stack levels required when called:    2
  1954 ;; This function calls:
  1955 ;;		_BusyXLCD
  1956 ;;		_SetDDRamAddr
  1957 ;;		_WriteDataXLCD
  1958 ;;		_delay_ms
  1959 ;; This function is called by:
  1960 ;;		_main
  1961 ;; This function uses a non-reentrant model
  1962 ;;
  1963                           
  1964                           	psect	text9
  1965  00793C                     __ptext9:
  1966                           	opt stack 0
  1967  00793C                     _lcd_runtime:
  1968                           	opt stack 28
  1969                           
  1970                           ;display.c: 83: while (BusyXLCD());
  1971                           
  1972                           ;incstack = 0
  1973  00793C  EC6B  F03A         	call	_BusyXLCD	;wreg free
  1974  007940  0900               	iorlw	0
  1975  007942  A4D8               	btfss	status,2,c
  1976  007944  D7FB               	goto	_lcd_runtime
  1977                           
  1978                           ;display.c: 85: if (lcd->NeedsRedraw == 1) {
  1979  007946  C007  FFD9         	movff	lcd_runtime@lcd,fsr2l
  1980  00794A  C008  FFDA         	movff	lcd_runtime@lcd+1,fsr2h
  1981  00794E  04DE               	decf	postinc2,w,c
  1982  007950  A4D8               	btfss	status,2,c
  1983  007952  0012               	return	
  1984                           
  1985                           ;display.c: 86: SetDDRamAddr(0x00);
  1986  007954  0E00               	movlw	0
  1987  007956  EC2C  F03B         	call	_SetDDRamAddr
  1988                           
  1989                           ;display.c: 87: for (int i = 0; i < 16; i++) {
  1990  00795A  0E00               	movlw	0
  1991  00795C  6E0C               	movwf	lcd_runtime@i+1,c
  1992  00795E  0E00               	movlw	0
  1993  007960  6E0B               	movwf	lcd_runtime@i,c
  1994  007962  BE0C               	btfsc	lcd_runtime@i+1,7,c
  1995  007964  D006               	goto	l254
  1996  007966  500C               	movf	lcd_runtime@i+1,w,c
  1997  007968  E122               	bnz	l2105
  1998  00796A  0E10               	movlw	16
  1999  00796C  5C0B               	subwf	lcd_runtime@i,w,c
  2000  00796E  B0D8               	btfsc	status,0,c
  2001  007970  D01E               	goto	u1320
  2002  007972                     l254:
  2003                           
  2004                           ;display.c: 88: while (BusyXLCD());
  2005  007972  EC6B  F03A         	call	_BusyXLCD	;wreg free
  2006  007976  0900               	iorlw	0
  2007  007978  A4D8               	btfss	status,2,c
  2008  00797A  D7FB               	goto	l254
  2009                           
  2010                           ;display.c: 89: WriteDataXLCD((char) lcd->Memory[0][i]);
  2011  00797C  0E01               	movlw	1
  2012  00797E  240B               	addwf	lcd_runtime@i,w,c
  2013  007980  6E09               	movwf	??_lcd_runtime& (0+255),c
  2014  007982  0E00               	movlw	0
  2015  007984  200C               	addwfc	lcd_runtime@i+1,w,c
  2016  007986  6E0A               	movwf	(??_lcd_runtime+1)& (0+255),c
  2017  007988  5009               	movf	??_lcd_runtime,w,c
  2018  00798A  2407               	addwf	lcd_runtime@lcd,w,c
  2019  00798C  6ED9               	movwf	fsr2l,c
  2020  00798E  500A               	movf	??_lcd_runtime+1,w,c
  2021  007990  2008               	addwfc	lcd_runtime@lcd+1,w,c
  2022  007992  6EDA               	movwf	fsr2h,c
  2023  007994  50DF               	movf	indf2,w,c
  2024  007996  ECC5  F03A         	call	_WriteDataXLCD
  2025  00799A  4A0B               	infsnz	lcd_runtime@i,f,c
  2026  00799C  2A0C               	incf	lcd_runtime@i+1,f,c
  2027  00799E  BE0C               	btfsc	lcd_runtime@i+1,7,c
  2028  0079A0  D7E8               	goto	l254
  2029  0079A2  500C               	movf	lcd_runtime@i+1,w,c
  2030  0079A4  E104               	bnz	l2105
  2031  0079A6  0E10               	movlw	16
  2032  0079A8  5C0B               	subwf	lcd_runtime@i,w,c
  2033  0079AA  A0D8               	btfss	status,0,c
  2034  0079AC  D7E2               	goto	l254
  2035  0079AE                     u1320:
  2036  0079AE                     l2105:
  2037                           
  2038                           ;display.c: 90: }
  2039                           ;display.c: 91: SetDDRamAddr(0x40);
  2040  0079AE  0E40               	movlw	64
  2041  0079B0  EC2C  F03B         	call	_SetDDRamAddr
  2042                           
  2043                           ;display.c: 92: for (int i = 0; i < 16; i++) {
  2044  0079B4  0E00               	movlw	0
  2045  0079B6  6E0E               	movwf	lcd_runtime@i_640+1,c
  2046  0079B8  0E00               	movlw	0
  2047  0079BA  6E0D               	movwf	lcd_runtime@i_640,c
  2048  0079BC  BE0E               	btfsc	lcd_runtime@i_640+1,7,c
  2049  0079BE  D006               	goto	l259
  2050  0079C0  500E               	movf	lcd_runtime@i_640+1,w,c
  2051  0079C2  E122               	bnz	l2121
  2052  0079C4  0E10               	movlw	16
  2053  0079C6  5C0D               	subwf	lcd_runtime@i_640,w,c
  2054  0079C8  B0D8               	btfsc	status,0,c
  2055  0079CA  D01E               	goto	u1350
  2056  0079CC                     l259:
  2057                           
  2058                           ;display.c: 93: while (BusyXLCD());
  2059  0079CC  EC6B  F03A         	call	_BusyXLCD	;wreg free
  2060  0079D0  0900               	iorlw	0
  2061  0079D2  A4D8               	btfss	status,2,c
  2062  0079D4  D7FB               	goto	l259
  2063                           
  2064                           ;display.c: 94: WriteDataXLCD((char) lcd->Memory[1][i]);
  2065  0079D6  0E11               	movlw	17
  2066  0079D8  240D               	addwf	lcd_runtime@i_640,w,c
  2067  0079DA  6E09               	movwf	??_lcd_runtime& (0+255),c
  2068  0079DC  0E00               	movlw	0
  2069  0079DE  200E               	addwfc	lcd_runtime@i_640+1,w,c
  2070  0079E0  6E0A               	movwf	(??_lcd_runtime+1)& (0+255),c
  2071  0079E2  5009               	movf	??_lcd_runtime,w,c
  2072  0079E4  2407               	addwf	lcd_runtime@lcd,w,c
  2073  0079E6  6ED9               	movwf	fsr2l,c
  2074  0079E8  500A               	movf	??_lcd_runtime+1,w,c
  2075  0079EA  2008               	addwfc	lcd_runtime@lcd+1,w,c
  2076  0079EC  6EDA               	movwf	fsr2h,c
  2077  0079EE  50DF               	movf	indf2,w,c
  2078  0079F0  ECC5  F03A         	call	_WriteDataXLCD
  2079  0079F4  4A0D               	infsnz	lcd_runtime@i_640,f,c
  2080  0079F6  2A0E               	incf	lcd_runtime@i_640+1,f,c
  2081  0079F8  BE0E               	btfsc	lcd_runtime@i_640+1,7,c
  2082  0079FA  D7E8               	goto	l259
  2083  0079FC  500E               	movf	lcd_runtime@i_640+1,w,c
  2084  0079FE  E104               	bnz	l2121
  2085  007A00  0E10               	movlw	16
  2086  007A02  5C0D               	subwf	lcd_runtime@i_640,w,c
  2087  007A04  A0D8               	btfss	status,0,c
  2088  007A06  D7E2               	goto	l259
  2089  007A08                     u1350:
  2090  007A08                     l2121:
  2091                           
  2092                           ;display.c: 95: }
  2093                           ;display.c: 97: lcd->NeedsRedraw = 0;
  2094  007A08  C007  FFD9         	movff	lcd_runtime@lcd,fsr2l
  2095  007A0C  C008  FFDA         	movff	lcd_runtime@lcd+1,fsr2h
  2096  007A10  0E00               	movlw	0
  2097  007A12  6EDF               	movwf	indf2,c
  2098                           
  2099                           ;display.c: 98: PORTDbits.RD0 = !PORTDbits.RD0;
  2100  007A14  B083               	btfsc	3971,0,c	;volatile
  2101  007A16  D003               	goto	u1360
  2102  007A18  6A09               	clrf	??_lcd_runtime& (0+255),c
  2103  007A1A  2A09               	incf	??_lcd_runtime& (0+255),f,c
  2104  007A1C  D001               	goto	u1378
  2105  007A1E                     u1360:
  2106  007A1E  6A09               	clrf	??_lcd_runtime& (0+255),c
  2107  007A20                     u1378:
  2108  007A20  5083               	movf	3971,w,c	;volatile
  2109  007A22  1809               	xorwf	??_lcd_runtime,w,c
  2110  007A24  0BFE               	andlw	-2
  2111  007A26  1809               	xorwf	??_lcd_runtime,w,c
  2112  007A28  6E83               	movwf	3971,c	;volatile
  2113                           
  2114                           ;display.c: 99: delay_ms(200);
  2115  007A2A  0E00               	movlw	0
  2116  007A2C  6E02               	movwf	delay_ms@milis+1,c
  2117  007A2E  0EC8               	movlw	200
  2118  007A30  6E01               	movwf	delay_ms@milis,c
  2119  007A32  EC3B  F03A         	call	_delay_ms	;wreg free
  2120  007A36  0012               	return	
  2121  007A38                     __end_of_lcd_runtime:
  2122                           	opt stack 0
  2123                           tblptru	equ	0xFF8
  2124                           prodh	equ	0xFF4
  2125                           prodl	equ	0xFF3
  2126                           postinc0	equ	0xFEE
  2127                           wreg	equ	0xFE8
  2128                           indf1	equ	0xFE7
  2129                           plusw1	equ	0xFE3
  2130                           fsr1h	equ	0xFE2
  2131                           fsr1l	equ	0xFE1
  2132                           indf2	equ	0xFDF
  2133                           postinc2	equ	0xFDE
  2134                           postdec2	equ	0xFDD
  2135                           plusw2	equ	0xFDB
  2136                           fsr2h	equ	0xFDA
  2137                           fsr2l	equ	0xFD9
  2138                           status	equ	0xFD8
  2139                           
  2140 ;; *************** function _WriteDataXLCD *****************
  2141 ;; Defined at:
  2142 ;;		line 16 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\pic18\plib\XLCD\writdata.c"
  2143 ;; Parameters:    Size  Location     Type
  2144 ;;  data            1    wreg     unsigned char 
  2145 ;; Auto vars:     Size  Location     Type
  2146 ;;  data            1    2[COMRAM] unsigned char 
  2147 ;; Return value:  Size  Location     Type
  2148 ;;                  1    wreg      void 
  2149 ;; Registers used:
  2150 ;;		wreg, status,2, status,0, cstack
  2151 ;; Tracked objects:
  2152 ;;		On entry : 0/0
  2153 ;;		On exit  : 0/0
  2154 ;;		Unchanged: 0/0
  2155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2156 ;;      Params:         0       0       0       0       0       0       0       0       0
  2157 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2158 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2159 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2160 ;;Total ram usage:        1 bytes
  2161 ;; Hardware stack levels used:    1
  2162 ;; Hardware stack levels required when called:    1
  2163 ;; This function calls:
  2164 ;;		_DelayFor18TCY
  2165 ;; This function is called by:
  2166 ;;		_lcd_runtime
  2167 ;; This function uses a non-reentrant model
  2168 ;;
  2169                           
  2170                           	psect	text10
  2171  00758A                     __ptext10:
  2172                           	opt stack 0
  2173  00758A                     _WriteDataXLCD:
  2174                           	opt stack 28
  2175                           
  2176                           ;incstack = 0
  2177                           ;WriteDataXLCD@data stored from wreg
  2178  00758A  6E03               	movwf	WriteDataXLCD@data,c
  2179  00758C  0EF0               	movlw	240
  2180  00758E  1693               	andwf	3987,f,c	;volatile
  2181  007590  0EF0               	movlw	240
  2182  007592  1681               	andwf	3969,f,c	;volatile
  2183  007594  3803               	swapf	WriteDataXLCD@data,w,c
  2184  007596  0B0F               	andlw	15
  2185  007598  0B0F               	andlw	15
  2186  00759A  1281               	iorwf	3969,f,c	;volatile
  2187  00759C  8A8A               	bsf	3978,5,c	;volatile
  2188  00759E  9C8A               	bcf	3978,6,c	;volatile
  2189  0075A0  EC2B  F03A         	call	_DelayFor18TCY	;wreg free
  2190  0075A4  888A               	bsf	3978,4,c	;volatile
  2191  0075A6  EC2B  F03A         	call	_DelayFor18TCY	;wreg free
  2192  0075AA  988A               	bcf	3978,4,c	;volatile
  2193  0075AC  0EF0               	movlw	240
  2194  0075AE  1681               	andwf	3969,f,c	;volatile
  2195  0075B0  5003               	movf	WriteDataXLCD@data,w,c
  2196  0075B2  0B0F               	andlw	15
  2197  0075B4  1281               	iorwf	3969,f,c	;volatile
  2198  0075B6  EC2B  F03A         	call	_DelayFor18TCY	;wreg free
  2199  0075BA  888A               	bsf	3978,4,c	;volatile
  2200  0075BC  EC2B  F03A         	call	_DelayFor18TCY	;wreg free
  2201  0075C0  988A               	bcf	3978,4,c	;volatile
  2202  0075C2  0E0F               	movlw	15
  2203  0075C4  1293               	iorwf	3987,f,c	;volatile
  2204  0075C6  0012               	return	
  2205  0075C8                     __end_of_WriteDataXLCD:
  2206                           	opt stack 0
  2207                           tblptru	equ	0xFF8
  2208                           prodh	equ	0xFF4
  2209                           prodl	equ	0xFF3
  2210                           postinc0	equ	0xFEE
  2211                           wreg	equ	0xFE8
  2212                           indf1	equ	0xFE7
  2213                           plusw1	equ	0xFE3
  2214                           fsr1h	equ	0xFE2
  2215                           fsr1l	equ	0xFE1
  2216                           indf2	equ	0xFDF
  2217                           postinc2	equ	0xFDE
  2218                           postdec2	equ	0xFDD
  2219                           plusw2	equ	0xFDB
  2220                           fsr2h	equ	0xFDA
  2221                           fsr2l	equ	0xFD9
  2222                           status	equ	0xFD8
  2223                           
  2224 ;; *************** function _lcd_init *****************
  2225 ;; Defined at:
  2226 ;;		line 16 in file "display.c"
  2227 ;; Parameters:    Size  Location     Type
  2228 ;;  lcd             2    7[COMRAM] PTR struct .
  2229 ;;		 -> main@lcd(33), 
  2230 ;; Auto vars:     Size  Location     Type
  2231 ;;		None
  2232 ;; Return value:  Size  Location     Type
  2233 ;;                  1    wreg      void 
  2234 ;; Registers used:
  2235 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2236 ;; Tracked objects:
  2237 ;;		On entry : 0/0
  2238 ;;		On exit  : 0/0
  2239 ;;		Unchanged: 0/0
  2240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2241 ;;      Params:         2       0       0       0       0       0       0       0       0
  2242 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2243 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2244 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2245 ;;Total ram usage:        2 bytes
  2246 ;; Hardware stack levels used:    1
  2247 ;; Hardware stack levels required when called:    3
  2248 ;; This function calls:
  2249 ;;		_BusyXLCD
  2250 ;;		_OpenXLCD
  2251 ;;		_WriteCmdXLCD
  2252 ;;		_lcd_clean
  2253 ;;		_lcd_mem_clean
  2254 ;; This function is called by:
  2255 ;;		_main
  2256 ;; This function uses a non-reentrant model
  2257 ;;
  2258                           
  2259                           	psect	text11
  2260  0075C8                     __ptext11:
  2261                           	opt stack 0
  2262  0075C8                     _lcd_init:
  2263                           	opt stack 27
  2264                           
  2265                           ;display.c: 17: TRISB = 0;
  2266                           
  2267                           ;incstack = 0
  2268  0075C8  0E00               	movlw	0
  2269  0075CA  6E93               	movwf	3987,c	;volatile
  2270                           
  2271                           ;display.c: 19: OpenXLCD(0b00101100 & 0b00111000);
  2272  0075CC  0E28               	movlw	40
  2273  0075CE  ECEF  F03B         	call	_OpenXLCD
  2274  0075D2  EC6B  F03A         	call	_BusyXLCD	;wreg free
  2275  0075D6  0900               	iorlw	0
  2276  0075D8  A4D8               	btfss	status,2,c
  2277  0075DA  D7FB               	goto	l208
  2278                           
  2279                           ;display.c: 21: WriteCmdXLCD(0x06);
  2280  0075DC  0E06               	movlw	6
  2281  0075DE  ECA6  F03A         	call	_WriteCmdXLCD
  2282  0075E2  EC6B  F03A         	call	_BusyXLCD	;wreg free
  2283  0075E6  0900               	iorlw	0
  2284  0075E8  A4D8               	btfss	status,2,c
  2285  0075EA  D7FB               	goto	l211
  2286                           
  2287                           ;display.c: 23: WriteCmdXLCD(0x0C);
  2288  0075EC  0E0C               	movlw	12
  2289  0075EE  ECA6  F03A         	call	_WriteCmdXLCD
  2290  0075F2  EC6B  F03A         	call	_BusyXLCD	;wreg free
  2291  0075F6  0900               	iorlw	0
  2292  0075F8  A4D8               	btfss	status,2,c
  2293  0075FA  D7FB               	goto	l214
  2294                           
  2295                           ;display.c: 26: lcd_mem_clean(lcd);
  2296  0075FC  C008  F001         	movff	lcd_init@lcd,lcd_mem_clean@lcd
  2297  007600  C009  F002         	movff	lcd_init@lcd+1,lcd_mem_clean@lcd+1
  2298  007604  EC55  F03B         	call	_lcd_mem_clean	;wreg free
  2299                           
  2300                           ;display.c: 27: lcd_clean();
  2301  007608  EC1C  F03A         	call	_lcd_clean	;wreg free
  2302  00760C  0012               	return		;funcret
  2303  00760E                     __end_of_lcd_init:
  2304                           	opt stack 0
  2305                           tblptru	equ	0xFF8
  2306                           prodh	equ	0xFF4
  2307                           prodl	equ	0xFF3
  2308                           postinc0	equ	0xFEE
  2309                           wreg	equ	0xFE8
  2310                           indf1	equ	0xFE7
  2311                           plusw1	equ	0xFE3
  2312                           fsr1h	equ	0xFE2
  2313                           fsr1l	equ	0xFE1
  2314                           indf2	equ	0xFDF
  2315                           postinc2	equ	0xFDE
  2316                           postdec2	equ	0xFDD
  2317                           plusw2	equ	0xFDB
  2318                           fsr2h	equ	0xFDA
  2319                           fsr2l	equ	0xFD9
  2320                           status	equ	0xFD8
  2321                           
  2322 ;; *************** function _OpenXLCD *****************
  2323 ;; Defined at:
  2324 ;;		line 19 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\pic18\plib\XLCD\openxlcd.c"
  2325 ;; Parameters:    Size  Location     Type
  2326 ;;  lcdtype         1    wreg     unsigned char 
  2327 ;; Auto vars:     Size  Location     Type
  2328 ;;  lcdtype         1    6[COMRAM] unsigned char 
  2329 ;; Return value:  Size  Location     Type
  2330 ;;                  1    wreg      void 
  2331 ;; Registers used:
  2332 ;;		wreg, status,2, status,0, cstack
  2333 ;; Tracked objects:
  2334 ;;		On entry : 0/0
  2335 ;;		On exit  : 0/0
  2336 ;;		Unchanged: 0/0
  2337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2338 ;;      Params:         0       0       0       0       0       0       0       0       0
  2339 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2340 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2341 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2342 ;;Total ram usage:        1 bytes
  2343 ;; Hardware stack levels used:    1
  2344 ;; Hardware stack levels required when called:    2
  2345 ;; This function calls:
  2346 ;;		_BusyXLCD
  2347 ;;		_Delay10KTCYx
  2348 ;;		_DelayPORXLCD
  2349 ;;		_SetDDRamAddr
  2350 ;;		_WriteCmdXLCD
  2351 ;; This function is called by:
  2352 ;;		_lcd_init
  2353 ;; This function uses a non-reentrant model
  2354 ;;
  2355                           
  2356                           	psect	text12
  2357  0077DE                     __ptext12:
  2358                           	opt stack 0
  2359  0077DE                     _OpenXLCD:
  2360                           	opt stack 27
  2361                           
  2362                           ;incstack = 0
  2363                           ;OpenXLCD@lcdtype stored from wreg
  2364  0077DE  6E07               	movwf	OpenXLCD@lcdtype,c
  2365  0077E0  0EF0               	movlw	240
  2366  0077E2  1681               	andwf	3969,f,c	;volatile
  2367  0077E4  0EF0               	movlw	240
  2368  0077E6  1693               	andwf	3987,f,c	;volatile
  2369  0077E8  9C93               	bcf	3987,6,c	;volatile
  2370  0077EA  9A93               	bcf	3987,5,c	;volatile
  2371  0077EC  9893               	bcf	3987,4,c	;volatile
  2372  0077EE  9C8A               	bcf	3978,6,c	;volatile
  2373  0077F0  9A8A               	bcf	3978,5,c	;volatile
  2374  0077F2  988A               	bcf	3978,4,c	;volatile
  2375  0077F4  ECE7  F039         	call	_DelayPORXLCD	;wreg free
  2376  0077F8  0E30               	movlw	48
  2377  0077FA  ECA6  F03A         	call	_WriteCmdXLCD
  2378  0077FE  0E05               	movlw	5
  2379  007800  EC06  F03A         	call	_Delay10KTCYx
  2380  007804  0E30               	movlw	48
  2381  007806  ECA6  F03A         	call	_WriteCmdXLCD
  2382  00780A  0E01               	movlw	1
  2383  00780C  EC06  F03A         	call	_Delay10KTCYx
  2384  007810  0E32               	movlw	50
  2385  007812  ECA6  F03A         	call	_WriteCmdXLCD
  2386  007816  EC6B  F03A         	call	_BusyXLCD	;wreg free
  2387  00781A  0900               	iorlw	0
  2388  00781C  A4D8               	btfss	status,2,c
  2389  00781E  D7FB               	goto	l309
  2390  007820                     u820:
  2391  007820  EC6B  F03A         	call	_BusyXLCD	;wreg free
  2392  007824  0900               	iorlw	0
  2393  007826  A4D8               	btfss	status,2,c
  2394  007828  D7FB               	goto	u820
  2395  00782A  5007               	movf	OpenXLCD@lcdtype,w,c
  2396  00782C  ECA6  F03A         	call	_WriteCmdXLCD
  2397  007830  EC6B  F03A         	call	_BusyXLCD	;wreg free
  2398  007834  0900               	iorlw	0
  2399  007836  A4D8               	btfss	status,2,c
  2400  007838  D7FB               	goto	l315
  2401  00783A  0E08               	movlw	8
  2402  00783C  ECA6  F03A         	call	_WriteCmdXLCD
  2403  007840  EC6B  F03A         	call	_BusyXLCD	;wreg free
  2404  007844  0900               	iorlw	0
  2405  007846  A4D8               	btfss	status,2,c
  2406  007848  D7FB               	goto	l318
  2407  00784A  0E0F               	movlw	15
  2408  00784C  ECA6  F03A         	call	_WriteCmdXLCD
  2409  007850  EC6B  F03A         	call	_BusyXLCD	;wreg free
  2410  007854  0900               	iorlw	0
  2411  007856  A4D8               	btfss	status,2,c
  2412  007858  D7FB               	goto	l321
  2413  00785A  0E01               	movlw	1
  2414  00785C  ECA6  F03A         	call	_WriteCmdXLCD
  2415  007860  EC6B  F03A         	call	_BusyXLCD	;wreg free
  2416  007864  0900               	iorlw	0
  2417  007866  A4D8               	btfss	status,2,c
  2418  007868  D7FB               	goto	l324
  2419  00786A  0E04               	movlw	4
  2420  00786C  ECA6  F03A         	call	_WriteCmdXLCD
  2421  007870  EC6B  F03A         	call	_BusyXLCD	;wreg free
  2422  007874  0900               	iorlw	0
  2423  007876  A4D8               	btfss	status,2,c
  2424  007878  D7FB               	goto	l327
  2425  00787A  0E80               	movlw	128
  2426  00787C  EC2C  F03B         	call	_SetDDRamAddr
  2427  007880  0012               	return	
  2428  007882                     __end_of_OpenXLCD:
  2429                           	opt stack 0
  2430                           tblptru	equ	0xFF8
  2431                           prodh	equ	0xFF4
  2432                           prodl	equ	0xFF3
  2433                           postinc0	equ	0xFEE
  2434                           wreg	equ	0xFE8
  2435                           indf1	equ	0xFE7
  2436                           plusw1	equ	0xFE3
  2437                           fsr1h	equ	0xFE2
  2438                           fsr1l	equ	0xFE1
  2439                           indf2	equ	0xFDF
  2440                           postinc2	equ	0xFDE
  2441                           postdec2	equ	0xFDD
  2442                           plusw2	equ	0xFDB
  2443                           fsr2h	equ	0xFDA
  2444                           fsr2l	equ	0xFD9
  2445                           status	equ	0xFD8
  2446                           
  2447 ;; *************** function _SetDDRamAddr *****************
  2448 ;; Defined at:
  2449 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\pic18\plib\XLCD\setddram.c"
  2450 ;; Parameters:    Size  Location     Type
  2451 ;;  DDaddr          1    wreg     unsigned char 
  2452 ;; Auto vars:     Size  Location     Type
  2453 ;;  DDaddr          1    5[COMRAM] unsigned char 
  2454 ;; Return value:  Size  Location     Type
  2455 ;;                  1    wreg      void 
  2456 ;; Registers used:
  2457 ;;		wreg, status,2, status,0, cstack
  2458 ;; Tracked objects:
  2459 ;;		On entry : 0/0
  2460 ;;		On exit  : 0/0
  2461 ;;		Unchanged: 0/0
  2462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2463 ;;      Params:         0       0       0       0       0       0       0       0       0
  2464 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2465 ;;      Temps:          3       0       0       0       0       0       0       0       0
  2466 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2467 ;;Total ram usage:        4 bytes
  2468 ;; Hardware stack levels used:    1
  2469 ;; Hardware stack levels required when called:    1
  2470 ;; This function calls:
  2471 ;;		_DelayFor18TCY
  2472 ;; This function is called by:
  2473 ;;		_lcd_runtime
  2474 ;;		_OpenXLCD
  2475 ;; This function uses a non-reentrant model
  2476 ;;
  2477                           
  2478                           	psect	text13
  2479  007658                     __ptext13:
  2480                           	opt stack 0
  2481  007658                     _SetDDRamAddr:
  2482                           	opt stack 28
  2483                           
  2484                           ;incstack = 0
  2485                           ;SetDDRamAddr@DDaddr stored from wreg
  2486  007658  6E06               	movwf	SetDDRamAddr@DDaddr,c
  2487  00765A  0EF0               	movlw	240
  2488  00765C  1693               	andwf	3987,f,c	;volatile
  2489  00765E  0EF0               	movlw	240
  2490  007660  1681               	andwf	3969,f,c	;volatile
  2491  007662  5006               	movf	SetDDRamAddr@DDaddr,w,c
  2492  007664  6E03               	movwf	??_SetDDRamAddr& (0+255),c
  2493  007666  6A04               	clrf	(??_SetDDRamAddr+1)& (0+255),c
  2494  007668  8E03               	bsf	??_SetDDRamAddr,7,c
  2495  00766A  0E04               	movlw	4
  2496  00766C  6E05               	movwf	(??_SetDDRamAddr+2)& (0+255),c
  2497  00766E                     u775:
  2498  00766E  3404               	rlcf	??_SetDDRamAddr+1,w,c
  2499  007670  3204               	rrcf	??_SetDDRamAddr+1,f,c
  2500  007672  3203               	rrcf	??_SetDDRamAddr,f,c
  2501  007674  2E05               	decfsz	(??_SetDDRamAddr+2)& (0+255),f,c
  2502  007676  D7FB               	goto	u775
  2503  007678  5003               	movf	??_SetDDRamAddr,w,c
  2504  00767A  0B0F               	andlw	15
  2505  00767C  1281               	iorwf	3969,f,c	;volatile
  2506  00767E  9C8A               	bcf	3978,6,c	;volatile
  2507  007680  9A8A               	bcf	3978,5,c	;volatile
  2508  007682  EC2B  F03A         	call	_DelayFor18TCY	;wreg free
  2509  007686  888A               	bsf	3978,4,c	;volatile
  2510  007688  EC2B  F03A         	call	_DelayFor18TCY	;wreg free
  2511  00768C  988A               	bcf	3978,4,c	;volatile
  2512  00768E  0EF0               	movlw	240
  2513  007690  1681               	andwf	3969,f,c	;volatile
  2514  007692  5006               	movf	SetDDRamAddr@DDaddr,w,c
  2515  007694  0B0F               	andlw	15
  2516  007696  1281               	iorwf	3969,f,c	;volatile
  2517  007698  EC2B  F03A         	call	_DelayFor18TCY	;wreg free
  2518  00769C  888A               	bsf	3978,4,c	;volatile
  2519  00769E  EC2B  F03A         	call	_DelayFor18TCY	;wreg free
  2520  0076A2  988A               	bcf	3978,4,c	;volatile
  2521  0076A4  0E0F               	movlw	15
  2522  0076A6  1293               	iorwf	3987,f,c	;volatile
  2523  0076A8  0012               	return	
  2524  0076AA                     __end_of_SetDDRamAddr:
  2525                           	opt stack 0
  2526                           tblptru	equ	0xFF8
  2527                           prodh	equ	0xFF4
  2528                           prodl	equ	0xFF3
  2529                           postinc0	equ	0xFEE
  2530                           wreg	equ	0xFE8
  2531                           indf1	equ	0xFE7
  2532                           plusw1	equ	0xFE3
  2533                           fsr1h	equ	0xFE2
  2534                           fsr1l	equ	0xFE1
  2535                           indf2	equ	0xFDF
  2536                           postinc2	equ	0xFDE
  2537                           postdec2	equ	0xFDD
  2538                           plusw2	equ	0xFDB
  2539                           fsr2h	equ	0xFDA
  2540                           fsr2l	equ	0xFD9
  2541                           status	equ	0xFD8
  2542                           
  2543 ;; *************** function _DelayPORXLCD *****************
  2544 ;; Defined at:
  2545 ;;		line 111 in file "display.c"
  2546 ;; Parameters:    Size  Location     Type
  2547 ;;		None
  2548 ;; Auto vars:     Size  Location     Type
  2549 ;;		None
  2550 ;; Return value:  Size  Location     Type
  2551 ;;                  1    wreg      void 
  2552 ;; Registers used:
  2553 ;;		wreg, status,2, status,0, cstack
  2554 ;; Tracked objects:
  2555 ;;		On entry : 0/0
  2556 ;;		On exit  : 0/0
  2557 ;;		Unchanged: 0/0
  2558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2559 ;;      Params:         0       0       0       0       0       0       0       0       0
  2560 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2561 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2562 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2563 ;;Total ram usage:        0 bytes
  2564 ;; Hardware stack levels used:    1
  2565 ;; Hardware stack levels required when called:    1
  2566 ;; This function calls:
  2567 ;;		_delay_ms
  2568 ;; This function is called by:
  2569 ;;		_OpenXLCD
  2570 ;; This function uses a non-reentrant model
  2571 ;;
  2572                           
  2573                           	psect	text14
  2574  0073CE                     __ptext14:
  2575                           	opt stack 0
  2576  0073CE                     _DelayPORXLCD:
  2577                           	opt stack 27
  2578                           
  2579                           ;display.c: 112: delay_ms(60);
  2580                           
  2581                           ;incstack = 0
  2582  0073CE  0E00               	movlw	0
  2583  0073D0  6E02               	movwf	delay_ms@milis+1,c
  2584  0073D2  0E3C               	movlw	60
  2585  0073D4  6E01               	movwf	delay_ms@milis,c
  2586  0073D6  EC3B  F03A         	call	_delay_ms	;wreg free
  2587  0073DA  0012               	return		;funcret
  2588  0073DC                     __end_of_DelayPORXLCD:
  2589                           	opt stack 0
  2590                           tblptru	equ	0xFF8
  2591                           prodh	equ	0xFF4
  2592                           prodl	equ	0xFF3
  2593                           postinc0	equ	0xFEE
  2594                           wreg	equ	0xFE8
  2595                           indf1	equ	0xFE7
  2596                           plusw1	equ	0xFE3
  2597                           fsr1h	equ	0xFE2
  2598                           fsr1l	equ	0xFE1
  2599                           indf2	equ	0xFDF
  2600                           postinc2	equ	0xFDE
  2601                           postdec2	equ	0xFDD
  2602                           plusw2	equ	0xFDB
  2603                           fsr2h	equ	0xFDA
  2604                           fsr2l	equ	0xFD9
  2605                           status	equ	0xFD8
  2606                           
  2607 ;; *************** function _Delay10KTCYx *****************
  2608 ;; Defined at:
  2609 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\pic18\d10ktcyx.c"
  2610 ;; Parameters:    Size  Location     Type
  2611 ;;  unit            1    wreg     unsigned char 
  2612 ;; Auto vars:     Size  Location     Type
  2613 ;;  unit            1    1[COMRAM] unsigned char 
  2614 ;; Return value:  Size  Location     Type
  2615 ;;                  1    wreg      void 
  2616 ;; Registers used:
  2617 ;;		wreg
  2618 ;; Tracked objects:
  2619 ;;		On entry : 0/0
  2620 ;;		On exit  : 0/0
  2621 ;;		Unchanged: 0/0
  2622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2623 ;;      Params:         0       0       0       0       0       0       0       0       0
  2624 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2625 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2626 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2627 ;;Total ram usage:        2 bytes
  2628 ;; Hardware stack levels used:    1
  2629 ;; This function calls:
  2630 ;;		Nothing
  2631 ;; This function is called by:
  2632 ;;		_OpenXLCD
  2633 ;; This function uses a non-reentrant model
  2634 ;;
  2635                           
  2636                           	psect	text15
  2637  00740C                     __ptext15:
  2638                           	opt stack 0
  2639  00740C                     _Delay10KTCYx:
  2640                           	opt stack 28
  2641                           
  2642                           ;incstack = 0
  2643                           ;Delay10KTCYx@unit stored from wreg
  2644  00740C  6E02               	movwf	Delay10KTCYx@unit,c
  2645  00740E                     l564:
  2646  00740E  0E0D               	movlw	13
  2647  007410  6E01               	movwf	??_Delay10KTCYx& (0+255),c
  2648  007412  0EFC               	movlw	252
  2649  007414                     u1457:
  2650  007414  2EE8               	decfsz	wreg,f,c
  2651  007416  D7FE               	bra	u1457
  2652  007418  2E01               	decfsz	??_Delay10KTCYx& (0+255),f,c
  2653  00741A  D7FC               	bra	u1457
  2654  00741C  2E02               	decfsz	Delay10KTCYx@unit,f,c
  2655  00741E  D7F7               	goto	l564
  2656  007420  0012               	return	
  2657  007422                     __end_of_Delay10KTCYx:
  2658                           	opt stack 0
  2659                           tblptru	equ	0xFF8
  2660                           prodh	equ	0xFF4
  2661                           prodl	equ	0xFF3
  2662                           postinc0	equ	0xFEE
  2663                           wreg	equ	0xFE8
  2664                           indf1	equ	0xFE7
  2665                           plusw1	equ	0xFE3
  2666                           fsr1h	equ	0xFE2
  2667                           fsr1l	equ	0xFE1
  2668                           indf2	equ	0xFDF
  2669                           postinc2	equ	0xFDE
  2670                           postdec2	equ	0xFDD
  2671                           plusw2	equ	0xFDB
  2672                           fsr2h	equ	0xFDA
  2673                           fsr2l	equ	0xFD9
  2674                           status	equ	0xFD8
  2675                           
  2676 ;; *************** function _lcd_clean_all *****************
  2677 ;; Defined at:
  2678 ;;		line 47 in file "display.c"
  2679 ;; Parameters:    Size  Location     Type
  2680 ;;  lcd             2    5[COMRAM] PTR struct .
  2681 ;;		 -> main@lcd(33), 
  2682 ;; Auto vars:     Size  Location     Type
  2683 ;;		None
  2684 ;; Return value:  Size  Location     Type
  2685 ;;                  1    wreg      void 
  2686 ;; Registers used:
  2687 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2688 ;; Tracked objects:
  2689 ;;		On entry : 0/0
  2690 ;;		On exit  : 0/0
  2691 ;;		Unchanged: 0/0
  2692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2693 ;;      Params:         2       0       0       0       0       0       0       0       0
  2694 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2695 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2696 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2697 ;;Total ram usage:        2 bytes
  2698 ;; Hardware stack levels used:    1
  2699 ;; Hardware stack levels required when called:    3
  2700 ;; This function calls:
  2701 ;;		_lcd_clean
  2702 ;;		_lcd_mem_clean
  2703 ;; This function is called by:
  2704 ;;		_main
  2705 ;; This function uses a non-reentrant model
  2706 ;;
  2707                           
  2708                           	psect	text16
  2709  0073FA                     __ptext16:
  2710                           	opt stack 0
  2711  0073FA                     _lcd_clean_all:
  2712                           	opt stack 27
  2713                           
  2714                           ;display.c: 48: lcd_clean();
  2715                           
  2716                           ;incstack = 0
  2717  0073FA  EC1C  F03A         	call	_lcd_clean	;wreg free
  2718                           
  2719                           ;display.c: 49: lcd_mem_clean(lcd);
  2720  0073FE  C006  F001         	movff	lcd_clean_all@lcd,lcd_mem_clean@lcd
  2721  007402  C007  F002         	movff	lcd_clean_all@lcd+1,lcd_mem_clean@lcd+1
  2722  007406  EC55  F03B         	call	_lcd_mem_clean	;wreg free
  2723  00740A  0012               	return		;funcret
  2724  00740C                     __end_of_lcd_clean_all:
  2725                           	opt stack 0
  2726                           tblptru	equ	0xFF8
  2727                           prodh	equ	0xFF4
  2728                           prodl	equ	0xFF3
  2729                           postinc0	equ	0xFEE
  2730                           wreg	equ	0xFE8
  2731                           indf1	equ	0xFE7
  2732                           plusw1	equ	0xFE3
  2733                           fsr1h	equ	0xFE2
  2734                           fsr1l	equ	0xFE1
  2735                           indf2	equ	0xFDF
  2736                           postinc2	equ	0xFDE
  2737                           postdec2	equ	0xFDD
  2738                           plusw2	equ	0xFDB
  2739                           fsr2h	equ	0xFDA
  2740                           fsr2l	equ	0xFD9
  2741                           status	equ	0xFD8
  2742                           
  2743 ;; *************** function _lcd_mem_clean *****************
  2744 ;; Defined at:
  2745 ;;		line 39 in file "display.c"
  2746 ;; Parameters:    Size  Location     Type
  2747 ;;  lcd             2    0[COMRAM] PTR struct .
  2748 ;;		 -> main@lcd(33), 
  2749 ;; Auto vars:     Size  Location     Type
  2750 ;;  i               1    2[COMRAM] unsigned char 
  2751 ;; Return value:  Size  Location     Type
  2752 ;;                  1    wreg      void 
  2753 ;; Registers used:
  2754 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2755 ;; Tracked objects:
  2756 ;;		On entry : 0/0
  2757 ;;		On exit  : 0/0
  2758 ;;		Unchanged: 0/0
  2759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2760 ;;      Params:         2       0       0       0       0       0       0       0       0
  2761 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2762 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2763 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2764 ;;Total ram usage:        3 bytes
  2765 ;; Hardware stack levels used:    1
  2766 ;; This function calls:
  2767 ;;		Nothing
  2768 ;; This function is called by:
  2769 ;;		_lcd_init
  2770 ;;		_lcd_clean_all
  2771 ;; This function uses a non-reentrant model
  2772 ;;
  2773                           
  2774                           	psect	text17
  2775  0076AA                     __ptext17:
  2776                           	opt stack 0
  2777  0076AA                     _lcd_mem_clean:
  2778                           	opt stack 29
  2779                           
  2780                           ;display.c: 40: for (uint8_t i = 0; i < 16; i++) {
  2781                           
  2782                           ;incstack = 0
  2783  0076AA  0E00               	movlw	0
  2784  0076AC  6E03               	movwf	lcd_mem_clean@i,c
  2785  0076AE                     l1809:
  2786  0076AE  0E0F               	movlw	15
  2787  0076B0  6403               	cpfsgt	lcd_mem_clean@i,c
  2788  0076B2  D001               	goto	l225
  2789  0076B4  D01E               	goto	u900
  2790  0076B6                     l225:
  2791                           
  2792                           ;display.c: 41: lcd->Memory[0][i] = 0x20;
  2793  0076B6  5003               	movf	lcd_mem_clean@i,w,c
  2794  0076B8  0D01               	mullw	1
  2795  0076BA  0E01               	movlw	1
  2796  0076BC  26F3               	addwf	prodl,f,c
  2797  0076BE  0E00               	movlw	0
  2798  0076C0  22F4               	addwfc	prodh,f,c
  2799  0076C2  50F3               	movf	prodl,w,c
  2800  0076C4  2401               	addwf	lcd_mem_clean@lcd,w,c
  2801  0076C6  6ED9               	movwf	fsr2l,c
  2802  0076C8  50F4               	movf	prodh,w,c
  2803  0076CA  2002               	addwfc	lcd_mem_clean@lcd+1,w,c
  2804  0076CC  6EDA               	movwf	fsr2h,c
  2805  0076CE  0E20               	movlw	32
  2806  0076D0  6EDF               	movwf	indf2,c
  2807                           
  2808                           ;display.c: 42: lcd->Memory[1][i] = 0x20;
  2809  0076D2  5003               	movf	lcd_mem_clean@i,w,c
  2810  0076D4  0D01               	mullw	1
  2811  0076D6  0E11               	movlw	17
  2812  0076D8  26F3               	addwf	prodl,f,c
  2813  0076DA  0E00               	movlw	0
  2814  0076DC  22F4               	addwfc	prodh,f,c
  2815  0076DE  50F3               	movf	prodl,w,c
  2816  0076E0  2401               	addwf	lcd_mem_clean@lcd,w,c
  2817  0076E2  6ED9               	movwf	fsr2l,c
  2818  0076E4  50F4               	movf	prodh,w,c
  2819  0076E6  2002               	addwfc	lcd_mem_clean@lcd+1,w,c
  2820  0076E8  6EDA               	movwf	fsr2h,c
  2821  0076EA  0E20               	movlw	32
  2822  0076EC  6EDF               	movwf	indf2,c
  2823  0076EE  2A03               	incf	lcd_mem_clean@i,f,c
  2824  0076F0  D7DE               	goto	l1809
  2825  0076F2                     u900:
  2826                           
  2827                           ;display.c: 43: }
  2828                           ;display.c: 44: lcd->NeedsRedraw = 1;
  2829  0076F2  C001  FFD9         	movff	lcd_mem_clean@lcd,fsr2l
  2830  0076F6  C002  FFDA         	movff	lcd_mem_clean@lcd+1,fsr2h
  2831  0076FA  0E01               	movlw	1
  2832  0076FC  6EDF               	movwf	indf2,c
  2833  0076FE  0012               	return		;funcret
  2834  007700                     __end_of_lcd_mem_clean:
  2835                           	opt stack 0
  2836                           tblptru	equ	0xFF8
  2837                           prodh	equ	0xFF4
  2838                           prodl	equ	0xFF3
  2839                           postinc0	equ	0xFEE
  2840                           wreg	equ	0xFE8
  2841                           indf1	equ	0xFE7
  2842                           plusw1	equ	0xFE3
  2843                           fsr1h	equ	0xFE2
  2844                           fsr1l	equ	0xFE1
  2845                           indf2	equ	0xFDF
  2846                           postinc2	equ	0xFDE
  2847                           postdec2	equ	0xFDD
  2848                           plusw2	equ	0xFDB
  2849                           fsr2h	equ	0xFDA
  2850                           fsr2l	equ	0xFD9
  2851                           status	equ	0xFD8
  2852                           
  2853 ;; *************** function _lcd_clean *****************
  2854 ;; Defined at:
  2855 ;;		line 31 in file "display.c"
  2856 ;; Parameters:    Size  Location     Type
  2857 ;;		None
  2858 ;; Auto vars:     Size  Location     Type
  2859 ;;		None
  2860 ;; Return value:  Size  Location     Type
  2861 ;;                  1    wreg      void 
  2862 ;; Registers used:
  2863 ;;		wreg, status,2, status,0, cstack
  2864 ;; Tracked objects:
  2865 ;;		On entry : 0/0
  2866 ;;		On exit  : 0/0
  2867 ;;		Unchanged: 0/0
  2868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2869 ;;      Params:         0       0       0       0       0       0       0       0       0
  2870 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2871 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2872 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2873 ;;Total ram usage:        0 bytes
  2874 ;; Hardware stack levels used:    1
  2875 ;; Hardware stack levels required when called:    2
  2876 ;; This function calls:
  2877 ;;		_BusyXLCD
  2878 ;;		_WriteCmdXLCD
  2879 ;;		_delay_ms
  2880 ;; This function is called by:
  2881 ;;		_lcd_init
  2882 ;;		_lcd_clean_all
  2883 ;; This function uses a non-reentrant model
  2884 ;;
  2885                           
  2886                           	psect	text18
  2887  007438                     __ptext18:
  2888                           	opt stack 0
  2889  007438                     _lcd_clean:
  2890                           	opt stack 27
  2891                           
  2892                           ;display.c: 32: while (BusyXLCD());
  2893                           
  2894                           ;incstack = 0
  2895  007438  EC6B  F03A         	call	_BusyXLCD	;wreg free
  2896  00743C  0900               	iorlw	0
  2897  00743E  A4D8               	btfss	status,2,c
  2898  007440  D7FB               	goto	_lcd_clean
  2899                           
  2900                           ;display.c: 33: WriteCmdXLCD(0x01);
  2901  007442  0E01               	movlw	1
  2902  007444  ECA6  F03A         	call	_WriteCmdXLCD
  2903                           
  2904                           ;display.c: 35: delay_ms(80);
  2905  007448  0E00               	movlw	0
  2906  00744A  6E02               	movwf	delay_ms@milis+1,c
  2907  00744C  0E50               	movlw	80
  2908  00744E  6E01               	movwf	delay_ms@milis,c
  2909  007450  EC3B  F03A         	call	_delay_ms	;wreg free
  2910  007454  0012               	return		;funcret
  2911  007456                     __end_of_lcd_clean:
  2912                           	opt stack 0
  2913                           tblptru	equ	0xFF8
  2914                           prodh	equ	0xFF4
  2915                           prodl	equ	0xFF3
  2916                           postinc0	equ	0xFEE
  2917                           wreg	equ	0xFE8
  2918                           indf1	equ	0xFE7
  2919                           plusw1	equ	0xFE3
  2920                           fsr1h	equ	0xFE2
  2921                           fsr1l	equ	0xFE1
  2922                           indf2	equ	0xFDF
  2923                           postinc2	equ	0xFDE
  2924                           postdec2	equ	0xFDD
  2925                           plusw2	equ	0xFDB
  2926                           fsr2h	equ	0xFDA
  2927                           fsr2l	equ	0xFD9
  2928                           status	equ	0xFD8
  2929                           
  2930 ;; *************** function _delay_ms *****************
  2931 ;; Defined at:
  2932 ;;		line 172 in file "main.c"
  2933 ;; Parameters:    Size  Location     Type
  2934 ;;  milis           2    0[COMRAM] unsigned int 
  2935 ;; Auto vars:     Size  Location     Type
  2936 ;;  t               2    3[COMRAM] unsigned int 
  2937 ;; Return value:  Size  Location     Type
  2938 ;;                  1    wreg      void 
  2939 ;; Registers used:
  2940 ;;		wreg, status,2, status,0
  2941 ;; Tracked objects:
  2942 ;;		On entry : 0/0
  2943 ;;		On exit  : 0/0
  2944 ;;		Unchanged: 0/0
  2945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2946 ;;      Params:         2       0       0       0       0       0       0       0       0
  2947 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2948 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2949 ;;      Totals:         5       0       0       0       0       0       0       0       0
  2950 ;;Total ram usage:        5 bytes
  2951 ;; Hardware stack levels used:    1
  2952 ;; This function calls:
  2953 ;;		Nothing
  2954 ;; This function is called by:
  2955 ;;		_lcd_clean
  2956 ;;		_lcd_runtime
  2957 ;;		_DelayPORXLCD
  2958 ;;		_DelayXLCD
  2959 ;; This function uses a non-reentrant model
  2960 ;;
  2961                           
  2962                           	psect	text19
  2963  007476                     __ptext19:
  2964                           	opt stack 0
  2965  007476                     _delay_ms:
  2966                           	opt stack 29
  2967                           
  2968                           ;main.c: 174: for (uint16_t t = 0; t < milis; t++) {
  2969                           
  2970                           ;incstack = 0
  2971  007476  0E00               	movlw	0
  2972  007478  6E05               	movwf	delay_ms@t+1,c
  2973  00747A  0E00               	movlw	0
  2974  00747C  6E04               	movwf	delay_ms@t,c
  2975  00747E  D009               	goto	l75
  2976  007480                     
  2977                           ;main.c: 175: _delay((unsigned long)((1)*(8000000/4000.0)));
  2978  007480  0E03               	movlw	3
  2979  007482  6E03               	movwf	??_delay_ms& (0+255),c
  2980  007484  0E98               	movlw	152
  2981  007486                     u1467:
  2982  007486  2EE8               	decfsz	wreg,f,c
  2983  007488  D7FE               	bra	u1467
  2984  00748A  2E03               	decfsz	??_delay_ms& (0+255),f,c
  2985  00748C  D7FC               	bra	u1467
  2986  00748E  4A04               	infsnz	delay_ms@t,f,c
  2987  007490  2A05               	incf	delay_ms@t+1,f,c
  2988  007492                     l75:
  2989  007492  5001               	movf	delay_ms@milis,w,c
  2990  007494  5C04               	subwf	delay_ms@t,w,c
  2991  007496  5002               	movf	delay_ms@milis+1,w,c
  2992  007498  5805               	subwfb	delay_ms@t+1,w,c
  2993  00749A  B0D8               	btfsc	status,0,c
  2994  00749C  0012               	return	
  2995  00749E  D7F0               	goto	l76
  2996  0074A0                     __end_of_delay_ms:
  2997                           	opt stack 0
  2998                           tblptru	equ	0xFF8
  2999                           prodh	equ	0xFF4
  3000                           prodl	equ	0xFF3
  3001                           postinc0	equ	0xFEE
  3002                           wreg	equ	0xFE8
  3003                           indf1	equ	0xFE7
  3004                           plusw1	equ	0xFE3
  3005                           fsr1h	equ	0xFE2
  3006                           fsr1l	equ	0xFE1
  3007                           indf2	equ	0xFDF
  3008                           postinc2	equ	0xFDE
  3009                           postdec2	equ	0xFDD
  3010                           plusw2	equ	0xFDB
  3011                           fsr2h	equ	0xFDA
  3012                           fsr2l	equ	0xFD9
  3013                           status	equ	0xFD8
  3014                           
  3015 ;; *************** function _WriteCmdXLCD *****************
  3016 ;; Defined at:
  3017 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\pic18\plib\XLCD\wcmdxlcd.c"
  3018 ;; Parameters:    Size  Location     Type
  3019 ;;  cmd             1    wreg     unsigned char 
  3020 ;; Auto vars:     Size  Location     Type
  3021 ;;  cmd             1    2[COMRAM] unsigned char 
  3022 ;; Return value:  Size  Location     Type
  3023 ;;                  1    wreg      void 
  3024 ;; Registers used:
  3025 ;;		wreg, status,2, status,0, cstack
  3026 ;; Tracked objects:
  3027 ;;		On entry : 0/0
  3028 ;;		On exit  : 0/0
  3029 ;;		Unchanged: 0/0
  3030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3031 ;;      Params:         0       0       0       0       0       0       0       0       0
  3032 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3033 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3034 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3035 ;;Total ram usage:        1 bytes
  3036 ;; Hardware stack levels used:    1
  3037 ;; Hardware stack levels required when called:    1
  3038 ;; This function calls:
  3039 ;;		_DelayFor18TCY
  3040 ;; This function is called by:
  3041 ;;		_lcd_init
  3042 ;;		_lcd_clean
  3043 ;;		_OpenXLCD
  3044 ;; This function uses a non-reentrant model
  3045 ;;
  3046                           
  3047                           	psect	text20
  3048  00754C                     __ptext20:
  3049                           	opt stack 0
  3050  00754C                     _WriteCmdXLCD:
  3051                           	opt stack 27
  3052                           
  3053                           ;incstack = 0
  3054                           ;WriteCmdXLCD@cmd stored from wreg
  3055  00754C  6E03               	movwf	WriteCmdXLCD@cmd,c
  3056  00754E  0EF0               	movlw	240
  3057  007550  1693               	andwf	3987,f,c	;volatile
  3058  007552  0EF0               	movlw	240
  3059  007554  1681               	andwf	3969,f,c	;volatile
  3060  007556  3803               	swapf	WriteCmdXLCD@cmd,w,c
  3061  007558  0B0F               	andlw	15
  3062  00755A  0B0F               	andlw	15
  3063  00755C  1281               	iorwf	3969,f,c	;volatile
  3064  00755E  9C8A               	bcf	3978,6,c	;volatile
  3065  007560  9A8A               	bcf	3978,5,c	;volatile
  3066  007562  EC2B  F03A         	call	_DelayFor18TCY	;wreg free
  3067  007566  888A               	bsf	3978,4,c	;volatile
  3068  007568  EC2B  F03A         	call	_DelayFor18TCY	;wreg free
  3069  00756C  988A               	bcf	3978,4,c	;volatile
  3070  00756E  0EF0               	movlw	240
  3071  007570  1681               	andwf	3969,f,c	;volatile
  3072  007572  5003               	movf	WriteCmdXLCD@cmd,w,c
  3073  007574  0B0F               	andlw	15
  3074  007576  1281               	iorwf	3969,f,c	;volatile
  3075  007578  EC2B  F03A         	call	_DelayFor18TCY	;wreg free
  3076  00757C  888A               	bsf	3978,4,c	;volatile
  3077  00757E  EC2B  F03A         	call	_DelayFor18TCY	;wreg free
  3078  007582  988A               	bcf	3978,4,c	;volatile
  3079  007584  0E0F               	movlw	15
  3080  007586  1293               	iorwf	3987,f,c	;volatile
  3081  007588  0012               	return	
  3082  00758A                     __end_of_WriteCmdXLCD:
  3083                           	opt stack 0
  3084                           tblptru	equ	0xFF8
  3085                           prodh	equ	0xFF4
  3086                           prodl	equ	0xFF3
  3087                           postinc0	equ	0xFEE
  3088                           wreg	equ	0xFE8
  3089                           indf1	equ	0xFE7
  3090                           plusw1	equ	0xFE3
  3091                           fsr1h	equ	0xFE2
  3092                           fsr1l	equ	0xFE1
  3093                           indf2	equ	0xFDF
  3094                           postinc2	equ	0xFDE
  3095                           postdec2	equ	0xFDD
  3096                           plusw2	equ	0xFDB
  3097                           fsr2h	equ	0xFDA
  3098                           fsr2l	equ	0xFD9
  3099                           status	equ	0xFD8
  3100                           
  3101 ;; *************** function _BusyXLCD *****************
  3102 ;; Defined at:
  3103 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\pic18\plib\XLCD\busyxlcd.c"
  3104 ;; Parameters:    Size  Location     Type
  3105 ;;		None
  3106 ;; Auto vars:     Size  Location     Type
  3107 ;;		None
  3108 ;; Return value:  Size  Location     Type
  3109 ;;                  1    wreg      unsigned char 
  3110 ;; Registers used:
  3111 ;;		wreg, status,2, status,0, cstack
  3112 ;; Tracked objects:
  3113 ;;		On entry : 0/0
  3114 ;;		On exit  : 0/0
  3115 ;;		Unchanged: 0/0
  3116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3117 ;;      Params:         0       0       0       0       0       0       0       0       0
  3118 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3119 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3120 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3121 ;;Total ram usage:        0 bytes
  3122 ;; Hardware stack levels used:    1
  3123 ;; Hardware stack levels required when called:    1
  3124 ;; This function calls:
  3125 ;;		_DelayFor18TCY
  3126 ;; This function is called by:
  3127 ;;		_lcd_init
  3128 ;;		_lcd_clean
  3129 ;;		_lcd_runtime
  3130 ;;		_OpenXLCD
  3131 ;; This function uses a non-reentrant model
  3132 ;;
  3133                           
  3134                           	psect	text21
  3135  0074D6                     __ptext21:
  3136                           	opt stack 0
  3137  0074D6                     _BusyXLCD:
  3138                           	opt stack 28
  3139                           
  3140                           ;incstack = 0
  3141  0074D6  8C8A               	bsf	3978,6,c	;volatile
  3142  0074D8  9A8A               	bcf	3978,5,c	;volatile
  3143  0074DA  EC2B  F03A         	call	_DelayFor18TCY	;wreg free
  3144  0074DE  888A               	bsf	3978,4,c	;volatile
  3145  0074E0  EC2B  F03A         	call	_DelayFor18TCY	;wreg free
  3146  0074E4  A681               	btfss	3969,3,c	;volatile
  3147  0074E6  D00A               	goto	l285
  3148  0074E8  988A               	bcf	3978,4,c	;volatile
  3149  0074EA  EC2B  F03A         	call	_DelayFor18TCY	;wreg free
  3150  0074EE  888A               	bsf	3978,4,c	;volatile
  3151  0074F0  EC2B  F03A         	call	_DelayFor18TCY	;wreg free
  3152  0074F4  988A               	bcf	3978,4,c	;volatile
  3153  0074F6  9C8A               	bcf	3978,6,c	;volatile
  3154  0074F8  0E01               	movlw	1
  3155  0074FA  0012               	return	
  3156  0074FC                     l285:
  3157  0074FC  988A               	bcf	3978,4,c	;volatile
  3158  0074FE  EC2B  F03A         	call	_DelayFor18TCY	;wreg free
  3159  007502  888A               	bsf	3978,4,c	;volatile
  3160  007504  EC2B  F03A         	call	_DelayFor18TCY	;wreg free
  3161  007508  988A               	bcf	3978,4,c	;volatile
  3162  00750A  9C8A               	bcf	3978,6,c	;volatile
  3163  00750C  0E00               	movlw	0
  3164  00750E  0012               	return	
  3165  007510                     __end_of_BusyXLCD:
  3166                           	opt stack 0
  3167                           tblptru	equ	0xFF8
  3168                           prodh	equ	0xFF4
  3169                           prodl	equ	0xFF3
  3170                           postinc0	equ	0xFEE
  3171                           wreg	equ	0xFE8
  3172                           indf1	equ	0xFE7
  3173                           plusw1	equ	0xFE3
  3174                           fsr1h	equ	0xFE2
  3175                           fsr1l	equ	0xFE1
  3176                           indf2	equ	0xFDF
  3177                           postinc2	equ	0xFDE
  3178                           postdec2	equ	0xFDD
  3179                           plusw2	equ	0xFDB
  3180                           fsr2h	equ	0xFDA
  3181                           fsr2l	equ	0xFD9
  3182                           status	equ	0xFD8
  3183                           
  3184 ;; *************** function _DelayFor18TCY *****************
  3185 ;; Defined at:
  3186 ;;		line 105 in file "display.c"
  3187 ;; Parameters:    Size  Location     Type
  3188 ;;		None
  3189 ;; Auto vars:     Size  Location     Type
  3190 ;;  i               2    0[COMRAM] int 
  3191 ;; Return value:  Size  Location     Type
  3192 ;;                  1    wreg      void 
  3193 ;; Registers used:
  3194 ;;		wreg, status,2, status,0
  3195 ;; Tracked objects:
  3196 ;;		On entry : 0/0
  3197 ;;		On exit  : 0/0
  3198 ;;		Unchanged: 0/0
  3199 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3200 ;;      Params:         0       0       0       0       0       0       0       0       0
  3201 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3202 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3203 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3204 ;;Total ram usage:        2 bytes
  3205 ;; Hardware stack levels used:    1
  3206 ;; This function calls:
  3207 ;;		Nothing
  3208 ;; This function is called by:
  3209 ;;		_BusyXLCD
  3210 ;;		_SetDDRamAddr
  3211 ;;		_WriteCmdXLCD
  3212 ;;		_WriteDataXLCD
  3213 ;; This function uses a non-reentrant model
  3214 ;;
  3215                           
  3216                           	psect	text22
  3217  007456                     __ptext22:
  3218                           	opt stack 0
  3219  007456                     _DelayFor18TCY:
  3220                           	opt stack 28
  3221                           
  3222                           ;display.c: 106: for (int i = 0; i < 18; i++) {
  3223                           
  3224                           ;incstack = 0
  3225  007456  0E00               	movlw	0
  3226  007458  6E02               	movwf	DelayFor18TCY@i+1,c
  3227  00745A  0E00               	movlw	0
  3228  00745C  6E01               	movwf	DelayFor18TCY@i,c
  3229  00745E                     l1633:
  3230  00745E  BE02               	btfsc	DelayFor18TCY@i+1,7,c
  3231  007460  D006               	goto	l267
  3232  007462  5002               	movf	DelayFor18TCY@i+1,w,c
  3233  007464  E107               	bnz	l270
  3234  007466  0E12               	movlw	18
  3235  007468  5C01               	subwf	DelayFor18TCY@i,w,c
  3236  00746A  B0D8               	btfsc	status,0,c
  3237  00746C  0012               	return	
  3238  00746E                     l267:
  3239                           
  3240                           ;display.c: 107: continue;
  3241  00746E  4A01               	infsnz	DelayFor18TCY@i,f,c
  3242  007470  2A02               	incf	DelayFor18TCY@i+1,f,c
  3243  007472  D7F5               	goto	l1633
  3244  007474                     l270:
  3245  007474  0012               	return		;funcret
  3246  007476                     __end_of_DelayFor18TCY:
  3247                           	opt stack 0
  3248                           tblptru	equ	0xFF8
  3249                           prodh	equ	0xFF4
  3250                           prodl	equ	0xFF3
  3251                           postinc0	equ	0xFEE
  3252                           wreg	equ	0xFE8
  3253                           indf1	equ	0xFE7
  3254                           plusw1	equ	0xFE3
  3255                           fsr1h	equ	0xFE2
  3256                           fsr1l	equ	0xFE1
  3257                           indf2	equ	0xFDF
  3258                           postinc2	equ	0xFDE
  3259                           postdec2	equ	0xFDD
  3260                           plusw2	equ	0xFDB
  3261                           fsr2h	equ	0xFDA
  3262                           fsr2l	equ	0xFD9
  3263                           status	equ	0xFD8
  3264                           
  3265 ;; *************** function _check_data *****************
  3266 ;; Defined at:
  3267 ;;		line 80 in file "comunicacao.c"
  3268 ;; Parameters:    Size  Location     Type
  3269 ;;  data            2    4[COMRAM] PTR struct .
  3270 ;;		 -> main@dados(69), 
  3271 ;; Auto vars:     Size  Location     Type
  3272 ;;		None
  3273 ;; Return value:  Size  Location     Type
  3274 ;;                  1    wreg      enum E4588
  3275 ;; Registers used:
  3276 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3277 ;; Tracked objects:
  3278 ;;		On entry : 0/0
  3279 ;;		On exit  : 0/0
  3280 ;;		Unchanged: 0/0
  3281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3282 ;;      Params:         2       0       0       0       0       0       0       0       0
  3283 ;;      Locals:         4       0       0       0       0       0       0       0       0
  3284 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3285 ;;      Totals:         7       0       0       0       0       0       0       0       0
  3286 ;;Total ram usage:        7 bytes
  3287 ;; Hardware stack levels used:    1
  3288 ;; Hardware stack levels required when called:    1
  3289 ;; This function calls:
  3290 ;;		_calc_bcc
  3291 ;; This function is called by:
  3292 ;;		_main
  3293 ;; This function uses a non-reentrant model
  3294 ;;
  3295                           
  3296                           	psect	text23
  3297  007B3C                     __ptext23:
  3298                           	opt stack 0
  3299  007B3C                     _check_data:
  3300                           	opt stack 29
  3301                           
  3302                           ;comunicacao.c: 82: if (data->buff[0] != 0x02) {
  3303                           
  3304                           ;incstack = 0
  3305  007B3C  EE20 F001          	lfsr	2,1
  3306  007B40  5005               	movf	check_data@data,w,c
  3307  007B42  26D9               	addwf	fsr2l,f,c
  3308  007B44  5006               	movf	check_data@data+1,w,c
  3309  007B46  22DA               	addwfc	fsr2h,f,c
  3310  007B48  0E02               	movlw	2
  3311  007B4A  18DE               	xorwf	postinc2,w,c
  3312  007B4C  B4D8               	btfsc	status,2,c
  3313  007B4E  D002               	goto	l115
  3314                           
  3315                           ;comunicacao.c: 83: return ERR_STX;
  3316  007B50  0E00               	movlw	0
  3317  007B52  0012               	return	
  3318  007B54                     l115:
  3319                           
  3320                           ;comunicacao.c: 84: }
  3321                           ;comunicacao.c: 86: if (data->buff[1] != 0x09) {
  3322  007B54  EE20 F002          	lfsr	2,2
  3323  007B58  5005               	movf	check_data@data,w,c
  3324  007B5A  26D9               	addwf	fsr2l,f,c
  3325  007B5C  5006               	movf	check_data@data+1,w,c
  3326  007B5E  22DA               	addwfc	fsr2h,f,c
  3327  007B60  0E09               	movlw	9
  3328  007B62  18DE               	xorwf	postinc2,w,c
  3329  007B64  B4D8               	btfsc	status,2,c
  3330  007B66  D002               	goto	l117
  3331                           
  3332                           ;comunicacao.c: 87: return ERR_IGNORE_MSG;
  3333  007B68  0E01               	movlw	1
  3334  007B6A  0012               	return	
  3335  007B6C                     l117:
  3336                           
  3337                           ;comunicacao.c: 88: }
  3338                           ;comunicacao.c: 90: if (calc_bcc(data->buff) != 0) {
  3339  007B6C  0E01               	movlw	1
  3340  007B6E  2405               	addwf	check_data@data,w,c
  3341  007B70  6E01               	movwf	calc_bcc@data,c
  3342  007B72  0E00               	movlw	0
  3343  007B74  2006               	addwfc	check_data@data+1,w,c
  3344  007B76  6E02               	movwf	calc_bcc@data+1,c
  3345  007B78  EC50  F03A         	call	_calc_bcc	;wreg free
  3346  007B7C  0900               	iorlw	0
  3347  007B7E  B4D8               	btfsc	status,2,c
  3348  007B80  D002               	goto	l118
  3349                           
  3350                           ;comunicacao.c: 91: return ERR_BCC;
  3351  007B82  0E02               	movlw	2
  3352  007B84  0012               	return	
  3353  007B86                     l118:
  3354                           
  3355                           ;comunicacao.c: 92: }
  3356                           ;comunicacao.c: 94: data->addr_from = data->buff[2];
  3357  007B86  EE20 F003          	lfsr	2,3
  3358  007B8A  5005               	movf	check_data@data,w,c
  3359  007B8C  26D9               	addwf	fsr2l,f,c
  3360  007B8E  5006               	movf	check_data@data+1,w,c
  3361  007B90  22DA               	addwfc	fsr2h,f,c
  3362  007B92  EE10 F043          	lfsr	1,67
  3363  007B96  5005               	movf	check_data@data,w,c
  3364  007B98  26E1               	addwf	fsr1l,f,c
  3365  007B9A  5006               	movf	check_data@data+1,w,c
  3366  007B9C  22E2               	addwfc	fsr1h,f,c
  3367  007B9E  CFDF FFE7          	movff	indf2,indf1
  3368                           
  3369                           ;comunicacao.c: 95: data->command = data->buff[3];
  3370  007BA2  EE20 F004          	lfsr	2,4
  3371  007BA6  5005               	movf	check_data@data,w,c
  3372  007BA8  26D9               	addwf	fsr2l,f,c
  3373  007BAA  5006               	movf	check_data@data+1,w,c
  3374  007BAC  22DA               	addwfc	fsr2h,f,c
  3375  007BAE  EE10 F044          	lfsr	1,68
  3376  007BB2  5005               	movf	check_data@data,w,c
  3377  007BB4  26E1               	addwf	fsr1l,f,c
  3378  007BB6  5006               	movf	check_data@data+1,w,c
  3379  007BB8  22E2               	addwfc	fsr1h,f,c
  3380  007BBA  CFDF FFE7          	movff	indf2,indf1
  3381                           
  3382                           ;comunicacao.c: 96: data->count = data->buff[4];
  3383  007BBE  EE20 F005          	lfsr	2,5
  3384  007BC2  5005               	movf	check_data@data,w,c
  3385  007BC4  26D9               	addwf	fsr2l,f,c
  3386  007BC6  5006               	movf	check_data@data+1,w,c
  3387  007BC8  22DA               	addwfc	fsr2h,f,c
  3388  007BCA  C005  FFE1         	movff	check_data@data,fsr1l
  3389  007BCE  C006  FFE2         	movff	check_data@data+1,fsr1h
  3390  007BD2  CFDF FFE7          	movff	indf2,indf1
  3391                           
  3392                           ;comunicacao.c: 99: if (data->count == 0) {
  3393  007BD6  C005  FFD9         	movff	check_data@data,fsr2l
  3394  007BDA  C006  FFDA         	movff	check_data@data+1,fsr2h
  3395  007BDE  50DF               	movf	indf2,w,c
  3396  007BE0  A4D8               	btfss	status,2,c
  3397  007BE2  D017               	goto	l119
  3398                           
  3399                           ;comunicacao.c: 100: if (data->command == 0x01) {
  3400  007BE4  EE20 F044          	lfsr	2,68
  3401  007BE8  5005               	movf	check_data@data,w,c
  3402  007BEA  26D9               	addwf	fsr2l,f,c
  3403  007BEC  5006               	movf	check_data@data+1,w,c
  3404  007BEE  22DA               	addwfc	fsr2h,f,c
  3405  007BF0  04DE               	decf	postinc2,w,c
  3406  007BF2  A4D8               	btfss	status,2,c
  3407  007BF4  D002               	goto	l120
  3408                           
  3409                           ;comunicacao.c: 101: return LE_BOTAO1;
  3410  007BF6  0E08               	movlw	8
  3411  007BF8  0012               	return	
  3412  007BFA                     l120:
  3413                           
  3414                           ;comunicacao.c: 102: }
  3415                           ;comunicacao.c: 103: if (data->command == 0x02) {
  3416  007BFA  EE20 F044          	lfsr	2,68
  3417  007BFE  5005               	movf	check_data@data,w,c
  3418  007C00  26D9               	addwf	fsr2l,f,c
  3419  007C02  5006               	movf	check_data@data+1,w,c
  3420  007C04  22DA               	addwfc	fsr2h,f,c
  3421  007C06  0E02               	movlw	2
  3422  007C08  18DE               	xorwf	postinc2,w,c
  3423  007C0A  A4D8               	btfss	status,2,c
  3424  007C0C  D063               	goto	l134
  3425                           
  3426                           ;comunicacao.c: 104: return LE_BOTAO2;
  3427  007C0E  0E09               	movlw	9
  3428  007C10  0012               	return	
  3429  007C12                     l119:
  3430  007C12  C005  FFD9         	movff	check_data@data,fsr2l
  3431  007C16  C006  FFDA         	movff	check_data@data+1,fsr2h
  3432  007C1A  04DE               	decf	postinc2,w,c
  3433  007C1C  A4D8               	btfss	status,2,c
  3434  007C1E  D038               	goto	l123
  3435                           
  3436                           ;comunicacao.c: 107: if (data->command == 0x21) {
  3437  007C20  EE20 F044          	lfsr	2,68
  3438  007C24  5005               	movf	check_data@data,w,c
  3439  007C26  26D9               	addwf	fsr2l,f,c
  3440  007C28  5006               	movf	check_data@data+1,w,c
  3441  007C2A  22DA               	addwfc	fsr2h,f,c
  3442  007C2C  0E21               	movlw	33
  3443  007C2E  18DE               	xorwf	postinc2,w,c
  3444  007C30  A4D8               	btfss	status,2,c
  3445  007C32  D012               	goto	l124
  3446                           
  3447                           ;comunicacao.c: 108: return(data->buff[5] & 0x01 == 1 ? LIGA_LED1 : DESLIGA_LED1);
  3448  007C34  EE20 F006          	lfsr	2,6
  3449  007C38  5005               	movf	check_data@data,w,c
  3450  007C3A  26D9               	addwf	fsr2l,f,c
  3451  007C3C  5006               	movf	check_data@data+1,w,c
  3452  007C3E  22DA               	addwfc	fsr2h,f,c
  3453  007C40  B0DF               	btfsc	indf2,0,c
  3454  007C42  D004               	goto	l126
  3455  007C44  0E00               	movlw	0
  3456  007C46  6E09               	movwf	_check_data$461+1,c
  3457  007C48  0E06               	movlw	6
  3458  007C4A  D003               	goto	L3
  3459  007C4C                     l126:
  3460  007C4C  0E00               	movlw	0
  3461  007C4E  6E09               	movwf	_check_data$461+1,c
  3462  007C50  0E04               	movlw	4
  3463  007C52                     L3:
  3464  007C52  6E08               	movwf	_check_data$461,c
  3465  007C54  5008               	movf	_check_data$461,w,c
  3466  007C56  0012               	return	
  3467  007C58                     l124:
  3468                           
  3469                           ;comunicacao.c: 109: }
  3470                           ;comunicacao.c: 110: if (data->command == 0x22) {
  3471  007C58  EE20 F044          	lfsr	2,68
  3472  007C5C  5005               	movf	check_data@data,w,c
  3473  007C5E  26D9               	addwf	fsr2l,f,c
  3474  007C60  5006               	movf	check_data@data+1,w,c
  3475  007C62  22DA               	addwfc	fsr2h,f,c
  3476  007C64  0E22               	movlw	34
  3477  007C66  18DE               	xorwf	postinc2,w,c
  3478  007C68  A4D8               	btfss	status,2,c
  3479  007C6A  D034               	goto	l134
  3480                           
  3481                           ;comunicacao.c: 111: return(data->buff[5] & 0x01 == 1 ? LIGA_LED2 : DESLIGA_LED2);
  3482  007C6C  EE20 F006          	lfsr	2,6
  3483  007C70  5005               	movf	check_data@data,w,c
  3484  007C72  26D9               	addwf	fsr2l,f,c
  3485  007C74  5006               	movf	check_data@data+1,w,c
  3486  007C76  22DA               	addwfc	fsr2h,f,c
  3487  007C78  B0DF               	btfsc	indf2,0,c
  3488  007C7A  D004               	goto	l131
  3489  007C7C  0E00               	movlw	0
  3490  007C7E  6E0B               	movwf	_check_data$462+1,c
  3491  007C80  0E07               	movlw	7
  3492  007C82  D003               	goto	L4
  3493  007C84                     l131:
  3494  007C84  0E00               	movlw	0
  3495  007C86  6E0B               	movwf	_check_data$462+1,c
  3496  007C88  0E05               	movlw	5
  3497  007C8A                     L4:
  3498  007C8A  6E0A               	movwf	_check_data$462,c
  3499  007C8C  500A               	movf	_check_data$462,w,c
  3500  007C8E  0012               	return	
  3501  007C90                     l123:
  3502                           
  3503                           ;comunicacao.c: 114: if (data->command == 0x70) {
  3504  007C90  EE20 F044          	lfsr	2,68
  3505  007C94  5005               	movf	check_data@data,w,c
  3506  007C96  26D9               	addwf	fsr2l,f,c
  3507  007C98  5006               	movf	check_data@data+1,w,c
  3508  007C9A  22DA               	addwfc	fsr2h,f,c
  3509  007C9C  0E70               	movlw	112
  3510  007C9E  18DE               	xorwf	postinc2,w,c
  3511  007CA0  A4D8               	btfss	status,2,c
  3512  007CA2  D016               	goto	l135
  3513                           
  3514                           ;comunicacao.c: 116: if (data->buff[5] < 0x80 && data->buff[5] > 0x9F) {
  3515  007CA4  EE20 F006          	lfsr	2,6
  3516  007CA8  5005               	movf	check_data@data,w,c
  3517  007CAA  26D9               	addwf	fsr2l,f,c
  3518  007CAC  5006               	movf	check_data@data+1,w,c
  3519  007CAE  22DA               	addwfc	fsr2h,f,c
  3520  007CB0  0E80               	movlw	128
  3521  007CB2  60DF               	cpfslt	indf2,c
  3522  007CB4  D00B               	goto	l136
  3523  007CB6  EE20 F006          	lfsr	2,6
  3524  007CBA  5005               	movf	check_data@data,w,c
  3525  007CBC  26D9               	addwf	fsr2l,f,c
  3526  007CBE  5006               	movf	check_data@data+1,w,c
  3527  007CC0  22DA               	addwfc	fsr2h,f,c
  3528  007CC2  0E9F               	movlw	159
  3529  007CC4  64DF               	cpfsgt	indf2,c
  3530  007CC6  D002               	goto	l136
  3531                           
  3532                           ;comunicacao.c: 117: return ERR_NAK;
  3533  007CC8  0E03               	movlw	3
  3534  007CCA  0012               	return	
  3535  007CCC                     l136:
  3536                           
  3537                           ;comunicacao.c: 118: }
  3538                           ;comunicacao.c: 119: return LE_MSG;
  3539  007CCC  0E0A               	movlw	10
  3540  007CCE  0012               	return	
  3541  007CD0                     l135:
  3542                           
  3543                           ;comunicacao.c: 120: }
  3544                           ;comunicacao.c: 121: return ERR_NAK;
  3545  007CD0  0E03               	movlw	3
  3546  007CD2  0012               	return	
  3547  007CD4                     l134:
  3548                           
  3549                           ;comunicacao.c: 122: }
  3550                           ;comunicacao.c: 124: return ERR_UNDETECTED;
  3551  007CD4  0E0B               	movlw	11
  3552  007CD6  0012               	return	
  3553  007CD8                     __end_of_check_data:
  3554                           	opt stack 0
  3555                           tblptru	equ	0xFF8
  3556                           prodh	equ	0xFF4
  3557                           prodl	equ	0xFF3
  3558                           postinc0	equ	0xFEE
  3559                           wreg	equ	0xFE8
  3560                           indf1	equ	0xFE7
  3561                           plusw1	equ	0xFE3
  3562                           fsr1h	equ	0xFE2
  3563                           fsr1l	equ	0xFE1
  3564                           indf2	equ	0xFDF
  3565                           postinc2	equ	0xFDE
  3566                           postdec2	equ	0xFDD
  3567                           plusw2	equ	0xFDB
  3568                           fsr2h	equ	0xFDA
  3569                           fsr2l	equ	0xFD9
  3570                           status	equ	0xFD8
  3571                           
  3572 ;; *************** function _calc_bcc *****************
  3573 ;; Defined at:
  3574 ;;		line 68 in file "comunicacao.c"
  3575 ;; Parameters:    Size  Location     Type
  3576 ;;  data            2    0[COMRAM] PTR unsigned char 
  3577 ;;		 -> main@dados(69), 
  3578 ;; Auto vars:     Size  Location     Type
  3579 ;;  i               1    3[COMRAM] unsigned char 
  3580 ;;  bcc             1    2[COMRAM] unsigned char 
  3581 ;; Return value:  Size  Location     Type
  3582 ;;                  1    wreg      unsigned char 
  3583 ;; Registers used:
  3584 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3585 ;; Tracked objects:
  3586 ;;		On entry : 0/0
  3587 ;;		On exit  : 0/0
  3588 ;;		Unchanged: 0/0
  3589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3590 ;;      Params:         2       0       0       0       0       0       0       0       0
  3591 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3592 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3593 ;;      Totals:         4       0       0       0       0       0       0       0       0
  3594 ;;Total ram usage:        4 bytes
  3595 ;; Hardware stack levels used:    1
  3596 ;; This function calls:
  3597 ;;		Nothing
  3598 ;; This function is called by:
  3599 ;;		_write_cmd
  3600 ;;		_check_data
  3601 ;; This function uses a non-reentrant model
  3602 ;;
  3603                           
  3604                           	psect	text24
  3605  0074A0                     __ptext24:
  3606                           	opt stack 0
  3607  0074A0                     _calc_bcc:
  3608                           	opt stack 29
  3609                           
  3610                           ;comunicacao.c: 70: uint8_t bcc = data[0];
  3611                           
  3612                           ;incstack = 0
  3613  0074A0  C001  FFD9         	movff	calc_bcc@data,fsr2l
  3614  0074A4  C002  FFDA         	movff	calc_bcc@data+1,fsr2h
  3615  0074A8  50DF               	movf	indf2,w,c
  3616  0074AA  6E03               	movwf	calc_bcc@bcc,c
  3617                           
  3618                           ;comunicacao.c: 73: for (uint8_t i = 1; i < 64; i++) {
  3619  0074AC  0E01               	movlw	1
  3620  0074AE  6E04               	movwf	calc_bcc@i,c
  3621  0074B0                     l1735:
  3622  0074B0  0E3F               	movlw	63
  3623  0074B2  6404               	cpfsgt	calc_bcc@i,c
  3624  0074B4  D001               	goto	l110
  3625  0074B6  D00D               	goto	u790
  3626  0074B8                     l110:
  3627                           
  3628                           ;comunicacao.c: 74: bcc = (uint8_t) (bcc ^ data[i]);
  3629  0074B8  5004               	movf	calc_bcc@i,w,c
  3630  0074BA  0D01               	mullw	1
  3631  0074BC  50F3               	movf	prodl,w,c
  3632  0074BE  2401               	addwf	calc_bcc@data,w,c
  3633  0074C0  6ED9               	movwf	fsr2l,c
  3634  0074C2  50F4               	movf	prodh,w,c
  3635  0074C4  2002               	addwfc	calc_bcc@data+1,w,c
  3636  0074C6  6EDA               	movwf	fsr2h,c
  3637  0074C8  50DF               	movf	indf2,w,c
  3638  0074CA  1803               	xorwf	calc_bcc@bcc,w,c
  3639  0074CC  6E03               	movwf	calc_bcc@bcc,c
  3640  0074CE  2A04               	incf	calc_bcc@i,f,c
  3641  0074D0  D7EF               	goto	l1735
  3642  0074D2                     u790:
  3643                           
  3644                           ;comunicacao.c: 75: }
  3645                           ;comunicacao.c: 77: return(bcc);
  3646  0074D2  5003               	movf	calc_bcc@bcc,w,c
  3647  0074D4  0012               	return	
  3648  0074D6                     __end_of_calc_bcc:
  3649                           	opt stack 0
  3650  0000                     tblptru	equ	0xFF8
  3651                           prodh	equ	0xFF4
  3652                           prodl	equ	0xFF3
  3653                           postinc0	equ	0xFEE
  3654                           wreg	equ	0xFE8
  3655                           indf1	equ	0xFE7
  3656                           plusw1	equ	0xFE3
  3657                           fsr1h	equ	0xFE2
  3658                           fsr1l	equ	0xFE1
  3659                           indf2	equ	0xFDF
  3660                           postinc2	equ	0xFDE
  3661                           postdec2	equ	0xFDD
  3662                           plusw2	equ	0xFDB
  3663                           fsr2h	equ	0xFDA
  3664                           fsr2l	equ	0xFD9
  3665                           status	equ	0xFD8
  3666                           tblptru	equ	0xFF8
  3667                           prodh	equ	0xFF4
  3668                           prodl	equ	0xFF3
  3669                           postinc0	equ	0xFEE
  3670                           wreg	equ	0xFE8
  3671                           indf1	equ	0xFE7
  3672                           plusw1	equ	0xFE3
  3673                           fsr1h	equ	0xFE2
  3674                           fsr1l	equ	0xFE1
  3675                           indf2	equ	0xFDF
  3676                           postinc2	equ	0xFDE
  3677                           postdec2	equ	0xFDD
  3678                           plusw2	equ	0xFDB
  3679                           fsr2h	equ	0xFDA
  3680                           fsr2l	equ	0xFD9
  3681                           status	equ	0xFD8
  3682                           
  3683                           	psect	rparam
  3684  0000                     tblptru	equ	0xFF8
  3685                           prodh	equ	0xFF4
  3686                           prodl	equ	0xFF3
  3687                           postinc0	equ	0xFEE
  3688                           wreg	equ	0xFE8
  3689                           indf1	equ	0xFE7
  3690                           plusw1	equ	0xFE3
  3691                           fsr1h	equ	0xFE2
  3692                           fsr1l	equ	0xFE1
  3693                           indf2	equ	0xFDF
  3694                           postinc2	equ	0xFDE
  3695                           postdec2	equ	0xFDD
  3696                           plusw2	equ	0xFDB
  3697                           fsr2h	equ	0xFDA
  3698                           fsr2l	equ	0xFD9
  3699                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         97
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     79      79
    BANK0           160    141     141
    BANK1           256      0      97
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    lcd_runtime@lcd	PTR struct . size(2) Largest target is 33
		 -> main@lcd(BANK0[33]), 

    lcd_write@string	PTR unsigned char  size(2) Largest target is 33
		 -> main@msg(BANK0[33]), 

    lcd_write@lcd	PTR struct . size(2) Largest target is 33
		 -> main@lcd(BANK0[33]), 

    lcd_clean_all@lcd	PTR struct . size(2) Largest target is 33
		 -> main@lcd(BANK0[33]), 

    lcd_mem_clean@lcd	PTR struct . size(2) Largest target is 33
		 -> main@lcd(BANK0[33]), 

    lcd_init@lcd	PTR struct . size(2) Largest target is 33
		 -> main@lcd(BANK0[33]), 

    write_zero@dados	PTR struct . size(2) Largest target is 69
		 -> main@dados(BANK0[69]), 

    check_data@data	PTR struct . size(2) Largest target is 69
		 -> main@dados(BANK0[69]), 

    calc_bcc@data	PTR unsigned char  size(2) Largest target is 69
		 -> main@dados(BANK0[69]), 

    write_cmd@data	PTR struct . size(2) Largest target is 69
		 -> main@dados(BANK0[69]), 

    mk_msg@string	PTR unsigned char  size(2) Largest target is 33
		 -> main@msg(BANK0[33]), 

    mk_msg@data	PTR struct . size(2) Largest target is 69
		 -> main@dados(BANK0[69]), 

    rcv_msg@data	PTR struct . size(2) Largest target is 69
		 -> main@dados(BANK0[69]), 

    rcv_msg@msg	PTR unsigned char  size(2) Largest target is 33
		 -> main@msg(BANK0[33]), 


Critical Paths under _main in COMRAM

    _main->_write_cmd
    _write_cmd->_calc_bcc
    _lcd_runtime->_SetDDRamAddr
    _WriteDataXLCD->_DelayFor18TCY
    _lcd_init->_OpenXLCD
    _OpenXLCD->_SetDDRamAddr
    _SetDDRamAddr->_DelayFor18TCY
    _DelayPORXLCD->_delay_ms
    _lcd_clean->_delay_ms
    _WriteCmdXLCD->_DelayFor18TCY
    _BusyXLCD->_DelayFor18TCY
    _check_data->_calc_bcc

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               142   142      0   11007
                                             78 COMRAM     1     1      0
                                              0 BANK0    141   141      0
                         _check_data
                      _lcd_clean_all
                           _lcd_init
                        _lcd_runtime
                          _lcd_write
                             _mk_msg
                            _rcv_msg
                      _uart_check_rx
                          _uart_init
                          _write_cmd
                         _write_zero
 ---------------------------------------------------------------------------------
 (1) _write_zero                                           3     1      2     330
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _write_cmd                                           74    71      3    2007
                                              4 COMRAM    74    71      3
                           _calc_bcc
                     _uart_send_byte
 ---------------------------------------------------------------------------------
 (2) _uart_send_byte                                       1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _uart_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _uart_check_rx                                        4     2      2      46
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _rcv_msg                                             12     8      4     286
                                              0 COMRAM    12     8      4
 ---------------------------------------------------------------------------------
 (1) _mk_msg                                               6     1      5    2002
                                              0 COMRAM     6     1      5
 ---------------------------------------------------------------------------------
 (1) _lcd_write                                            6     0      6     664
                                              0 COMRAM     6     0      6
 ---------------------------------------------------------------------------------
 (1) _lcd_runtime                                          8     6      2     876
                                              6 COMRAM     8     6      2
                           _BusyXLCD
                       _SetDDRamAddr
                      _WriteDataXLCD
                           _delay_ms
 ---------------------------------------------------------------------------------
 (2) _WriteDataXLCD                                        1     1      0      90
                                              2 COMRAM     1     1      0
                      _DelayFor18TCY
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             2     0      2    1648
                                              7 COMRAM     2     0      2
                           _BusyXLCD
                           _OpenXLCD
                       _WriteCmdXLCD
                          _lcd_clean
                      _lcd_mem_clean
 ---------------------------------------------------------------------------------
 (2) _OpenXLCD                                             1     1      0     620
                                              6 COMRAM     1     1      0
                           _BusyXLCD
                       _Delay10KTCYx
                       _DelayPORXLCD
                       _SetDDRamAddr
                       _WriteCmdXLCD
 ---------------------------------------------------------------------------------
 (2) _SetDDRamAddr                                         4     4      0      90
                                              2 COMRAM     4     4      0
                      _DelayFor18TCY
 ---------------------------------------------------------------------------------
 (3) _DelayPORXLCD                                         0     0      0     350
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _Delay10KTCYx                                         2     2      0      22
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _lcd_clean_all                                        2     0      2     892
                                              5 COMRAM     2     0      2
                          _lcd_clean
                      _lcd_mem_clean
 ---------------------------------------------------------------------------------
 (2) _lcd_mem_clean                                        3     1      2     308
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _lcd_clean                                            0     0      0     486
                           _BusyXLCD
                       _WriteCmdXLCD
                           _delay_ms
 ---------------------------------------------------------------------------------
 (2) _delay_ms                                             5     3      2     350
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (3) _WriteCmdXLCD                                         1     1      0      90
                                              2 COMRAM     1     1      0
                      _DelayFor18TCY
 ---------------------------------------------------------------------------------
 (2) _BusyXLCD                                             0     0      0      46
                      _DelayFor18TCY
 ---------------------------------------------------------------------------------
 (3) _DelayFor18TCY                                        2     2      0      46
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _check_data                                           7     5      2     874
                                              4 COMRAM     7     5      2
                           _calc_bcc
 ---------------------------------------------------------------------------------
 (2) _calc_bcc                                             4     2      2     310
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _check_data
     _calc_bcc
   _lcd_clean_all
     _lcd_clean
       _BusyXLCD
         _DelayFor18TCY
       _WriteCmdXLCD
         _DelayFor18TCY
       _delay_ms
     _lcd_mem_clean
   _lcd_init
     _BusyXLCD
       _DelayFor18TCY
     _OpenXLCD
       _BusyXLCD
         _DelayFor18TCY
       _Delay10KTCYx
       _DelayPORXLCD
         _delay_ms
       _SetDDRamAddr
         _DelayFor18TCY
       _WriteCmdXLCD
         _DelayFor18TCY
     _WriteCmdXLCD
       _DelayFor18TCY
     _lcd_clean
       _BusyXLCD
         _DelayFor18TCY
       _WriteCmdXLCD
         _DelayFor18TCY
       _delay_ms
     _lcd_mem_clean
   _lcd_runtime
     _BusyXLCD
       _DelayFor18TCY
     _SetDDRamAddr
       _DelayFor18TCY
     _WriteDataXLCD
       _DelayFor18TCY
     _delay_ms
   _lcd_write
   _mk_msg
   _rcv_msg
   _uart_check_rx
   _uart_init
   _write_cmd
     _calc_bcc
     _uart_send_byte
   _write_zero

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      61       7       37.9%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     8D      8D       5       88.1%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     4F      4F       1       83.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     13D      20        0.0%
DATA                 0      0     13D       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sun Jun 10 13:13:59 2018

                     l50 7F98                       l52 7FE6                       l60 7E6A  
                     l61 7EA2                       l45 7D24                       l62 7EDA  
                     l46 7D66                       l55 7D72                       l64 7EF0  
                     l56 7DA2                       l49 7FF2                       l57 7DD4  
                     l58 7E06                       l75 7492                       l67 7F14  
                     l59 7E38                       l76 7480                       l93 764E  
                     l94 7620                       l87 77A4                       l88 7774  
           ?_lcd_runtime 0007              __CFG_BORV$3 000000             __CFG_CP0$OFF 000000  
           __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000  
                    l101 7AB0                      l110 74B8                      l102 7A78  
                    l120 7BFA                      l104 7B10                      l105 7AF8  
                    l123 7C90                      l131 7C84                      l115 7B54  
                    l211 75E2                      l124 7C58                      l117 7B6C  
                    l134 7CD4                      l126 7C4C                      l118 7B86  
                    l214 75F2                      l135 7CD0                      l119 7C12  
                    l136 7CCC                      l208 75D2                      l225 76B6  
                    l321 7850                      l233 789C                      l315 7830  
                    l243 791A                      l171 7542                      l139 770C  
                    l324 7860                      l244 78F0                      l309 7816  
                    l270 7474                      l318 7840                      l254 7972  
                    l238 78D2                      l182 73F4                      l327 7870  
                    l239 78A8                      l167 751E                      l267 746E  
                    l259 79CC                      l285 74FC                      l564 740E  
           __CFG_CPB$OFF 000000             __CFG_CPD$OFF 000000                      u900 76F2  
                    u820 7820                      u790 74D2                      u775 766E  
                    u960 772C                      u980 7530             __CFG_BOR$OFF 000000  
            lcd_init@lcd 0008    __size_of_WriteCmdXLCD 003E                      prod 000FF3  
        lcd_write@string 0005                      wreg 000FE8            write_cmd@data 0005  
           __CFG_LVP$OFF 000000           write_cmd@F4641 0100             __CFG_WDT$OFF 000000  
                   l2121 7A08                     l2105 79AE                     l1633 745E  
                   l1735 74B0                     l1809 76AE                     l1749 73EC  
                   l1873 7704                     u1011 7A42                     u1110 78E6  
                   u1130 792E                     u1320 79AE                     u1350 7A08  
                   u1360 7A1E                     u1440 7F2C                     u1381 7D06  
                   u1390 7D30                     u1457 7414                     u1378 7A20  
                   u1467 7486                     _RCIF 007CF5                     _TRMT 007D61  
                   _TXIF 007CF4                     _main 7CD8                     fsr1h 000FE2  
                   fsr2h 000FDA                     indf1 000FE7                     indf2 000FDF  
                   fsr1l 000FE1                     fsr2l 000FD9   __size_of_WriteDataXLCD 003E  
                   prodh 000FF4                     prodl 000FF3                     start 0000  
          __CFG_IESO$OFF 000000             ___param_bank 000000         ??_uart_send_byte 0001  
        ??_lcd_clean_all 0008             _WriteCmdXLCD 754C            __CFG_PLLDIV$1 000000  
          ?_SetDDRamAddr 0001                    ?_main 0001                    _RCREG 000FAE  
                  _RCSTA 000FAB                    _SPBRG 000FAF                    _PORTB 000F81  
          __CFG_USBDIV$1 000000                    _TRISB 000F93                    _TXREG 000FAD  
  __size_of_Delay10KTCYx 0016                    _TXSTA 000FAC            __CFG_PWRT$OFF 000000  
          __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000  
          __CFG_WRT3$OFF 000000           __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000  
         __CFG_EBTR1$OFF 000000           __CFG_EBTR2$OFF 000000           __CFG_EBTR3$OFF 000000  
          __CFG_WRTB$OFF 000000            __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000  
         __CFG_EBTRB$OFF 000000          ??_lcd_mem_clean 0003                    main@i 0086  
        __end_of_rcv_msg 77DE                    plusw1 000FE3                    plusw2 000FDB  
                  status 000FD8           __CFG_ICPRT$OFF 000000             lcd_runtime@i 000B  
           lcd_write@col 0004             lcd_write@lcd 0001             lcd_write@row 0003  
         __CFG_MCLRE$OFF 000000          __initialization 7422             __end_of_main 8000  
       __end_of_BusyXLCD 7510             _Delay10KTCYx 740C    __size_of_DelayPORXLCD 000E  
         ??_SetDDRamAddr 0003         __end_of_OpenXLCD 7882                   ??_main 004F  
          __activetblptr 000002            _WriteDataXLCD 758A          __CFG_CCP2MX$OFF 000000  
         DelayFor18TCY@i 0001                   _ADCON1 000FC1                   _OSCCON 000FD3  
       __end_of_calc_bcc 74D6         __end_of_delay_ms 74A0             _DelayPORXLCD 73CE  
         __CFG_XINST$OFF 000000         __end_of_lcd_init 760E              mk_msg@count 0003  
                 _mk_msg 760E                   clear_0 7428           ?_WriteDataXLCD 0001  
         lcd_mem_clean@i 0003     __size_of_lcd_runtime 00FC                ??_rcv_msg 0005  
                 tblptru 000FF8         write_cmd@addr_to 0007               __accesstop 0060  
__end_of__initialization 742E          __CFG_PBADEN$OFF 000000            ___rparam_used 000001  
         __pcstackCOMRAM 0001       __size_of_lcd_clean 001E       __size_of_lcd_write 00BA  
 __size_of_DelayFor18TCY 0020               __pbssBANK1 0100               _check_data 7B3C  
              ?_BusyXLCD 0001          WriteCmdXLCD@cmd 0003     __end_of_SetDDRamAddr 76AA  
              ?_OpenXLCD 0001        WriteDataXLCD@data 0003    __end_of_uart_check_rx 754C  
        write_zero@dados 0001          ??_WriteDataXLCD 0003         lcd_clean_all@lcd 0006  
                ?_mk_msg 0001                ?_calc_bcc 0001       __size_of_uart_init 000E  
              ?_delay_ms 0001                ?_lcd_init 0008               ??_BusyXLCD 0003  
        __CFG_VREGEN$OFF 000000              rcv_msg@data 0001               ??_OpenXLCD 0007  
     __size_of_write_cmd 0104                  __Hparam 0000                  __Lparam 0000  
      __end_of_lcd_clean 7456            _DelayFor18TCY 7456        __end_of_lcd_write 793C  
        __CFG_STVREN$OFF 000000                  __pcinit 7422          __size_of_mk_msg 004A  
  __end_of_lcd_clean_all 740C                  __ramtop 0800                  __ptext0 7CD8  
                __ptext1 7700                  __ptext2 7A38                  __ptext3 73EA  
                __ptext4 73DC                  __ptext5 7510                  __ptext6 776E  
                __ptext7 760E                  __ptext8 7882                  __ptext9 793C  
             ??_calc_bcc 0003             mk_msg@string 0004                  _rcv_msg 776E  
             ??_delay_ms 0003                  main@lcd 0087                  main@msg 0060  
                main@pos 0085               ??_lcd_init 000A     end_of_initialization 742E  
            ?_check_data 0005    __end_of_lcd_mem_clean 7700                  mk_msg@i 0006  
          __Lmediumconst 0000        __end_of_uart_init 73EA             calc_bcc@data 0001  
              _RCSTAbits 000FAB           ?_DelayFor18TCY 0001                  postdec2 000FDD  
                postinc0 000FEE                  postinc2 000FDE                _PORTCbits 000F82  
              _PORTDbits 000F83           lcd_runtime@lcd 0007        __end_of_write_cmd 7B3C  
__size_of_uart_send_byte 0010                _TRISBbits 000F93                _TRISCbits 000F94  
              _TRISDbits 000F95    __size_of_SetDDRamAddr 0052             write_cmd@aux 000D  
             main@coluna 0084            ??_lcd_runtime 0009            delay_ms@milis 0001  
         check_data@data 0005      __size_of_check_data 019C               _write_zero 7700  
         __end_of_mk_msg 7658             _SetDDRamAddr 7658       SetDDRamAddr@DDaddr 0006  
    start_initialization 7422       uart_check_rx@tempo 0003        __size_of_BusyXLCD 003A  
        ??_DelayFor18TCY 0001        __size_of_OpenXLCD 00A4               mk_msg@data 0001  
          ?_WriteCmdXLCD 0001         __CFG_LPT1OSC$OFF 000000                 ??_mk_msg 0006  
    __end_of_lcd_runtime 7A38            __pcstackBANK0 0060        __size_of_calc_bcc 0036  
      __size_of_delay_ms 002A        __size_of_lcd_init 0046           ??_WriteCmdXLCD 0003  
          ?_Delay10KTCYx 0001                _lcd_clean 7438                calc_bcc@i 0004  
            ?_write_zero 0001    __end_of_WriteDataXLCD 75C8                _lcd_write 7882  
         _uart_send_byte 73EA               rcv_msg@msg 0003                 ?_rcv_msg 0001  
           ??_check_data 0007   __size_of_uart_check_rx 003C                 _LATBbits 000F8A  
              delay_ms@t 0004            ?_DelayPORXLCD 0001              calc_bcc@bcc 0003  
        OpenXLCD@lcdtype 0007         __CFG_WDTPS$32768 000000           ??_Delay10KTCYx 0001  
              main@F4662 0140                _uart_init 73DC               ?_lcd_clean 0001  
            _lcd_runtime 793C   __end_of_uart_send_byte 73FA               ?_lcd_write 0001  
     __end_of_check_data 7CD8                main@dados 00A8                main@linha 0083  
       Delay10KTCYx@unit 0002              write_zero@i 0003                _write_cmd 7A38  
               _BusyXLCD 74D6       uart_send_byte@byte 0001   __size_of_lcd_clean_all 0012  
    __size_of_write_zero 006E           ??_DelayPORXLCD 0006                 _OpenXLCD 77DE  
               __Hrparam 0000                 __Lrparam 0000               ?_uart_init 0001  
          _uart_check_rx 7510          ?_uart_send_byte 0001    __CFG_FOSC$INTOSCIO_EC 000000  
 __size_of_lcd_mem_clean 0056                 _calc_bcc 74A0                 _main$347 0081  
               _delay_ms 7476         __size_of_rcv_msg 0070                 __ptext10 758A  
               __ptext11 75C8                 __ptext20 754C                 __ptext12 77DE  
               __ptext21 74D6                 __ptext13 7658                 __ptext22 7456  
               __ptext14 73CE                 __ptext23 7B3C                 __ptext15 740C  
               __ptext24 74A0                 __ptext16 73FA                 __ptext17 76AA  
               __ptext18 7438                 __ptext19 7476               ?_write_cmd 0005  
               _lcd_init 75C8     __end_of_WriteCmdXLCD 758A            __size_of_main 0328  
         ?_uart_check_rx 0001               write_cmd@i 004E               write_cmd@t 004D  
            ??_lcd_clean 0006         lcd_mem_clean@lcd 0001              ??_lcd_write 0007  
          _lcd_clean_all 73FA    __CFG_CPUDIV$OSC1_PLL2 000000     __end_of_Delay10KTCYx 7422  
          _lcd_mem_clean 76AA                 rcv_msg@i 000C    __end_of_DelayFor18TCY 7476  
            ??_uart_init 0001           ?_lcd_clean_all 0006             ??_write_zero 0003  
   __end_of_DelayPORXLCD 73DC         lcd_runtime@i_640 000D              ??_write_cmd 0008  
         ?_lcd_mem_clean 0001       __end_of_write_zero 776E           _check_data$461 0008  
         _check_data$462 000A          ??_uart_check_rx 0003  
