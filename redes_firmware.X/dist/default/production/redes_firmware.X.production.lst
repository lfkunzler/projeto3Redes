

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Thu Jun 14 10:14:57 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=2
    25                           	psect	text16,global,reloc=2,class=CODE,delta=1
    26                           	psect	text17,global,reloc=2,class=CODE,delta=1
    27                           	psect	text18,global,reloc=2,class=CODE,delta=1
    28                           	psect	text19,global,reloc=2,class=CODE,delta=1
    29                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text22,global,reloc=2,class=CODE,delta=1
    32                           	psect	text23,global,reloc=2,class=CODE,delta=1
    33                           	psect	text24,global,reloc=2,class=CODE,delta=1
    34                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=2
    35                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    36                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    37  0000                     
    38                           ; Version 1.45
    39                           ; Generated 16/11/2017 GMT
    40                           ; 
    41                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    42                           ; All rights reserved.
    43                           ; 
    44                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    45                           ; 
    46                           ; Redistribution and use in source and binary forms, with or without modification, are
    47                           ; permitted provided that the following conditions are met:
    48                           ; 
    49                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    50                           ;        conditions and the following disclaimer.
    51                           ; 
    52                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    53                           ;        of conditions and the following disclaimer in the documentation and/or other
    54                           ;        materials provided with the distribution.
    55                           ; 
    56                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    57                           ;        software without specific prior written permission.
    58                           ; 
    59                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    60                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    61                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    62                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    63                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    64                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    65                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    66                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    67                           ; 
    68                           ; 
    69                           ; Code-generator required, PIC18F4550 Definitions
    70                           ; 
    71                           ; SFR Addresses
    72  0000                     _TRISBbits	set	3987
    73  0000                     _PORTB	set	3969
    74  0000                     _LATBbits	set	3978
    75  0000                     _TRISB	set	3987
    76  0000                     _TXREG	set	4013
    77  0000                     _RCSTAbits	set	4011
    78  0000                     _SPBRG	set	4015
    79  0000                     _TXSTA	set	4012
    80  0000                     _RCSTA	set	4011
    81  0000                     _RCREG	set	4014
    82  0000                     _PORTDbits	set	3971
    83  0000                     _PORTCbits	set	3970
    84  0000                     _TRISCbits	set	3988
    85  0000                     _TRISDbits	set	3989
    86  0000                     _OSCCON	set	4051
    87  0000                     _ADCON1	set	4033
    88  0000                     _TRMT	set	32097
    89  0000                     _TXIF	set	31988
    90  0000                     _RCIF	set	31989
    91                           
    92                           ; #config settings
    93  0000                     
    94                           	psect	cinit
    95  007282                     __pcinit:
    96                           	opt stack 0
    97  007282                     start_initialization:
    98                           	opt stack 0
    99  007282                     __initialization:
   100                           	opt stack 0
   101                           
   102                           ; Clear objects allocated to BANK1 (97 bytes)
   103  007282  EE01  F000         	lfsr	0,__pbssBANK1
   104  007286  0E61               	movlw	97
   105  007288                     clear_0:
   106  007288  6AEE               	clrf	postinc0,c
   107  00728A  06E8               	decf	wreg,f,c
   108  00728C  E1FD               	bnz	clear_0
   109  00728E                     end_of_initialization:
   110                           	opt stack 0
   111  00728E                     __end_of__initialization:
   112                           	opt stack 0
   113  00728E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   114  007290  6EF8               	movwf	tblptru,c
   115  007292  0100               	movlb	0
   116  007294  EFBE  F03D         	goto	_main	;jump to C main() function
   117                           tblptru	equ	0xFF8
   118                           postinc0	equ	0xFEE
   119                           wreg	equ	0xFE8
   120                           
   121                           	psect	bssBANK1
   122  000100                     __pbssBANK1:
   123                           	opt stack 0
   124  000100                     write_cmd@F4643:
   125                           	opt stack 0
   126  000100                     	ds	64
   127  000140                     main@F4666:
   128                           	opt stack 0
   129  000140                     	ds	33
   130                           tblptru	equ	0xFF8
   131                           postinc0	equ	0xFEE
   132                           wreg	equ	0xFE8
   133                           
   134                           	psect	cstackBANK0
   135  000060                     __pcstackBANK0:
   136                           	opt stack 0
   137  000060                     main@msg:
   138                           	opt stack 0
   139                           
   140                           ; 33 bytes @ 0x0
   141  000060                     	ds	33
   142  000081                     _main$358:
   143                           	opt stack 0
   144                           
   145                           ; 2 bytes @ 0x21
   146  000081                     	ds	2
   147  000083                     main@linha:
   148                           	opt stack 0
   149                           
   150                           ; 1 bytes @ 0x23
   151  000083                     	ds	1
   152  000084                     main@coluna:
   153                           	opt stack 0
   154                           
   155                           ; 1 bytes @ 0x24
   156  000084                     	ds	1
   157  000085                     main@i:
   158                           	opt stack 0
   159                           
   160                           ; 1 bytes @ 0x25
   161  000085                     	ds	1
   162  000086                     main@i_356:
   163                           	opt stack 0
   164                           
   165                           ; 1 bytes @ 0x26
   166  000086                     	ds	1
   167  000087                     main@piscadas:
   168                           	opt stack 0
   169                           
   170                           ; 1 bytes @ 0x27
   171  000087                     	ds	1
   172  000088                     main@pos:
   173                           	opt stack 0
   174                           
   175                           ; 1 bytes @ 0x28
   176  000088                     	ds	1
   177  000089                     main@i_360:
   178                           	opt stack 0
   179                           
   180                           ; 1 bytes @ 0x29
   181  000089                     	ds	1
   182  00008A                     main@tempo_ms:
   183                           	opt stack 0
   184                           
   185                           ; 2 bytes @ 0x2A
   186  00008A                     	ds	2
   187  00008C                     main@lcd:
   188                           	opt stack 0
   189                           
   190                           ; 33 bytes @ 0x2C
   191  00008C                     	ds	33
   192  0000AD                     main@dados:
   193                           	opt stack 0
   194                           
   195                           ; 69 bytes @ 0x4D
   196  0000AD                     	ds	69
   197                           tblptru	equ	0xFF8
   198                           postinc0	equ	0xFEE
   199                           wreg	equ	0xFE8
   200                           
   201                           	psect	cstackCOMRAM
   202  000001                     __pcstackCOMRAM:
   203                           	opt stack 0
   204  000001                     ??_Delay10KTCYx:
   205  000001                     ?_uart_check_rx:
   206                           	opt stack 0
   207  000001                     ?___wmul:
   208                           	opt stack 0
   209  000001                     uart_send_byte@byte:
   210                           	opt stack 0
   211  000001                     delay_ms@milis:
   212                           	opt stack 0
   213  000001                     rcv_msg@data:
   214                           	opt stack 0
   215  000001                     mk_msg@data:
   216                           	opt stack 0
   217  000001                     calc_bcc@data:
   218                           	opt stack 0
   219  000001                     write_zero@dados:
   220                           	opt stack 0
   221  000001                     lcd_mem_clean@lcd:
   222                           	opt stack 0
   223  000001                     lcd_write@lcd:
   224                           	opt stack 0
   225  000001                     DelayFor18TCY@i:
   226                           	opt stack 0
   227  000001                     ___wmul@multiplier:
   228                           	opt stack 0
   229                           
   230                           ; 2 bytes @ 0x0
   231  000001                     	ds	1
   232  000002                     Delay10KTCYx@unit:
   233                           	opt stack 0
   234                           
   235                           ; 1 bytes @ 0x1
   236  000002                     	ds	1
   237  000003                     ??_delay_ms:
   238  000003                     ??_SetDDRamAddr:
   239  000003                     mk_msg@count:
   240                           	opt stack 0
   241  000003                     calc_bcc@bcc:
   242                           	opt stack 0
   243  000003                     write_zero@i:
   244                           	opt stack 0
   245  000003                     lcd_mem_clean@i:
   246                           	opt stack 0
   247  000003                     lcd_write@row:
   248                           	opt stack 0
   249  000003                     WriteCmdXLCD@cmd:
   250                           	opt stack 0
   251  000003                     WriteDataXLCD@data:
   252                           	opt stack 0
   253  000003                     rcv_msg@msg:
   254                           	opt stack 0
   255  000003                     uart_check_rx@tempo:
   256                           	opt stack 0
   257  000003                     ___wmul@multiplicand:
   258                           	opt stack 0
   259                           
   260                           ; 2 bytes @ 0x2
   261  000003                     	ds	1
   262  000004                     calc_bcc@i:
   263                           	opt stack 0
   264  000004                     lcd_write@col:
   265                           	opt stack 0
   266  000004                     delay_ms@t:
   267                           	opt stack 0
   268  000004                     mk_msg@string:
   269                           	opt stack 0
   270                           
   271                           ; 2 bytes @ 0x3
   272  000004                     	ds	1
   273  000005                     ??_rcv_msg:
   274  000005                     write_cmd@data:
   275                           	opt stack 0
   276  000005                     check_data@data:
   277                           	opt stack 0
   278  000005                     lcd_write@string:
   279                           	opt stack 0
   280  000005                     ___wmul@product:
   281                           	opt stack 0
   282                           
   283                           ; 2 bytes @ 0x4
   284  000005                     	ds	1
   285  000006                     mk_msg@i:
   286                           	opt stack 0
   287  000006                     SetDDRamAddr@DDaddr:
   288                           	opt stack 0
   289  000006                     lcd_clean_all@lcd:
   290                           	opt stack 0
   291                           
   292                           ; 2 bytes @ 0x5
   293  000006                     	ds	1
   294  000007                     write_cmd@addr_to:
   295                           	opt stack 0
   296  000007                     OpenXLCD@lcdtype:
   297                           	opt stack 0
   298  000007                     lcd_runtime@lcd:
   299                           	opt stack 0
   300                           
   301                           ; 2 bytes @ 0x6
   302  000007                     	ds	1
   303  000008                     ??_write_cmd:
   304  000008                     _check_data$474:
   305                           	opt stack 0
   306  000008                     lcd_init@lcd:
   307                           	opt stack 0
   308                           
   309                           ; 2 bytes @ 0x7
   310  000008                     	ds	1
   311  000009                     ??_lcd_runtime:
   312                           
   313                           ; 1 bytes @ 0x8
   314  000009                     	ds	1
   315  00000A                     _check_data$475:
   316                           	opt stack 0
   317                           
   318                           ; 2 bytes @ 0x9
   319  00000A                     	ds	1
   320  00000B                     lcd_runtime@i:
   321                           	opt stack 0
   322                           
   323                           ; 2 bytes @ 0xA
   324  00000B                     	ds	1
   325  00000C                     rcv_msg@i:
   326                           	opt stack 0
   327                           
   328                           ; 1 bytes @ 0xB
   329  00000C                     	ds	1
   330  00000D                     lcd_runtime@i_626:
   331                           	opt stack 0
   332  00000D                     write_cmd@aux:
   333                           	opt stack 0
   334                           
   335                           ; 64 bytes @ 0xC
   336  00000D                     	ds	64
   337  00004D                     write_cmd@t:
   338                           	opt stack 0
   339                           
   340                           ; 1 bytes @ 0x4C
   341  00004D                     	ds	1
   342  00004E                     write_cmd@i:
   343                           	opt stack 0
   344                           
   345                           ; 1 bytes @ 0x4D
   346  00004E                     	ds	1
   347  00004F                     ??_main:
   348                           
   349                           ; 1 bytes @ 0x4E
   350  00004F                     	ds	1
   351                           tblptru	equ	0xFF8
   352                           postinc0	equ	0xFEE
   353                           wreg	equ	0xFE8
   354                           
   355 ;;
   356 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   357 ;;
   358 ;; *************** function _main *****************
   359 ;; Defined at:
   360 ;;		line 16 in file "main.c"
   361 ;; Parameters:    Size  Location     Type
   362 ;;		None
   363 ;; Auto vars:     Size  Location     Type
   364 ;;  i               1   41[BANK0 ] unsigned char 
   365 ;;  i               1   38[BANK0 ] unsigned char 
   366 ;;  i               1   37[BANK0 ] unsigned char 
   367 ;;  coluna          1   36[BANK0 ] unsigned char 
   368 ;;  linha           1   35[BANK0 ] unsigned char 
   369 ;;  dados          69   77[BANK0 ] struct .
   370 ;;  msg            33    0[BANK0 ] unsigned char [33]
   371 ;;  lcd            33   44[BANK0 ] struct .
   372 ;;  tempo_ms        2   42[BANK0 ] unsigned int 
   373 ;;  pos             1   40[BANK0 ] unsigned char 
   374 ;;  piscadas        1   39[BANK0 ] unsigned char 
   375 ;; Return value:  Size  Location     Type
   376 ;;                  1    wreg      void 
   377 ;; Registers used:
   378 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   379 ;; Tracked objects:
   380 ;;		On entry : 0/0
   381 ;;		On exit  : 0/0
   382 ;;		Unchanged: 0/0
   383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   384 ;;      Params:         0       0       0       0       0       0       0       0       0
   385 ;;      Locals:         0     146       0       0       0       0       0       0       0
   386 ;;      Temps:          1       0       0       0       0       0       0       0       0
   387 ;;      Totals:         1     146       0       0       0       0       0       0       0
   388 ;;Total ram usage:      147 bytes
   389 ;; Hardware stack levels required when called:    4
   390 ;; This function calls:
   391 ;;		___wmul
   392 ;;		_check_data
   393 ;;		_delay_ms
   394 ;;		_lcd_clean_all
   395 ;;		_lcd_init
   396 ;;		_lcd_runtime
   397 ;;		_lcd_write
   398 ;;		_mk_msg
   399 ;;		_rcv_msg
   400 ;;		_uart_check_rx
   401 ;;		_uart_init
   402 ;;		_write_cmd
   403 ;;		_write_zero
   404 ;; This function is called by:
   405 ;;		Startup code after reset
   406 ;; This function uses a non-reentrant model
   407 ;;
   408                           
   409                           	psect	text0
   410  007B7C                     __ptext0:
   411                           	opt stack 0
   412  007B7C                     _main:
   413                           	opt stack 27
   414                           
   415                           ;main.c: 19: ADCON1 = 0x0F;
   416                           
   417                           ;incstack = 0
   418  007B7C  0E0F               	movlw	15
   419  007B7E  6EC1               	movwf	4033,c	;volatile
   420                           
   421                           ;main.c: 20: OSCCON = 0b01110010;
   422  007B80  0E72               	movlw	114
   423  007B82  6ED3               	movwf	4051,c	;volatile
   424                           
   425                           ;main.c: 22: TRISDbits.RD0 = 0;
   426  007B84  9095               	bcf	3989,0,c	;volatile
   427                           
   428                           ;main.c: 23: TRISDbits.RD1 = 0;
   429  007B86  9295               	bcf	3989,1,c	;volatile
   430                           
   431                           ;main.c: 24: TRISDbits.RD2 = 1;
   432  007B88  8495               	bsf	3989,2,c	;volatile
   433                           
   434                           ;main.c: 25: TRISDbits.RD3 = 1;
   435  007B8A  8695               	bsf	3989,3,c	;volatile
   436                           
   437                           ;main.c: 29: uart_init();
   438  007B8C  EC1E  F039         	call	_uart_init	;wreg free
   439                           
   440                           ;main.c: 30: TRISCbits.RC2 = 0;
   441  007B90  9494               	bcf	3988,2,c	;volatile
   442                           
   443                           ;main.c: 31: PORTCbits.RC2 = 1;
   444  007B92  8482               	bsf	3970,2,c	;volatile
   445                           
   446                           ;main.c: 35: dados_t dados;
   447                           ;main.c: 36: uint8_t piscadas;
   448                           ;main.c: 37: uint16_t tempo_ms;
   449                           ;main.c: 38: lcd_t lcd;
   450                           ;main.c: 41: lcd_init(&lcd);
   451  007B94  0E8C               	movlw	low main@lcd
   452  007B96  6E08               	movwf	lcd_init@lcd,c
   453  007B98  0E00               	movlw	high main@lcd
   454  007B9A  6E09               	movwf	lcd_init@lcd+1,c
   455  007B9C  EC27  F03A         	call	_lcd_init	;wreg free
   456                           
   457                           ;main.c: 44: char msg[33] = {0};
   458  007BA0  EE21  F040         	lfsr	2,main@F4666
   459  007BA4  EE10  F060         	lfsr	1,main@msg
   460  007BA8  0E20               	movlw	32
   461  007BAA                     u1501:
   462  007BAA  CFDB FFE3          	movff	plusw2,plusw1
   463  007BAE  06E8               	decf	wreg,f,c
   464  007BB0  E2FC               	bc	u1501
   465                           
   466                           ;main.c: 45: uint8_t pos = 0;
   467  007BB2  0E00               	movlw	0
   468  007BB4  0100               	movlb	0	; () banked
   469  007BB6  6F88               	movwf	main@pos& (0+255),b
   470                           
   471                           ; BSR set to: 0
   472                           ;main.c: 49: PORTDbits.RD0 = 1;
   473  007BB8  8083               	bsf	3971,0,c	;volatile
   474                           
   475                           ; BSR set to: 0
   476                           ;main.c: 50: PORTDbits.RD1 = 1;
   477  007BBA  8283               	bsf	3971,1,c	;volatile
   478                           
   479                           ; BSR set to: 0
   480                           ;main.c: 51: write_zero(&dados);
   481  007BBC  0EAD               	movlw	low main@dados
   482  007BBE  6E01               	movwf	write_zero@dados,c
   483  007BC0  0E00               	movlw	high main@dados
   484  007BC2  6E02               	movwf	write_zero@dados+1,c
   485  007BC4  ECC3  F03A         	call	_write_zero	;wreg free
   486  007BC8                     
   487                           ;main.c: 58: if (!uart_check_rx()) {
   488  007BC8  ECCB  F039         	call	_uart_check_rx	;wreg free
   489  007BCC  5001               	movf	?_uart_check_rx,w,c
   490  007BCE  1002               	iorwf	?_uart_check_rx+1,w,c
   491  007BD0  A4D8               	btfss	status,2,c
   492  007BD2  D01B               	goto	l48
   493  007BD4                     u1510:
   494                           
   495                           ;main.c: 61: dados.buff[dados.count++] = RCREG;
   496                           
   497                           ;main.c: 59: do {
   498  007BD4  0100               	movlb	0	; () banked
   499  007BD6  51AD               	movf	main@dados& (0+255),w,b
   500  007BD8  0D01               	mullw	1
   501  007BDA  0E01               	movlw	1
   502  007BDC  26F3               	addwf	prodl,f,c
   503  007BDE  0E00               	movlw	0
   504  007BE0  22F4               	addwfc	prodh,f,c
   505  007BE2  0EAD               	movlw	low main@dados
   506  007BE4  24F3               	addwf	prodl,w,c
   507  007BE6  6ED9               	movwf	fsr2l,c
   508  007BE8  0E00               	movlw	high main@dados
   509  007BEA  20F4               	addwfc	prodh,w,c
   510  007BEC  6EDA               	movwf	fsr2h,c
   511  007BEE  CFAE FFDF          	movff	4014,indf2	;volatile
   512                           
   513                           ; BSR set to: 0
   514  007BF2  2BAD               	incf	main@dados& (0+255),f,b
   515                           
   516                           ; BSR set to: 0
   517                           ;main.c: 62: } while (!uart_check_rx());
   518  007BF4  ECCB  F039         	call	_uart_check_rx	;wreg free
   519  007BF8  5001               	movf	?_uart_check_rx,w,c
   520  007BFA  1002               	iorwf	?_uart_check_rx+1,w,c
   521  007BFC  B4D8               	btfsc	status,2,c
   522  007BFE  D7EA               	goto	u1510
   523                           
   524                           ;main.c: 63: dados.data_flag = 1;
   525  007C00  0E00               	movlw	0
   526  007C02  0100               	movlb	0	; () banked
   527  007C04  6FEF               	movwf	(main@dados+66)& (0+255),b
   528  007C06  0E01               	movlw	1
   529  007C08  6FEE               	movwf	(main@dados+65)& (0+255),b
   530  007C0A                     l48:
   531                           
   532                           ;main.c: 64: }
   533                           ;main.c: 67: if (dados.data_flag) {
   534                           
   535                           ; BSR set to: 0
   536  007C0A  0100               	movlb	0	; () banked
   537  007C0C  51EE               	movf	(main@dados+65)& (0+255),w,b
   538  007C0E  11EF               	iorwf	(main@dados+66)& (0+255),w,b
   539  007C10  A4D8               	btfss	status,2,c
   540  007C12  D1BC               	goto	l52
   541  007C14  D1EE               	goto	l51
   542  007C16                     
   543                           ;main.c: 79: msg[0] = 0x15;
   544                           
   545                           ; BSR set to: 0
   546  007C16  0E15               	movlw	21
   547  007C18  0100               	movlb	0	; () banked
   548  007C1A  6F60               	movwf	main@msg& (0+255),b
   549                           
   550                           ; BSR set to: 0
   551                           ;main.c: 80: mk_msg(&dados, 1, msg);
   552  007C1C  0EAD               	movlw	low main@dados
   553  007C1E  6E01               	movwf	mk_msg@data,c
   554  007C20  0E00               	movlw	high main@dados
   555  007C22  6E02               	movwf	mk_msg@data+1,c
   556  007C24  0E01               	movlw	1
   557  007C26  6E03               	movwf	mk_msg@count,c
   558  007C28  0E60               	movlw	low main@msg
   559  007C2A  6E04               	movwf	mk_msg@string,c
   560  007C2C  0E00               	movlw	high main@msg
   561  007C2E  6E05               	movwf	mk_msg@string+1,c
   562  007C30  EC4A  F03A         	call	_mk_msg	;wreg free
   563                           
   564                           ;main.c: 81: write_cmd(&dados, dados.addr_from);
   565  007C34  0EAD               	movlw	low main@dados
   566  007C36  6E05               	movwf	write_cmd@data,c
   567  007C38  0E00               	movlw	high main@dados
   568  007C3A  6E06               	movwf	write_cmd@data+1,c
   569  007C3C  C0F0  F007         	movff	main@dados+67,write_cmd@addr_to
   570  007C40  EC4E  F03C         	call	_write_cmd	;wreg free
   571                           
   572                           ;main.c: 83: break;
   573  007C44  D1D0               	goto	l54
   574  007C46                     l58:
   575                           
   576                           ;main.c: 85: PORTDbits.RD0 = 0;
   577  007C46  9083               	bcf	3971,0,c	;volatile
   578                           
   579                           ;main.c: 87: msg[0] = 0x06;
   580  007C48  0E06               	movlw	6
   581  007C4A  0100               	movlb	0	; () banked
   582  007C4C  6F60               	movwf	main@msg& (0+255),b
   583                           
   584                           ; BSR set to: 0
   585                           ;main.c: 88: mk_msg(&dados, 1, msg);
   586  007C4E  0EAD               	movlw	low main@dados
   587  007C50  6E01               	movwf	mk_msg@data,c
   588  007C52  0E00               	movlw	high main@dados
   589  007C54  6E02               	movwf	mk_msg@data+1,c
   590  007C56  0E01               	movlw	1
   591  007C58  6E03               	movwf	mk_msg@count,c
   592  007C5A  0E60               	movlw	low main@msg
   593  007C5C  6E04               	movwf	mk_msg@string,c
   594  007C5E  0E00               	movlw	high main@msg
   595  007C60  6E05               	movwf	mk_msg@string+1,c
   596  007C62  EC4A  F03A         	call	_mk_msg	;wreg free
   597                           
   598                           ;main.c: 89: write_cmd(&dados, dados.addr_from);
   599  007C66  0EAD               	movlw	low main@dados
   600  007C68  6E05               	movwf	write_cmd@data,c
   601  007C6A  0E00               	movlw	high main@dados
   602  007C6C  6E06               	movwf	write_cmd@data+1,c
   603  007C6E  C0F0  F007         	movff	main@dados+67,write_cmd@addr_to
   604  007C72  EC4E  F03C         	call	_write_cmd	;wreg free
   605                           
   606                           ;main.c: 91: break;
   607  007C76  D1B7               	goto	l54
   608  007C78                     l59:
   609                           
   610                           ;main.c: 93: PORTDbits.RD0 = 1;
   611  007C78  8083               	bsf	3971,0,c	;volatile
   612                           
   613                           ;main.c: 95: msg[0] = 0x06;
   614  007C7A  0E06               	movlw	6
   615  007C7C  0100               	movlb	0	; () banked
   616  007C7E  6F60               	movwf	main@msg& (0+255),b
   617                           
   618                           ; BSR set to: 0
   619                           ;main.c: 96: mk_msg(&dados, 1, msg);
   620  007C80  0EAD               	movlw	low main@dados
   621  007C82  6E01               	movwf	mk_msg@data,c
   622  007C84  0E00               	movlw	high main@dados
   623  007C86  6E02               	movwf	mk_msg@data+1,c
   624  007C88  0E01               	movlw	1
   625  007C8A  6E03               	movwf	mk_msg@count,c
   626  007C8C  0E60               	movlw	low main@msg
   627  007C8E  6E04               	movwf	mk_msg@string,c
   628  007C90  0E00               	movlw	high main@msg
   629  007C92  6E05               	movwf	mk_msg@string+1,c
   630  007C94  EC4A  F03A         	call	_mk_msg	;wreg free
   631                           
   632                           ;main.c: 97: write_cmd(&dados, dados.addr_from);
   633  007C98  0EAD               	movlw	low main@dados
   634  007C9A  6E05               	movwf	write_cmd@data,c
   635  007C9C  0E00               	movlw	high main@dados
   636  007C9E  6E06               	movwf	write_cmd@data+1,c
   637  007CA0  C0F0  F007         	movff	main@dados+67,write_cmd@addr_to
   638  007CA4  EC4E  F03C         	call	_write_cmd	;wreg free
   639                           
   640                           ;main.c: 99: break;
   641  007CA8  D19E               	goto	l54
   642  007CAA                     l60:
   643                           
   644                           ;main.c: 101: PORTDbits.RD1 = 0;
   645  007CAA  9283               	bcf	3971,1,c	;volatile
   646                           
   647                           ;main.c: 103: msg[0] = 0x06;
   648  007CAC  0E06               	movlw	6
   649  007CAE  0100               	movlb	0	; () banked
   650  007CB0  6F60               	movwf	main@msg& (0+255),b
   651                           
   652                           ; BSR set to: 0
   653                           ;main.c: 104: mk_msg(&dados, 1, msg);
   654  007CB2  0EAD               	movlw	low main@dados
   655  007CB4  6E01               	movwf	mk_msg@data,c
   656  007CB6  0E00               	movlw	high main@dados
   657  007CB8  6E02               	movwf	mk_msg@data+1,c
   658  007CBA  0E01               	movlw	1
   659  007CBC  6E03               	movwf	mk_msg@count,c
   660  007CBE  0E60               	movlw	low main@msg
   661  007CC0  6E04               	movwf	mk_msg@string,c
   662  007CC2  0E00               	movlw	high main@msg
   663  007CC4  6E05               	movwf	mk_msg@string+1,c
   664  007CC6  EC4A  F03A         	call	_mk_msg	;wreg free
   665                           
   666                           ;main.c: 105: write_cmd(&dados, dados.addr_from);
   667  007CCA  0EAD               	movlw	low main@dados
   668  007CCC  6E05               	movwf	write_cmd@data,c
   669  007CCE  0E00               	movlw	high main@dados
   670  007CD0  6E06               	movwf	write_cmd@data+1,c
   671  007CD2  C0F0  F007         	movff	main@dados+67,write_cmd@addr_to
   672  007CD6  EC4E  F03C         	call	_write_cmd	;wreg free
   673                           
   674                           ;main.c: 107: break;
   675  007CDA  D185               	goto	l54
   676  007CDC                     l61:
   677                           
   678                           ;main.c: 109: PORTDbits.RD1 = 1;
   679  007CDC  8283               	bsf	3971,1,c	;volatile
   680                           
   681                           ;main.c: 111: msg[0] = 0x06;
   682  007CDE  0E06               	movlw	6
   683  007CE0  0100               	movlb	0	; () banked
   684  007CE2  6F60               	movwf	main@msg& (0+255),b
   685                           
   686                           ; BSR set to: 0
   687                           ;main.c: 112: mk_msg(&dados, 1, msg);
   688  007CE4  0EAD               	movlw	low main@dados
   689  007CE6  6E01               	movwf	mk_msg@data,c
   690  007CE8  0E00               	movlw	high main@dados
   691  007CEA  6E02               	movwf	mk_msg@data+1,c
   692  007CEC  0E01               	movlw	1
   693  007CEE  6E03               	movwf	mk_msg@count,c
   694  007CF0  0E60               	movlw	low main@msg
   695  007CF2  6E04               	movwf	mk_msg@string,c
   696  007CF4  0E00               	movlw	high main@msg
   697  007CF6  6E05               	movwf	mk_msg@string+1,c
   698  007CF8  EC4A  F03A         	call	_mk_msg	;wreg free
   699                           
   700                           ;main.c: 113: write_cmd(&dados, dados.addr_from);
   701  007CFC  0EAD               	movlw	low main@dados
   702  007CFE  6E05               	movwf	write_cmd@data,c
   703  007D00  0E00               	movlw	high main@dados
   704  007D02  6E06               	movwf	write_cmd@data+1,c
   705  007D04  C0F0  F007         	movff	main@dados+67,write_cmd@addr_to
   706  007D08  EC4E  F03C         	call	_write_cmd	;wreg free
   707                           
   708                           ;main.c: 115: break;
   709  007D0C  D16C               	goto	l54
   710  007D0E                     
   711                           ;main.c: 117: msg[0] = 0x06;
   712  007D0E  0E06               	movlw	6
   713  007D10  0100               	movlb	0	; () banked
   714  007D12  6F60               	movwf	main@msg& (0+255),b
   715                           
   716                           ; BSR set to: 0
   717                           ;main.c: 118: msg[1] = (char) PORTDbits.RD2;
   718  007D14  0E00               	movlw	0
   719  007D16  B483               	btfsc	3971,2,c	;volatile
   720  007D18  0E01               	movlw	1
   721  007D1A  6F61               	movwf	(main@msg+1)& (0+255),b
   722                           
   723                           ; BSR set to: 0
   724                           ;main.c: 119: mk_msg(&dados, 2, msg);
   725  007D1C  0EAD               	movlw	low main@dados
   726  007D1E  6E01               	movwf	mk_msg@data,c
   727  007D20  0E00               	movlw	high main@dados
   728  007D22  6E02               	movwf	mk_msg@data+1,c
   729  007D24  0E02               	movlw	2
   730  007D26  6E03               	movwf	mk_msg@count,c
   731  007D28  0E60               	movlw	low main@msg
   732  007D2A  6E04               	movwf	mk_msg@string,c
   733  007D2C  0E00               	movlw	high main@msg
   734  007D2E  6E05               	movwf	mk_msg@string+1,c
   735  007D30  EC4A  F03A         	call	_mk_msg	;wreg free
   736                           
   737                           ;main.c: 120: write_cmd(&dados, dados.addr_from);
   738  007D34  0EAD               	movlw	low main@dados
   739  007D36  6E05               	movwf	write_cmd@data,c
   740  007D38  0E00               	movlw	high main@dados
   741  007D3A  6E06               	movwf	write_cmd@data+1,c
   742  007D3C  C0F0  F007         	movff	main@dados+67,write_cmd@addr_to
   743  007D40  EC4E  F03C         	call	_write_cmd	;wreg free
   744                           
   745                           ;main.c: 122: break;
   746  007D44  D150               	goto	l54
   747  007D46                     
   748                           ;main.c: 124: msg[0] = 0x06;
   749  007D46  0E06               	movlw	6
   750  007D48  0100               	movlb	0	; () banked
   751  007D4A  6F60               	movwf	main@msg& (0+255),b
   752                           
   753                           ; BSR set to: 0
   754                           ;main.c: 125: msg[1] = (char) PORTDbits.RD3;
   755  007D4C  0E00               	movlw	0
   756  007D4E  B683               	btfsc	3971,3,c	;volatile
   757  007D50  0E01               	movlw	1
   758  007D52  6F61               	movwf	(main@msg+1)& (0+255),b
   759                           
   760                           ; BSR set to: 0
   761                           ;main.c: 126: mk_msg(&dados, 2, msg);
   762  007D54  0EAD               	movlw	low main@dados
   763  007D56  6E01               	movwf	mk_msg@data,c
   764  007D58  0E00               	movlw	high main@dados
   765  007D5A  6E02               	movwf	mk_msg@data+1,c
   766  007D5C  0E02               	movlw	2
   767  007D5E  6E03               	movwf	mk_msg@count,c
   768  007D60  0E60               	movlw	low main@msg
   769  007D62  6E04               	movwf	mk_msg@string,c
   770  007D64  0E00               	movlw	high main@msg
   771  007D66  6E05               	movwf	mk_msg@string+1,c
   772  007D68  EC4A  F03A         	call	_mk_msg	;wreg free
   773                           
   774                           ;main.c: 127: write_cmd(&dados, dados.addr_from);
   775  007D6C  0EAD               	movlw	low main@dados
   776  007D6E  6E05               	movwf	write_cmd@data,c
   777  007D70  0E00               	movlw	high main@dados
   778  007D72  6E06               	movwf	write_cmd@data+1,c
   779  007D74  C0F0  F007         	movff	main@dados+67,write_cmd@addr_to
   780  007D78  EC4E  F03C         	call	_write_cmd	;wreg free
   781                           
   782                           ;main.c: 129: break;
   783  007D7C  D134               	goto	l54
   784  007D7E                     l64:
   785                           
   786                           ;main.c: 134: piscadas = dados.buff[5];
   787  007D7E  C0B3  F087         	movff	main@dados+6,main@piscadas
   788                           
   789                           ;main.c: 136: tempo_ms = dados.buff[6]*500;
   790  007D82  C0B4  F001         	movff	main@dados+7,___wmul@multiplier
   791  007D86  6A02               	clrf	___wmul@multiplier+1,c
   792  007D88  0E01               	movlw	1
   793  007D8A  6E04               	movwf	___wmul@multiplicand+1,c
   794  007D8C  0EF4               	movlw	244
   795  007D8E  6E03               	movwf	___wmul@multiplicand,c
   796  007D90  EC6B  F039         	call	___wmul	;wreg free
   797  007D94  C001  F08A         	movff	?___wmul,main@tempo_ms
   798  007D98  C002  F08B         	movff	?___wmul+1,main@tempo_ms+1
   799                           
   800                           ;main.c: 139: msg[0] = 0x06;
   801  007D9C  0E06               	movlw	6
   802  007D9E  0100               	movlb	0	; () banked
   803  007DA0  6F60               	movwf	main@msg& (0+255),b
   804                           
   805                           ; BSR set to: 0
   806                           ;main.c: 140: mk_msg(&dados, 1, msg);
   807  007DA2  0EAD               	movlw	low main@dados
   808  007DA4  6E01               	movwf	mk_msg@data,c
   809  007DA6  0E00               	movlw	high main@dados
   810  007DA8  6E02               	movwf	mk_msg@data+1,c
   811  007DAA  0E01               	movlw	1
   812  007DAC  6E03               	movwf	mk_msg@count,c
   813  007DAE  0E60               	movlw	low main@msg
   814  007DB0  6E04               	movwf	mk_msg@string,c
   815  007DB2  0E00               	movlw	high main@msg
   816  007DB4  6E05               	movwf	mk_msg@string+1,c
   817  007DB6  EC4A  F03A         	call	_mk_msg	;wreg free
   818                           
   819                           ;main.c: 141: write_cmd(&dados, dados.addr_from);
   820  007DBA  0EAD               	movlw	low main@dados
   821  007DBC  6E05               	movwf	write_cmd@data,c
   822  007DBE  0E00               	movlw	high main@dados
   823  007DC0  6E06               	movwf	write_cmd@data+1,c
   824  007DC2  C0F0  F007         	movff	main@dados+67,write_cmd@addr_to
   825  007DC6  EC4E  F03C         	call	_write_cmd	;wreg free
   826                           
   827                           ;main.c: 143: for (uint8_t i = 0; i < piscadas; i++) {
   828  007DCA  0E00               	movlw	0
   829  007DCC  0100               	movlb	0	; () banked
   830  007DCE  6F85               	movwf	main@i& (0+255),b
   831  007DD0  D024               	goto	l65
   832  007DD2                     
   833                           ; BSR set to: 0
   834                           ;main.c: 144: PORTDbits.RD0 = !PORTDbits.RD0;
   835                           
   836                           ; BSR set to: 0
   837  007DD2  B083               	btfsc	3971,0,c	;volatile
   838  007DD4  D003               	goto	u1540
   839  007DD6  6A4F               	clrf	??_main& (0+255),c
   840  007DD8  2A4F               	incf	??_main& (0+255),f,c
   841  007DDA  D001               	goto	u1558
   842  007DDC                     u1540:
   843  007DDC  6A4F               	clrf	??_main& (0+255),c
   844  007DDE                     u1558:
   845  007DDE  5083               	movf	3971,w,c	;volatile
   846  007DE0  184F               	xorwf	??_main,w,c
   847  007DE2  0BFE               	andlw	-2
   848  007DE4  184F               	xorwf	??_main,w,c
   849  007DE6  6E83               	movwf	3971,c	;volatile
   850                           
   851                           ;main.c: 145: delay_ms(tempo_ms);
   852  007DE8  C08A  F001         	movff	main@tempo_ms,delay_ms@milis
   853  007DEC  C08B  F002         	movff	main@tempo_ms+1,delay_ms@milis+1
   854  007DF0  EC7E  F039         	call	_delay_ms	;wreg free
   855                           
   856                           ;main.c: 146: PORTDbits.RD0 = !PORTDbits.RD0;
   857  007DF4  B083               	btfsc	3971,0,c	;volatile
   858  007DF6  D003               	goto	u1560
   859  007DF8  6A4F               	clrf	??_main& (0+255),c
   860  007DFA  2A4F               	incf	??_main& (0+255),f,c
   861  007DFC  D001               	goto	u1578
   862  007DFE                     u1560:
   863  007DFE  6A4F               	clrf	??_main& (0+255),c
   864  007E00                     u1578:
   865  007E00  5083               	movf	3971,w,c	;volatile
   866  007E02  184F               	xorwf	??_main,w,c
   867  007E04  0BFE               	andlw	-2
   868  007E06  184F               	xorwf	??_main,w,c
   869  007E08  6E83               	movwf	3971,c	;volatile
   870                           
   871                           ;main.c: 147: delay_ms(tempo_ms);
   872  007E0A  C08A  F001         	movff	main@tempo_ms,delay_ms@milis
   873  007E0E  C08B  F002         	movff	main@tempo_ms+1,delay_ms@milis+1
   874  007E12  EC7E  F039         	call	_delay_ms	;wreg free
   875  007E16  0100               	movlb	0	; () banked
   876  007E18  2B85               	incf	main@i& (0+255),f,b
   877  007E1A                     l65:
   878                           
   879                           ; BSR set to: 0
   880                           
   881                           ; BSR set to: 0
   882  007E1A  5187               	movf	main@piscadas& (0+255),w,b
   883  007E1C  5D85               	subwf	main@i& (0+255),w,b
   884  007E1E  B0D8               	btfsc	status,0,c
   885  007E20  D0E2               	goto	l54
   886  007E22  D7D7               	goto	l66
   887  007E24                     l68:
   888                           
   889                           ;main.c: 154: piscadas = dados.buff[5];
   890  007E24  C0B3  F087         	movff	main@dados+6,main@piscadas
   891                           
   892                           ;main.c: 156: tempo_ms = dados.buff[6]*500;
   893  007E28  C0B4  F001         	movff	main@dados+7,___wmul@multiplier
   894  007E2C  6A02               	clrf	___wmul@multiplier+1,c
   895  007E2E  0E01               	movlw	1
   896  007E30  6E04               	movwf	___wmul@multiplicand+1,c
   897  007E32  0EF4               	movlw	244
   898  007E34  6E03               	movwf	___wmul@multiplicand,c
   899  007E36  EC6B  F039         	call	___wmul	;wreg free
   900  007E3A  C001  F08A         	movff	?___wmul,main@tempo_ms
   901  007E3E  C002  F08B         	movff	?___wmul+1,main@tempo_ms+1
   902                           
   903                           ;main.c: 159: msg[0] = 0x06;
   904  007E42  0E06               	movlw	6
   905  007E44  0100               	movlb	0	; () banked
   906  007E46  6F60               	movwf	main@msg& (0+255),b
   907                           
   908                           ; BSR set to: 0
   909                           ;main.c: 160: mk_msg(&dados, 1, msg);
   910  007E48  0EAD               	movlw	low main@dados
   911  007E4A  6E01               	movwf	mk_msg@data,c
   912  007E4C  0E00               	movlw	high main@dados
   913  007E4E  6E02               	movwf	mk_msg@data+1,c
   914  007E50  0E01               	movlw	1
   915  007E52  6E03               	movwf	mk_msg@count,c
   916  007E54  0E60               	movlw	low main@msg
   917  007E56  6E04               	movwf	mk_msg@string,c
   918  007E58  0E00               	movlw	high main@msg
   919  007E5A  6E05               	movwf	mk_msg@string+1,c
   920  007E5C  EC4A  F03A         	call	_mk_msg	;wreg free
   921                           
   922                           ;main.c: 161: write_cmd(&dados, dados.addr_from);
   923  007E60  0EAD               	movlw	low main@dados
   924  007E62  6E05               	movwf	write_cmd@data,c
   925  007E64  0E00               	movlw	high main@dados
   926  007E66  6E06               	movwf	write_cmd@data+1,c
   927  007E68  C0F0  F007         	movff	main@dados+67,write_cmd@addr_to
   928  007E6C  EC4E  F03C         	call	_write_cmd	;wreg free
   929                           
   930                           ;main.c: 163: for (uint8_t i = 0; i < piscadas; i++) {
   931  007E70  0E00               	movlw	0
   932  007E72  0100               	movlb	0	; () banked
   933  007E74  6F86               	movwf	main@i_356& (0+255),b
   934  007E76  D026               	goto	l69
   935  007E78                     
   936                           ; BSR set to: 0
   937                           ;main.c: 164: PORTDbits.RD1 = !PORTDbits.RD1;
   938                           
   939                           ; BSR set to: 0
   940  007E78  B283               	btfsc	3971,1,c	;volatile
   941  007E7A  D003               	goto	u1590
   942  007E7C  6A4F               	clrf	??_main& (0+255),c
   943  007E7E  2A4F               	incf	??_main& (0+255),f,c
   944  007E80  D001               	goto	u1608
   945  007E82                     u1590:
   946  007E82  6A4F               	clrf	??_main& (0+255),c
   947  007E84                     u1608:
   948  007E84  464F               	rlncf	??_main,f,c
   949  007E86  5083               	movf	3971,w,c	;volatile
   950  007E88  184F               	xorwf	??_main,w,c
   951  007E8A  0BFD               	andlw	-3
   952  007E8C  184F               	xorwf	??_main,w,c
   953  007E8E  6E83               	movwf	3971,c	;volatile
   954                           
   955                           ;main.c: 165: delay_ms(tempo_ms);
   956  007E90  C08A  F001         	movff	main@tempo_ms,delay_ms@milis
   957  007E94  C08B  F002         	movff	main@tempo_ms+1,delay_ms@milis+1
   958  007E98  EC7E  F039         	call	_delay_ms	;wreg free
   959                           
   960                           ;main.c: 166: PORTDbits.RD1 = !PORTDbits.RD1;
   961  007E9C  B283               	btfsc	3971,1,c	;volatile
   962  007E9E  D003               	goto	u1610
   963  007EA0  6A4F               	clrf	??_main& (0+255),c
   964  007EA2  2A4F               	incf	??_main& (0+255),f,c
   965  007EA4  D001               	goto	u1628
   966  007EA6                     u1610:
   967  007EA6  6A4F               	clrf	??_main& (0+255),c
   968  007EA8                     u1628:
   969  007EA8  464F               	rlncf	??_main,f,c
   970  007EAA  5083               	movf	3971,w,c	;volatile
   971  007EAC  184F               	xorwf	??_main,w,c
   972  007EAE  0BFD               	andlw	-3
   973  007EB0  184F               	xorwf	??_main,w,c
   974  007EB2  6E83               	movwf	3971,c	;volatile
   975                           
   976                           ;main.c: 167: delay_ms(tempo_ms);
   977  007EB4  C08A  F001         	movff	main@tempo_ms,delay_ms@milis
   978  007EB8  C08B  F002         	movff	main@tempo_ms+1,delay_ms@milis+1
   979  007EBC  EC7E  F039         	call	_delay_ms	;wreg free
   980  007EC0  0100               	movlb	0	; () banked
   981  007EC2  2B86               	incf	main@i_356& (0+255),f,b
   982  007EC4                     l69:
   983                           
   984                           ; BSR set to: 0
   985                           
   986                           ; BSR set to: 0
   987  007EC4  5187               	movf	main@piscadas& (0+255),w,b
   988  007EC6  5D86               	subwf	main@i_356& (0+255),w,b
   989  007EC8  B0D8               	btfsc	status,0,c
   990  007ECA  D08D               	goto	l54
   991  007ECC  D7D5               	goto	l70
   992  007ECE                     
   993                           ;main.c: 172: pos = (dados.buff[5]) - 0x80;
   994                           
   995                           ; BSR set to: 0
   996  007ECE  0100               	movlb	0	; () banked
   997  007ED0  51B3               	movf	(main@dados+6)& (0+255),w,b
   998  007ED2  0F80               	addlw	128
   999  007ED4  6F88               	movwf	main@pos& (0+255),b
  1000                           
  1001                           ;main.c: 175: uint8_t linha = pos < 16 ? 1 : 2;
  1002  007ED6  0E0F               	movlw	15
  1003  007ED8  6588               	cpfsgt	main@pos& (0+255),b
  1004  007EDA  D004               	goto	l74
  1005                           
  1006                           ; BSR set to: 0
  1007  007EDC  0E00               	movlw	0
  1008  007EDE  6F82               	movwf	(_main$358+1)& (0+255),b
  1009  007EE0  0E02               	movlw	2
  1010  007EE2  D003               	goto	L1
  1011  007EE4                     l74:
  1012                           
  1013                           ; BSR set to: 0
  1014                           
  1015                           ; BSR set to: 0
  1016  007EE4  0E00               	movlw	0
  1017  007EE6  6F82               	movwf	(_main$358+1)& (0+255),b
  1018  007EE8  0E01               	movlw	1
  1019  007EEA                     L1:
  1020  007EEA  6F81               	movwf	_main$358& (0+255),b
  1021                           
  1022                           ; BSR set to: 0
  1023                           
  1024                           ; BSR set to: 0
  1025  007EEC  C081  F083         	movff	_main$358,main@linha
  1026                           
  1027                           ; BSR set to: 0
  1028                           ;main.c: 176: uint8_t coluna = (pos % 16) + 1;
  1029  007EF0  C088  F04F         	movff	main@pos,??_main
  1030  007EF4  0E0F               	movlw	15
  1031  007EF6  164F               	andwf	??_main,f,c
  1032  007EF8  284F               	incf	??_main,w,c
  1033  007EFA  6F84               	movwf	main@coluna& (0+255),b
  1034                           
  1035                           ; BSR set to: 0
  1036                           ;main.c: 179: for (uint8_t i = 0; i < 33; i++) {
  1037  007EFC  0E00               	movlw	0
  1038  007EFE  6F89               	movwf	main@i_360& (0+255),b
  1039  007F00  0E20               	movlw	32
  1040  007F02  6589               	cpfsgt	main@i_360& (0+255),b
  1041  007F04  D001               	goto	l77
  1042  007F06  D00C               	goto	u1660
  1043  007F08                     l77:
  1044                           
  1045                           ; BSR set to: 0
  1046                           ;main.c: 180: msg[i] = 0;
  1047                           
  1048                           ; BSR set to: 0
  1049  007F08  5189               	movf	main@i_360& (0+255),w,b
  1050  007F0A  0D01               	mullw	1
  1051  007F0C  0E60               	movlw	low main@msg
  1052  007F0E  24F3               	addwf	prodl,w,c
  1053  007F10  6ED9               	movwf	fsr2l,c
  1054  007F12  0E00               	movlw	high main@msg
  1055  007F14  20F4               	addwfc	prodh,w,c
  1056  007F16  6EDA               	movwf	fsr2h,c
  1057  007F18  0E00               	movlw	0
  1058  007F1A  6EDF               	movwf	indf2,c
  1059                           
  1060                           ; BSR set to: 0
  1061  007F1C  2B89               	incf	main@i_360& (0+255),f,b
  1062  007F1E  D7F0               	goto	L2
  1063  007F20                     u1660:
  1064                           
  1065                           ; BSR set to: 0
  1066                           ;main.c: 181: }
  1067                           ;main.c: 184: rcv_msg(&dados, msg);
  1068                           
  1069                           ; BSR set to: 0
  1070  007F20  0EAD               	movlw	low main@dados
  1071  007F22  6E01               	movwf	rcv_msg@data,c
  1072  007F24  0E00               	movlw	high main@dados
  1073  007F26  6E02               	movwf	rcv_msg@data+1,c
  1074  007F28  0E60               	movlw	low main@msg
  1075  007F2A  6E03               	movwf	rcv_msg@msg,c
  1076  007F2C  0E00               	movlw	high main@msg
  1077  007F2E  6E04               	movwf	rcv_msg@msg+1,c
  1078  007F30  ECFA  F03A         	call	_rcv_msg	;wreg free
  1079                           
  1080                           ;main.c: 187: lcd_clean_all(&lcd);
  1081  007F34  0E8C               	movlw	low main@lcd
  1082  007F36  6E06               	movwf	lcd_clean_all@lcd,c
  1083  007F38  0E00               	movlw	high main@lcd
  1084  007F3A  6E07               	movwf	lcd_clean_all@lcd+1,c
  1085  007F3C  EC2D  F039         	call	_lcd_clean_all	;wreg free
  1086                           
  1087                           ;main.c: 188: lcd_write(&lcd, linha, coluna, msg);
  1088  007F40  0E8C               	movlw	low main@lcd
  1089  007F42  6E01               	movwf	lcd_write@lcd,c
  1090  007F44  0E00               	movlw	high main@lcd
  1091  007F46  6E02               	movwf	lcd_write@lcd+1,c
  1092  007F48  C083  F003         	movff	main@linha,lcd_write@row
  1093  007F4C  C084  F004         	movff	main@coluna,lcd_write@col
  1094  007F50  0E60               	movlw	low main@msg
  1095  007F52  6E05               	movwf	lcd_write@string,c
  1096  007F54  0E00               	movlw	high main@msg
  1097  007F56  6E06               	movwf	lcd_write@string+1,c
  1098  007F58  EC84  F03B         	call	_lcd_write	;wreg free
  1099                           
  1100                           ;main.c: 191: msg[0] = 0x06;
  1101  007F5C  0E06               	movlw	6
  1102  007F5E  0100               	movlb	0	; () banked
  1103  007F60  6F60               	movwf	main@msg& (0+255),b
  1104                           
  1105                           ; BSR set to: 0
  1106                           ;main.c: 192: mk_msg(&dados, 1, msg);
  1107  007F62  0EAD               	movlw	low main@dados
  1108  007F64  6E01               	movwf	mk_msg@data,c
  1109  007F66  0E00               	movlw	high main@dados
  1110  007F68  6E02               	movwf	mk_msg@data+1,c
  1111  007F6A  0E01               	movlw	1
  1112  007F6C  6E03               	movwf	mk_msg@count,c
  1113  007F6E  0E60               	movlw	low main@msg
  1114  007F70  6E04               	movwf	mk_msg@string,c
  1115  007F72  0E00               	movlw	high main@msg
  1116  007F74  6E05               	movwf	mk_msg@string+1,c
  1117  007F76  EC4A  F03A         	call	_mk_msg	;wreg free
  1118                           
  1119                           ;main.c: 193: write_cmd(&dados, dados.addr_from);
  1120  007F7A  0EAD               	movlw	low main@dados
  1121  007F7C  6E05               	movwf	write_cmd@data,c
  1122  007F7E  0E00               	movlw	high main@dados
  1123  007F80  6E06               	movwf	write_cmd@data+1,c
  1124  007F82  C0F0  F007         	movff	main@dados+67,write_cmd@addr_to
  1125  007F86  EC4E  F03C         	call	_write_cmd	;wreg free
  1126                           
  1127                           ;main.c: 199: }
  1128                           
  1129                           ;main.c: 198: break;
  1130                           
  1131                           ;main.c: 196: default:
  1132                           
  1133                           ;main.c: 195: break;
  1134  007F8A  D02D               	goto	l54
  1135  007F8C                     l52:
  1136  007F8C  0EAD               	movlw	low main@dados
  1137  007F8E  6E05               	movwf	check_data@data,c
  1138  007F90  0E00               	movlw	high main@dados
  1139  007F92  6E06               	movwf	check_data@data+1,c
  1140  007F94  ECD0  F03C         	call	_check_data	;wreg free
  1141                           
  1142                           ; Switch size 1, requested type "space"
  1143                           ; Number of cases is 13, Range of values is 0 to 12
  1144                           ; switch strategies available:
  1145                           ; Name         Instructions Cycles
  1146                           ; simple_byte           40    21 (average)
  1147                           ;	Chosen strategy is simple_byte
  1148  007F98  0A00               	xorlw	0	; case 0
  1149  007F9A  B4D8               	btfsc	status,2,c
  1150  007F9C  D024               	goto	l54
  1151  007F9E  0A01               	xorlw	1	; case 1
  1152  007FA0  B4D8               	btfsc	status,2,c
  1153  007FA2  D021               	goto	l54
  1154  007FA4  0A03               	xorlw	3	; case 2
  1155  007FA6  B4D8               	btfsc	status,2,c
  1156  007FA8  D01E               	goto	l54
  1157  007FAA  0A01               	xorlw	1	; case 3
  1158  007FAC  B4D8               	btfsc	status,2,c
  1159  007FAE  D633               	goto	l57
  1160  007FB0  0A07               	xorlw	7	; case 4
  1161  007FB2  B4D8               	btfsc	status,2,c
  1162  007FB4  D648               	goto	l58
  1163  007FB6  0A01               	xorlw	1	; case 5
  1164  007FB8  B4D8               	btfsc	status,2,c
  1165  007FBA  D677               	goto	l60
  1166  007FBC  0A03               	xorlw	3	; case 6
  1167  007FBE  B4D8               	btfsc	status,2,c
  1168  007FC0  D65B               	goto	l59
  1169  007FC2  0A01               	xorlw	1	; case 7
  1170  007FC4  B4D8               	btfsc	status,2,c
  1171  007FC6  D68A               	goto	l61
  1172  007FC8  0A0F               	xorlw	15	; case 8
  1173  007FCA  B4D8               	btfsc	status,2,c
  1174  007FCC  D6A0               	goto	l62
  1175  007FCE  0A01               	xorlw	1	; case 9
  1176  007FD0  B4D8               	btfsc	status,2,c
  1177  007FD2  D6B9               	goto	l63
  1178  007FD4  0A03               	xorlw	3	; case 10
  1179  007FD6  B4D8               	btfsc	status,2,c
  1180  007FD8  D77A               	goto	l72
  1181  007FDA  0A01               	xorlw	1	; case 11
  1182  007FDC  B4D8               	btfsc	status,2,c
  1183  007FDE  D6CF               	goto	l64
  1184  007FE0  0A07               	xorlw	7	; case 12
  1185  007FE2  B4D8               	btfsc	status,2,c
  1186  007FE4  D71F               	goto	l68
  1187  007FE6                     l54:
  1188                           
  1189                           ;main.c: 201: write_zero(&dados);
  1190  007FE6  0EAD               	movlw	low main@dados
  1191  007FE8  6E01               	movwf	write_zero@dados,c
  1192  007FEA  0E00               	movlw	high main@dados
  1193  007FEC  6E02               	movwf	write_zero@dados+1,c
  1194  007FEE  ECC3  F03A         	call	_write_zero	;wreg free
  1195  007FF2                     l51:
  1196                           
  1197                           ;main.c: 203: }
  1198                           ;main.c: 205: lcd_runtime(&lcd);
  1199  007FF2  0E8C               	movlw	low main@lcd
  1200  007FF4  6E07               	movwf	lcd_runtime@lcd,c
  1201  007FF6  0E00               	movlw	high main@lcd
  1202  007FF8  6E08               	movwf	lcd_runtime@lcd+1,c
  1203  007FFA  ECE1  F03B         	call	_lcd_runtime	;wreg free
  1204  007FFE  D5E4               	goto	l47
  1205  008000                     __end_of_main:
  1206                           	opt stack 0
  1207                           tblptru	equ	0xFF8
  1208                           prodh	equ	0xFF4
  1209                           prodl	equ	0xFF3
  1210                           postinc0	equ	0xFEE
  1211                           wreg	equ	0xFE8
  1212                           plusw1	equ	0xFE3
  1213                           indf2	equ	0xFDF
  1214                           plusw2	equ	0xFDB
  1215                           fsr2h	equ	0xFDA
  1216                           fsr2l	equ	0xFD9
  1217                           status	equ	0xFD8
  1218                           
  1219 ;; *************** function _write_zero *****************
  1220 ;; Defined at:
  1221 ;;		line 138 in file "comunicacao.c"
  1222 ;; Parameters:    Size  Location     Type
  1223 ;;  dados           2    0[COMRAM] PTR struct .
  1224 ;;		 -> main@dados(69), 
  1225 ;; Auto vars:     Size  Location     Type
  1226 ;;  i               1    2[COMRAM] unsigned char 
  1227 ;; Return value:  Size  Location     Type
  1228 ;;                  1    wreg      void 
  1229 ;; Registers used:
  1230 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1231 ;; Tracked objects:
  1232 ;;		On entry : 0/0
  1233 ;;		On exit  : 0/0
  1234 ;;		Unchanged: 0/0
  1235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1236 ;;      Params:         2       0       0       0       0       0       0       0       0
  1237 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1238 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1239 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1240 ;;Total ram usage:        3 bytes
  1241 ;; Hardware stack levels used:    1
  1242 ;; This function calls:
  1243 ;;		Nothing
  1244 ;; This function is called by:
  1245 ;;		_main
  1246 ;; This function uses a non-reentrant model
  1247 ;;
  1248                           
  1249                           	psect	text1
  1250  007586                     __ptext1:
  1251                           	opt stack 0
  1252  007586                     _write_zero:
  1253                           	opt stack 30
  1254                           
  1255                           ;comunicacao.c: 140: for (uint8_t i = 0; i < 64; i++) {
  1256                           
  1257                           ;incstack = 0
  1258  007586  0E00               	movlw	0
  1259  007588  6E03               	movwf	write_zero@i,c
  1260  00758A                     l1941:
  1261  00758A  0E3F               	movlw	63
  1262  00758C  6403               	cpfsgt	write_zero@i,c
  1263  00758E  D001               	goto	l153
  1264  007590  D010               	goto	u1070
  1265  007592                     l153:
  1266                           
  1267                           ;comunicacao.c: 141: dados->buff[i] = 0x00;
  1268  007592  5003               	movf	write_zero@i,w,c
  1269  007594  0D01               	mullw	1
  1270  007596  0E01               	movlw	1
  1271  007598  26F3               	addwf	prodl,f,c
  1272  00759A  0E00               	movlw	0
  1273  00759C  22F4               	addwfc	prodh,f,c
  1274  00759E  50F3               	movf	prodl,w,c
  1275  0075A0  2401               	addwf	write_zero@dados,w,c
  1276  0075A2  6ED9               	movwf	fsr2l,c
  1277  0075A4  50F4               	movf	prodh,w,c
  1278  0075A6  2002               	addwfc	write_zero@dados+1,w,c
  1279  0075A8  6EDA               	movwf	fsr2h,c
  1280  0075AA  0E00               	movlw	0
  1281  0075AC  6EDF               	movwf	indf2,c
  1282  0075AE  2A03               	incf	write_zero@i,f,c
  1283  0075B0  D7EC               	goto	l1941
  1284  0075B2                     u1070:
  1285                           
  1286                           ;comunicacao.c: 142: }
  1287                           ;comunicacao.c: 144: dados->count = 0;
  1288  0075B2  C001  FFD9         	movff	write_zero@dados,fsr2l
  1289  0075B6  C002  FFDA         	movff	write_zero@dados+1,fsr2h
  1290  0075BA  0E00               	movlw	0
  1291  0075BC  6EDF               	movwf	indf2,c
  1292                           
  1293                           ;comunicacao.c: 145: dados->command = 0;
  1294  0075BE  EE20 F044          	lfsr	2,68
  1295  0075C2  5001               	movf	write_zero@dados,w,c
  1296  0075C4  26D9               	addwf	fsr2l,f,c
  1297  0075C6  5002               	movf	write_zero@dados+1,w,c
  1298  0075C8  22DA               	addwfc	fsr2h,f,c
  1299  0075CA  0E00               	movlw	0
  1300  0075CC  6EDF               	movwf	indf2,c
  1301                           
  1302                           ;comunicacao.c: 146: dados->data_flag = 0;
  1303  0075CE  EE20 F041          	lfsr	2,65
  1304  0075D2  5001               	movf	write_zero@dados,w,c
  1305  0075D4  26D9               	addwf	fsr2l,f,c
  1306  0075D6  5002               	movf	write_zero@dados+1,w,c
  1307  0075D8  22DA               	addwfc	fsr2h,f,c
  1308  0075DA  0E00               	movlw	0
  1309  0075DC  6EDE               	movwf	postinc2,c
  1310  0075DE  0E00               	movlw	0
  1311  0075E0  6EDD               	movwf	postdec2,c
  1312                           
  1313                           ;comunicacao.c: 147: dados->addr_from = 0;
  1314  0075E2  EE20 F043          	lfsr	2,67
  1315  0075E6  5001               	movf	write_zero@dados,w,c
  1316  0075E8  26D9               	addwf	fsr2l,f,c
  1317  0075EA  5002               	movf	write_zero@dados+1,w,c
  1318  0075EC  22DA               	addwfc	fsr2h,f,c
  1319  0075EE  0E00               	movlw	0
  1320  0075F0  6EDF               	movwf	indf2,c
  1321  0075F2  0012               	return		;funcret
  1322  0075F4                     __end_of_write_zero:
  1323                           	opt stack 0
  1324                           tblptru	equ	0xFF8
  1325                           prodh	equ	0xFF4
  1326                           prodl	equ	0xFF3
  1327                           postinc0	equ	0xFEE
  1328                           wreg	equ	0xFE8
  1329                           plusw1	equ	0xFE3
  1330                           indf2	equ	0xFDF
  1331                           postinc2	equ	0xFDE
  1332                           postdec2	equ	0xFDD
  1333                           plusw2	equ	0xFDB
  1334                           fsr2h	equ	0xFDA
  1335                           fsr2l	equ	0xFD9
  1336                           status	equ	0xFD8
  1337                           
  1338 ;; *************** function _write_cmd *****************
  1339 ;; Defined at:
  1340 ;;		line 44 in file "comunicacao.c"
  1341 ;; Parameters:    Size  Location     Type
  1342 ;;  data            2    4[COMRAM] PTR struct .
  1343 ;;		 -> main@dados(69), 
  1344 ;;  addr_to         1    6[COMRAM] unsigned char 
  1345 ;; Auto vars:     Size  Location     Type
  1346 ;;  t               1   76[COMRAM] unsigned char 
  1347 ;;  aux            64   12[COMRAM] unsigned char [64]
  1348 ;;  i               1   77[COMRAM] unsigned char 
  1349 ;; Return value:  Size  Location     Type
  1350 ;;                  1    wreg      void 
  1351 ;; Registers used:
  1352 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1353 ;; Tracked objects:
  1354 ;;		On entry : 0/0
  1355 ;;		On exit  : 0/0
  1356 ;;		Unchanged: 0/0
  1357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1358 ;;      Params:         3       0       0       0       0       0       0       0       0
  1359 ;;      Locals:        66       0       0       0       0       0       0       0       0
  1360 ;;      Temps:          5       0       0       0       0       0       0       0       0
  1361 ;;      Totals:        74       0       0       0       0       0       0       0       0
  1362 ;;Total ram usage:       74 bytes
  1363 ;; Hardware stack levels used:    1
  1364 ;; Hardware stack levels required when called:    1
  1365 ;; This function calls:
  1366 ;;		_calc_bcc
  1367 ;;		_uart_send_byte
  1368 ;; This function is called by:
  1369 ;;		_main
  1370 ;; This function uses a non-reentrant model
  1371 ;;
  1372                           
  1373                           	psect	text2
  1374  00789C                     __ptext2:
  1375                           	opt stack 0
  1376  00789C                     _write_cmd:
  1377                           	opt stack 29
  1378                           
  1379                           ;comunicacao.c: 46: uint8_t aux[64] = {0};
  1380                           
  1381                           ;incstack = 0
  1382  00789C  EE21  F000         	lfsr	2,write_cmd@F4643
  1383  0078A0  EE10  F00D         	lfsr	1,write_cmd@aux
  1384  0078A4  0E3F               	movlw	63
  1385  0078A6                     u1121:
  1386  0078A6  CFDB FFE3          	movff	plusw2,plusw1
  1387  0078AA  06E8               	decf	wreg,f,c
  1388  0078AC  E2FC               	bc	u1121
  1389                           
  1390                           ;comunicacao.c: 48: aux[0] = 0x02;
  1391  0078AE  0E02               	movlw	2
  1392  0078B0  6E0D               	movwf	write_cmd@aux,c
  1393                           
  1394                           ;comunicacao.c: 49: aux[1] = addr_to;
  1395  0078B2  C007  F00E         	movff	write_cmd@addr_to,write_cmd@aux+1
  1396                           
  1397                           ;comunicacao.c: 50: aux[2] = 0x09;
  1398  0078B6  0E09               	movlw	9
  1399  0078B8  6E0F               	movwf	write_cmd@aux+2,c
  1400                           
  1401                           ;comunicacao.c: 51: aux[3] = data->command;
  1402  0078BA  EE20 F044          	lfsr	2,68
  1403  0078BE  5005               	movf	write_cmd@data,w,c
  1404  0078C0  26D9               	addwf	fsr2l,f,c
  1405  0078C2  5006               	movf	write_cmd@data+1,w,c
  1406  0078C4  22DA               	addwfc	fsr2h,f,c
  1407  0078C6  50DF               	movf	indf2,w,c
  1408  0078C8  6E10               	movwf	write_cmd@aux+3,c
  1409                           
  1410                           ;comunicacao.c: 52: aux[4] = data->count;
  1411  0078CA  C005  FFD9         	movff	write_cmd@data,fsr2l
  1412  0078CE  C006  FFDA         	movff	write_cmd@data+1,fsr2h
  1413  0078D2  50DF               	movf	indf2,w,c
  1414  0078D4  6E11               	movwf	write_cmd@aux+4,c
  1415                           
  1416                           ;comunicacao.c: 54: uint8_t i = 0;
  1417  0078D6  0E00               	movlw	0
  1418  0078D8  6E4E               	movwf	write_cmd@i,c
  1419                           
  1420                           ;comunicacao.c: 55: while (i < data->count) {
  1421  0078DA  D01C               	goto	l111
  1422  0078DC                     
  1423                           ;comunicacao.c: 56: aux[i + 5] = data->buff[i++];
  1424  0078DC  504E               	movf	write_cmd@i,w,c
  1425  0078DE  0D01               	mullw	1
  1426  0078E0  0E01               	movlw	1
  1427  0078E2  26F3               	addwf	prodl,f,c
  1428  0078E4  0E00               	movlw	0
  1429  0078E6  22F4               	addwfc	prodh,f,c
  1430  0078E8  50F3               	movf	prodl,w,c
  1431  0078EA  2405               	addwf	write_cmd@data,w,c
  1432  0078EC  6ED9               	movwf	fsr2l,c
  1433  0078EE  50F4               	movf	prodh,w,c
  1434  0078F0  2006               	addwfc	write_cmd@data+1,w,c
  1435  0078F2  6EDA               	movwf	fsr2h,c
  1436  0078F4  504E               	movf	write_cmd@i,w,c
  1437  0078F6  6E08               	movwf	??_write_cmd& (0+255),c
  1438  0078F8  6A09               	clrf	(??_write_cmd+1)& (0+255),c
  1439  0078FA  0E05               	movlw	5
  1440  0078FC  2608               	addwf	??_write_cmd,f,c
  1441  0078FE  0E00               	movlw	0
  1442  007900  2209               	addwfc	??_write_cmd+1,f,c
  1443  007902  0E0D               	movlw	low write_cmd@aux
  1444  007904  2408               	addwf	??_write_cmd,w,c
  1445  007906  6EE1               	movwf	fsr1l,c
  1446  007908  0E00               	movlw	high write_cmd@aux
  1447  00790A  2009               	addwfc	??_write_cmd+1,w,c
  1448  00790C  6EE2               	movwf	fsr1h,c
  1449  00790E  CFDF FFE7          	movff	indf2,indf1
  1450  007912  2A4E               	incf	write_cmd@i,f,c
  1451  007914                     l111:
  1452  007914  C005  FFD9         	movff	write_cmd@data,fsr2l
  1453  007918  C006  FFDA         	movff	write_cmd@data+1,fsr2h
  1454  00791C  50DE               	movf	postinc2,w,c
  1455  00791E  5C4E               	subwf	write_cmd@i,w,c
  1456  007920  A0D8               	btfss	status,0,c
  1457  007922  D7DC               	goto	l112
  1458                           
  1459                           ;comunicacao.c: 57: }
  1460                           ;comunicacao.c: 59: aux[i + 5] = calc_bcc(data->buff);
  1461  007924  0E01               	movlw	1
  1462  007926  2405               	addwf	write_cmd@data,w,c
  1463  007928  6E01               	movwf	calc_bcc@data,c
  1464  00792A  0E00               	movlw	0
  1465  00792C  2006               	addwfc	write_cmd@data+1,w,c
  1466  00792E  6E02               	movwf	calc_bcc@data+1,c
  1467  007930  EC93  F039         	call	_calc_bcc	;wreg free
  1468  007934  6E08               	movwf	??_write_cmd& (0+255),c
  1469  007936  504E               	movf	write_cmd@i,w,c
  1470  007938  6E09               	movwf	(??_write_cmd+1)& (0+255),c
  1471  00793A  6A0A               	clrf	(??_write_cmd+2)& (0+255),c
  1472  00793C  0E05               	movlw	5
  1473  00793E  2609               	addwf	??_write_cmd+1,f,c
  1474  007940  0E00               	movlw	0
  1475  007942  220A               	addwfc	??_write_cmd+2,f,c
  1476  007944  0E0D               	movlw	low write_cmd@aux
  1477  007946  2409               	addwf	??_write_cmd+1,w,c
  1478  007948  6ED9               	movwf	fsr2l,c
  1479  00794A  0E00               	movlw	high write_cmd@aux
  1480  00794C  200A               	addwfc	??_write_cmd+2,w,c
  1481  00794E  6EDA               	movwf	fsr2h,c
  1482  007950  C008  FFDF         	movff	??_write_cmd,indf2
  1483                           
  1484                           ;comunicacao.c: 61: PORTCbits.RC2 = 0;
  1485  007954  9482               	bcf	3970,2,c	;volatile
  1486                           
  1487                           ;comunicacao.c: 62: for (uint8_t t = 0; t < i + 6; t++) {
  1488  007956  0E00               	movlw	0
  1489  007958  6E4D               	movwf	write_cmd@t,c
  1490  00795A  D00C               	goto	l114
  1491  00795C                     
  1492                           ;comunicacao.c: 63: uart_send_byte(aux[t]);
  1493  00795C  504D               	movf	write_cmd@t,w,c
  1494  00795E  0D01               	mullw	1
  1495  007960  0E0D               	movlw	low write_cmd@aux
  1496  007962  24F3               	addwf	prodl,w,c
  1497  007964  6ED9               	movwf	fsr2l,c
  1498  007966  0E00               	movlw	high write_cmd@aux
  1499  007968  20F4               	addwfc	prodh,w,c
  1500  00796A  6EDA               	movwf	fsr2h,c
  1501  00796C  50DF               	movf	indf2,w,c
  1502  00796E  EC25  F039         	call	_uart_send_byte
  1503  007972  2A4D               	incf	write_cmd@t,f,c
  1504  007974                     l114:
  1505  007974  504E               	movf	write_cmd@i,w,c
  1506  007976  6E08               	movwf	??_write_cmd& (0+255),c
  1507  007978  6A09               	clrf	(??_write_cmd+1)& (0+255),c
  1508  00797A  0E06               	movlw	6
  1509  00797C  2608               	addwf	??_write_cmd,f,c
  1510  00797E  0E00               	movlw	0
  1511  007980  2209               	addwfc	??_write_cmd+1,f,c
  1512  007982  504D               	movf	write_cmd@t,w,c
  1513  007984  6E0A               	movwf	(??_write_cmd+2)& (0+255),c
  1514  007986  6A0B               	clrf	(??_write_cmd+3)& (0+255),c
  1515  007988  5008               	movf	??_write_cmd,w,c
  1516  00798A  5C0A               	subwf	??_write_cmd+2,w,c
  1517  00798C  500B               	movf	??_write_cmd+3,w,c
  1518  00798E  0A80               	xorlw	128
  1519  007990  6E0C               	movwf	(??_write_cmd+4)& (0+255),c
  1520  007992  5009               	movf	??_write_cmd+1,w,c
  1521  007994  0A80               	xorlw	128
  1522  007996  580C               	subwfb	(??_write_cmd+4)& (0+255),w,c
  1523  007998  A0D8               	btfss	status,0,c
  1524  00799A  D7E0               	goto	l115
  1525                           
  1526                           ;comunicacao.c: 64: }
  1527                           ;comunicacao.c: 65: PORTCbits.RC2 = 1;
  1528  00799C  8482               	bsf	3970,2,c	;volatile
  1529  00799E  0012               	return		;funcret
  1530  0079A0                     __end_of_write_cmd:
  1531                           	opt stack 0
  1532                           tblptru	equ	0xFF8
  1533                           prodh	equ	0xFF4
  1534                           prodl	equ	0xFF3
  1535                           postinc0	equ	0xFEE
  1536                           wreg	equ	0xFE8
  1537                           indf1	equ	0xFE7
  1538                           plusw1	equ	0xFE3
  1539                           fsr1h	equ	0xFE2
  1540                           fsr1l	equ	0xFE1
  1541                           indf2	equ	0xFDF
  1542                           postinc2	equ	0xFDE
  1543                           postdec2	equ	0xFDD
  1544                           plusw2	equ	0xFDB
  1545                           fsr2h	equ	0xFDA
  1546                           fsr2l	equ	0xFD9
  1547                           status	equ	0xFD8
  1548                           
  1549 ;; *************** function _uart_send_byte *****************
  1550 ;; Defined at:
  1551 ;;		line 54 in file "uart.c"
  1552 ;; Parameters:    Size  Location     Type
  1553 ;;  byte            1    wreg     unsigned char 
  1554 ;; Auto vars:     Size  Location     Type
  1555 ;;  byte            1    0[COMRAM] unsigned char 
  1556 ;; Return value:  Size  Location     Type
  1557 ;;                  1    wreg      void 
  1558 ;; Registers used:
  1559 ;;		wreg
  1560 ;; Tracked objects:
  1561 ;;		On entry : 0/0
  1562 ;;		On exit  : 0/0
  1563 ;;		Unchanged: 0/0
  1564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1565 ;;      Params:         0       0       0       0       0       0       0       0       0
  1566 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1567 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1568 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1569 ;;Total ram usage:        1 bytes
  1570 ;; Hardware stack levels used:    1
  1571 ;; This function calls:
  1572 ;;		Nothing
  1573 ;; This function is called by:
  1574 ;;		_write_cmd
  1575 ;; This function uses a non-reentrant model
  1576 ;;
  1577                           
  1578                           	psect	text3
  1579  00724A                     __ptext3:
  1580                           	opt stack 0
  1581  00724A                     _uart_send_byte:
  1582                           	opt stack 29
  1583                           
  1584                           ;incstack = 0
  1585                           ;uart_send_byte@byte stored from wreg
  1586  00724A  6E01               	movwf	uart_send_byte@byte,c
  1587  00724C                     
  1588                           ;uart.c: 56: while (TXIF == 0);
  1589  00724C  A89E               	btfss	3998,4,c	;volatile
  1590  00724E  D7FE               	goto	l1817
  1591                           
  1592                           ;uart.c: 57: TXREG = byte;
  1593  007250  C001  FFAD         	movff	uart_send_byte@byte,4013	;volatile
  1594  007254  B2AC               	btfsc	4012,1,c	;volatile
  1595  007256  0012               	return	
  1596  007258  D7FD               	goto	l196
  1597  00725A                     __end_of_uart_send_byte:
  1598                           	opt stack 0
  1599                           tblptru	equ	0xFF8
  1600                           prodh	equ	0xFF4
  1601                           prodl	equ	0xFF3
  1602                           postinc0	equ	0xFEE
  1603                           wreg	equ	0xFE8
  1604                           indf1	equ	0xFE7
  1605                           plusw1	equ	0xFE3
  1606                           fsr1h	equ	0xFE2
  1607                           fsr1l	equ	0xFE1
  1608                           indf2	equ	0xFDF
  1609                           postinc2	equ	0xFDE
  1610                           postdec2	equ	0xFDD
  1611                           plusw2	equ	0xFDB
  1612                           fsr2h	equ	0xFDA
  1613                           fsr2l	equ	0xFD9
  1614                           status	equ	0xFD8
  1615                           
  1616 ;; *************** function _uart_init *****************
  1617 ;; Defined at:
  1618 ;;		line 12 in file "uart.c"
  1619 ;; Parameters:    Size  Location     Type
  1620 ;;		None
  1621 ;; Auto vars:     Size  Location     Type
  1622 ;;		None
  1623 ;; Return value:  Size  Location     Type
  1624 ;;                  1    wreg      void 
  1625 ;; Registers used:
  1626 ;;		wreg, status,2
  1627 ;; Tracked objects:
  1628 ;;		On entry : 0/0
  1629 ;;		On exit  : 0/0
  1630 ;;		Unchanged: 0/0
  1631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1632 ;;      Params:         0       0       0       0       0       0       0       0       0
  1633 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1634 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1635 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1636 ;;Total ram usage:        0 bytes
  1637 ;; Hardware stack levels used:    1
  1638 ;; This function calls:
  1639 ;;		Nothing
  1640 ;; This function is called by:
  1641 ;;		_main
  1642 ;; This function uses a non-reentrant model
  1643 ;;
  1644                           
  1645                           	psect	text4
  1646  00723C                     __ptext4:
  1647                           	opt stack 0
  1648  00723C                     _uart_init:
  1649                           	opt stack 30
  1650                           
  1651                           ;uart.c: 14: RCSTA = 0x90;
  1652                           
  1653                           ;incstack = 0
  1654  00723C  0E90               	movlw	144
  1655  00723E  6EAB               	movwf	4011,c	;volatile
  1656                           
  1657                           ;uart.c: 15: TXSTA = 0x24;
  1658  007240  0E24               	movlw	36
  1659  007242  6EAC               	movwf	4012,c	;volatile
  1660                           
  1661                           ;uart.c: 23: SPBRG = 51;
  1662  007244  0E33               	movlw	51
  1663  007246  6EAF               	movwf	4015,c	;volatile
  1664  007248  0012               	return		;funcret
  1665  00724A                     __end_of_uart_init:
  1666                           	opt stack 0
  1667                           tblptru	equ	0xFF8
  1668                           prodh	equ	0xFF4
  1669                           prodl	equ	0xFF3
  1670                           postinc0	equ	0xFEE
  1671                           wreg	equ	0xFE8
  1672                           indf1	equ	0xFE7
  1673                           plusw1	equ	0xFE3
  1674                           fsr1h	equ	0xFE2
  1675                           fsr1l	equ	0xFE1
  1676                           indf2	equ	0xFDF
  1677                           postinc2	equ	0xFDE
  1678                           postdec2	equ	0xFDD
  1679                           plusw2	equ	0xFDB
  1680                           fsr2h	equ	0xFDA
  1681                           fsr2l	equ	0xFD9
  1682                           status	equ	0xFD8
  1683                           
  1684 ;; *************** function _uart_check_rx *****************
  1685 ;; Defined at:
  1686 ;;		line 26 in file "uart.c"
  1687 ;; Parameters:    Size  Location     Type
  1688 ;;		None
  1689 ;; Auto vars:     Size  Location     Type
  1690 ;;  tempo           2    2[COMRAM] unsigned int 
  1691 ;; Return value:  Size  Location     Type
  1692 ;;                  2    0[COMRAM] short 
  1693 ;; Registers used:
  1694 ;;		wreg, status,2, status,0
  1695 ;; Tracked objects:
  1696 ;;		On entry : 0/0
  1697 ;;		On exit  : 0/0
  1698 ;;		Unchanged: 0/0
  1699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1700 ;;      Params:         2       0       0       0       0       0       0       0       0
  1701 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1702 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1703 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1704 ;;Total ram usage:        4 bytes
  1705 ;; Hardware stack levels used:    1
  1706 ;; This function calls:
  1707 ;;		Nothing
  1708 ;; This function is called by:
  1709 ;;		_main
  1710 ;; This function uses a non-reentrant model
  1711 ;;
  1712                           
  1713                           	psect	text5
  1714  007396                     __ptext5:
  1715                           	opt stack 0
  1716  007396                     _uart_check_rx:
  1717                           	opt stack 30
  1718                           
  1719                           ;uart.c: 28: uint16_t tempo;
  1720                           ;uart.c: 30: RCSTAbits.OERR = 0;
  1721                           
  1722                           ;incstack = 0
  1723  007396  92AB               	bcf	4011,1,c	;volatile
  1724                           
  1725                           ;uart.c: 31: RCSTAbits.CREN = 0;
  1726  007398  98AB               	bcf	4011,4,c	;volatile
  1727                           
  1728                           ;uart.c: 32: __nop();
  1729  00739A  F000               	nop	
  1730                           
  1731                           ;uart.c: 33: RCSTAbits.CREN = 1;
  1732  00739C  88AB               	bsf	4011,4,c	;volatile
  1733                           
  1734                           ;uart.c: 35: tempo = 0xFFF;
  1735  00739E  0E0F               	movlw	15
  1736  0073A0  6E04               	movwf	uart_check_rx@tempo+1,c
  1737  0073A2  6803               	setf	uart_check_rx@tempo,c
  1738  0073A4                     
  1739                           ;uart.c: 38: --tempo;
  1740  0073A4  0603               	decf	uart_check_rx@tempo,f,c
  1741  0073A6  A0D8               	btfss	status,0,c
  1742  0073A8  0604               	decf	uart_check_rx@tempo+1,f,c
  1743                           
  1744                           ;uart.c: 39: } while (!RCIF && tempo > 0);
  1745  0073AA  BA9E               	btfsc	3998,5,c	;volatile
  1746  0073AC  D004               	goto	u1090
  1747  0073AE  5003               	movf	uart_check_rx@tempo,w,c
  1748  0073B0  1004               	iorwf	uart_check_rx@tempo+1,w,c
  1749  0073B2  A4D8               	btfss	status,2,c
  1750  0073B4  D7F7               	goto	l181
  1751  0073B6                     u1090:
  1752                           
  1753                           ;uart.c: 41: if (tempo > 0) {
  1754  0073B6  5003               	movf	uart_check_rx@tempo,w,c
  1755  0073B8  1004               	iorwf	uart_check_rx@tempo+1,w,c
  1756  0073BA  B4D8               	btfsc	status,2,c
  1757  0073BC  D005               	goto	l185
  1758                           
  1759                           ;uart.c: 42: return(0);
  1760  0073BE  0E00               	movlw	0
  1761  0073C0  6E02               	movwf	?_uart_check_rx+1,c
  1762  0073C2  0E00               	movlw	0
  1763  0073C4  6E01               	movwf	?_uart_check_rx,c
  1764  0073C6  0012               	return	
  1765  0073C8                     l185:
  1766                           
  1767                           ;uart.c: 43: }
  1768                           ;uart.c: 45: return(1);
  1769  0073C8  0E00               	movlw	0
  1770  0073CA  6E02               	movwf	?_uart_check_rx+1,c
  1771  0073CC  0E01               	movlw	1
  1772  0073CE  6E01               	movwf	?_uart_check_rx,c
  1773  0073D0  0012               	return	
  1774  0073D2                     __end_of_uart_check_rx:
  1775                           	opt stack 0
  1776                           tblptru	equ	0xFF8
  1777                           prodh	equ	0xFF4
  1778                           prodl	equ	0xFF3
  1779                           postinc0	equ	0xFEE
  1780                           wreg	equ	0xFE8
  1781                           indf1	equ	0xFE7
  1782                           plusw1	equ	0xFE3
  1783                           fsr1h	equ	0xFE2
  1784                           fsr1l	equ	0xFE1
  1785                           indf2	equ	0xFDF
  1786                           postinc2	equ	0xFDE
  1787                           postdec2	equ	0xFDD
  1788                           plusw2	equ	0xFDB
  1789                           fsr2h	equ	0xFDA
  1790                           fsr2l	equ	0xFD9
  1791                           status	equ	0xFD8
  1792                           
  1793 ;; *************** function _rcv_msg *****************
  1794 ;; Defined at:
  1795 ;;		line 13 in file "comunicacao.c"
  1796 ;; Parameters:    Size  Location     Type
  1797 ;;  data            2    0[COMRAM] PTR struct .
  1798 ;;		 -> main@dados(69), 
  1799 ;;  msg             2    2[COMRAM] PTR unsigned char 
  1800 ;;		 -> main@msg(33), 
  1801 ;; Auto vars:     Size  Location     Type
  1802 ;;  i               1   11[COMRAM] unsigned char 
  1803 ;; Return value:  Size  Location     Type
  1804 ;;                  1    wreg      void 
  1805 ;; Registers used:
  1806 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1807 ;; Tracked objects:
  1808 ;;		On entry : 0/0
  1809 ;;		On exit  : 0/0
  1810 ;;		Unchanged: 0/0
  1811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1812 ;;      Params:         4       0       0       0       0       0       0       0       0
  1813 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1814 ;;      Temps:          7       0       0       0       0       0       0       0       0
  1815 ;;      Totals:        12       0       0       0       0       0       0       0       0
  1816 ;;Total ram usage:       12 bytes
  1817 ;; Hardware stack levels used:    1
  1818 ;; This function calls:
  1819 ;;		Nothing
  1820 ;; This function is called by:
  1821 ;;		_main
  1822 ;; This function uses a non-reentrant model
  1823 ;;
  1824                           
  1825                           	psect	text6
  1826  0075F4                     __ptext6:
  1827                           	opt stack 0
  1828  0075F4                     _rcv_msg:
  1829                           	opt stack 30
  1830                           
  1831                           ;comunicacao.c: 30: for (uint8_t i = 0; i < data->count - 1; i++) {
  1832                           
  1833                           ;incstack = 0
  1834  0075F4  0E00               	movlw	0
  1835  0075F6  6E0C               	movwf	rcv_msg@i,c
  1836  0075F8  D018               	goto	l97
  1837  0075FA                     
  1838                           ;comunicacao.c: 31: msg[i] = data->buff[i + 6];
  1839  0075FA  500C               	movf	rcv_msg@i,w,c
  1840  0075FC  6E05               	movwf	??_rcv_msg& (0+255),c
  1841  0075FE  6A06               	clrf	(??_rcv_msg+1)& (0+255),c
  1842  007600  0E07               	movlw	7
  1843  007602  2605               	addwf	??_rcv_msg,f,c
  1844  007604  0E00               	movlw	0
  1845  007606  2206               	addwfc	??_rcv_msg+1,f,c
  1846  007608  5005               	movf	??_rcv_msg,w,c
  1847  00760A  2401               	addwf	rcv_msg@data,w,c
  1848  00760C  6ED9               	movwf	fsr2l,c
  1849  00760E  5006               	movf	??_rcv_msg+1,w,c
  1850  007610  2002               	addwfc	rcv_msg@data+1,w,c
  1851  007612  6EDA               	movwf	fsr2h,c
  1852  007614  500C               	movf	rcv_msg@i,w,c
  1853  007616  0D01               	mullw	1
  1854  007618  50F3               	movf	prodl,w,c
  1855  00761A  2403               	addwf	rcv_msg@msg,w,c
  1856  00761C  6EE1               	movwf	fsr1l,c
  1857  00761E  50F4               	movf	prodh,w,c
  1858  007620  2004               	addwfc	rcv_msg@msg+1,w,c
  1859  007622  6EE2               	movwf	fsr1h,c
  1860  007624  CFDF FFE7          	movff	indf2,indf1
  1861  007628  2A0C               	incf	rcv_msg@i,f,c
  1862  00762A                     l97:
  1863  00762A  0EFF               	movlw	255
  1864  00762C  6E05               	movwf	??_rcv_msg& (0+255),c
  1865  00762E  0EFF               	movlw	255
  1866  007630  6E06               	movwf	(??_rcv_msg+1)& (0+255),c
  1867  007632  C001  FFD9         	movff	rcv_msg@data,fsr2l
  1868  007636  C002  FFDA         	movff	rcv_msg@data+1,fsr2h
  1869  00763A  50DF               	movf	indf2,w,c
  1870  00763C  6E07               	movwf	(??_rcv_msg+2)& (0+255),c
  1871  00763E  6A08               	clrf	(??_rcv_msg+3)& (0+255),c
  1872  007640  5005               	movf	??_rcv_msg,w,c
  1873  007642  2607               	addwf	??_rcv_msg+2,f,c
  1874  007644  5006               	movf	??_rcv_msg+1,w,c
  1875  007646  2208               	addwfc	??_rcv_msg+3,f,c
  1876  007648  500C               	movf	rcv_msg@i,w,c
  1877  00764A  6E09               	movwf	(??_rcv_msg+4)& (0+255),c
  1878  00764C  6A0A               	clrf	(??_rcv_msg+5)& (0+255),c
  1879  00764E  5007               	movf	??_rcv_msg+2,w,c
  1880  007650  5C09               	subwf	??_rcv_msg+4,w,c
  1881  007652  500A               	movf	??_rcv_msg+5,w,c
  1882  007654  0A80               	xorlw	128
  1883  007656  6E0B               	movwf	(??_rcv_msg+6)& (0+255),c
  1884  007658  5008               	movf	??_rcv_msg+3,w,c
  1885  00765A  0A80               	xorlw	128
  1886  00765C  580B               	subwfb	(??_rcv_msg+6)& (0+255),w,c
  1887  00765E  B0D8               	btfsc	status,0,c
  1888  007660  0012               	return	
  1889  007662  D7CB               	goto	l98
  1890  007664                     __end_of_rcv_msg:
  1891                           	opt stack 0
  1892                           tblptru	equ	0xFF8
  1893                           prodh	equ	0xFF4
  1894                           prodl	equ	0xFF3
  1895                           postinc0	equ	0xFEE
  1896                           wreg	equ	0xFE8
  1897                           indf1	equ	0xFE7
  1898                           plusw1	equ	0xFE3
  1899                           fsr1h	equ	0xFE2
  1900                           fsr1l	equ	0xFE1
  1901                           indf2	equ	0xFDF
  1902                           postinc2	equ	0xFDE
  1903                           postdec2	equ	0xFDD
  1904                           plusw2	equ	0xFDB
  1905                           fsr2h	equ	0xFDA
  1906                           fsr2l	equ	0xFD9
  1907                           status	equ	0xFD8
  1908                           
  1909 ;; *************** function _mk_msg *****************
  1910 ;; Defined at:
  1911 ;;		line 35 in file "comunicacao.c"
  1912 ;; Parameters:    Size  Location     Type
  1913 ;;  data            2    0[COMRAM] PTR struct .
  1914 ;;		 -> main@dados(69), 
  1915 ;;  count           1    2[COMRAM] unsigned char 
  1916 ;;  string          2    3[COMRAM] PTR unsigned char 
  1917 ;;		 -> main@msg(33), 
  1918 ;; Auto vars:     Size  Location     Type
  1919 ;;  i               1    5[COMRAM] unsigned char 
  1920 ;; Return value:  Size  Location     Type
  1921 ;;                  1    wreg      void 
  1922 ;; Registers used:
  1923 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1924 ;; Tracked objects:
  1925 ;;		On entry : 0/0
  1926 ;;		On exit  : 0/0
  1927 ;;		Unchanged: 0/0
  1928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1929 ;;      Params:         5       0       0       0       0       0       0       0       0
  1930 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1931 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1932 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1933 ;;Total ram usage:        6 bytes
  1934 ;; Hardware stack levels used:    1
  1935 ;; This function calls:
  1936 ;;		Nothing
  1937 ;; This function is called by:
  1938 ;;		_main
  1939 ;; This function uses a non-reentrant model
  1940 ;;
  1941                           
  1942                           	psect	text7
  1943  007494                     __ptext7:
  1944                           	opt stack 0
  1945  007494                     _mk_msg:
  1946                           	opt stack 30
  1947                           
  1948                           ;comunicacao.c: 37: data->count = count;
  1949                           
  1950                           ;incstack = 0
  1951  007494  C001  FFD9         	movff	mk_msg@data,fsr2l
  1952  007498  C002  FFDA         	movff	mk_msg@data+1,fsr2h
  1953  00749C  C003  FFDF         	movff	mk_msg@count,indf2
  1954                           
  1955                           ;comunicacao.c: 39: for (uint8_t i = 0; i < count; i++) {
  1956  0074A0  0E00               	movlw	0
  1957  0074A2  6E06               	movwf	mk_msg@i,c
  1958  0074A4  D017               	goto	l103
  1959  0074A6                     
  1960                           ;comunicacao.c: 40: data->buff[i] = string[i];
  1961  0074A6  5006               	movf	mk_msg@i,w,c
  1962  0074A8  0D01               	mullw	1
  1963  0074AA  50F3               	movf	prodl,w,c
  1964  0074AC  2404               	addwf	mk_msg@string,w,c
  1965  0074AE  6ED9               	movwf	fsr2l,c
  1966  0074B0  50F4               	movf	prodh,w,c
  1967  0074B2  2005               	addwfc	mk_msg@string+1,w,c
  1968  0074B4  6EDA               	movwf	fsr2h,c
  1969  0074B6  5006               	movf	mk_msg@i,w,c
  1970  0074B8  0D01               	mullw	1
  1971  0074BA  0E01               	movlw	1
  1972  0074BC  26F3               	addwf	prodl,f,c
  1973  0074BE  0E00               	movlw	0
  1974  0074C0  22F4               	addwfc	prodh,f,c
  1975  0074C2  50F3               	movf	prodl,w,c
  1976  0074C4  2401               	addwf	mk_msg@data,w,c
  1977  0074C6  6EE1               	movwf	fsr1l,c
  1978  0074C8  50F4               	movf	prodh,w,c
  1979  0074CA  2002               	addwfc	mk_msg@data+1,w,c
  1980  0074CC  6EE2               	movwf	fsr1h,c
  1981  0074CE  CFDF FFE7          	movff	indf2,indf1
  1982  0074D2  2A06               	incf	mk_msg@i,f,c
  1983  0074D4                     l103:
  1984  0074D4  5003               	movf	mk_msg@count,w,c
  1985  0074D6  5C06               	subwf	mk_msg@i,w,c
  1986  0074D8  B0D8               	btfsc	status,0,c
  1987  0074DA  0012               	return	
  1988  0074DC  D7E4               	goto	l104
  1989  0074DE                     __end_of_mk_msg:
  1990                           	opt stack 0
  1991                           tblptru	equ	0xFF8
  1992                           prodh	equ	0xFF4
  1993                           prodl	equ	0xFF3
  1994                           postinc0	equ	0xFEE
  1995                           wreg	equ	0xFE8
  1996                           indf1	equ	0xFE7
  1997                           plusw1	equ	0xFE3
  1998                           fsr1h	equ	0xFE2
  1999                           fsr1l	equ	0xFE1
  2000                           indf2	equ	0xFDF
  2001                           postinc2	equ	0xFDE
  2002                           postdec2	equ	0xFDD
  2003                           plusw2	equ	0xFDB
  2004                           fsr2h	equ	0xFDA
  2005                           fsr2l	equ	0xFD9
  2006                           status	equ	0xFD8
  2007                           
  2008 ;; *************** function _lcd_write *****************
  2009 ;; Defined at:
  2010 ;;		line 53 in file "display.c"
  2011 ;; Parameters:    Size  Location     Type
  2012 ;;  lcd             2    0[COMRAM] PTR struct .
  2013 ;;		 -> main@lcd(33), 
  2014 ;;  row             1    2[COMRAM] unsigned char 
  2015 ;;  col             1    3[COMRAM] unsigned char 
  2016 ;;  string          2    4[COMRAM] PTR unsigned char 
  2017 ;;		 -> main@msg(33), 
  2018 ;; Auto vars:     Size  Location     Type
  2019 ;;		None
  2020 ;; Return value:  Size  Location     Type
  2021 ;;                  2    0[COMRAM] int 
  2022 ;; Registers used:
  2023 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2024 ;; Tracked objects:
  2025 ;;		On entry : 0/0
  2026 ;;		On exit  : 0/0
  2027 ;;		Unchanged: 0/0
  2028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2029 ;;      Params:         6       0       0       0       0       0       0       0       0
  2030 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2031 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2032 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2033 ;;Total ram usage:        6 bytes
  2034 ;; Hardware stack levels used:    1
  2035 ;; This function calls:
  2036 ;;		Nothing
  2037 ;; This function is called by:
  2038 ;;		_main
  2039 ;; This function uses a non-reentrant model
  2040 ;;
  2041                           
  2042                           	psect	text8
  2043  007708                     __ptext8:
  2044                           	opt stack 0
  2045  007708                     _lcd_write:
  2046                           	opt stack 30
  2047                           
  2048                           ;display.c: 55: if (row == 0 || row > 2 || col == 0 || col > 16) {
  2049                           
  2050                           ;incstack = 0
  2051  007708  5003               	movf	lcd_write@row,w,c
  2052  00770A  B4D8               	btfsc	status,2,c
  2053  00770C  0012               	return	
  2054  00770E  0E03               	movlw	3
  2055  007710  6003               	cpfslt	lcd_write@row,c
  2056  007712  0012               	return	
  2057  007714  5004               	movf	lcd_write@col,w,c
  2058  007716  B4D8               	btfsc	status,2,c
  2059  007718  0012               	return	
  2060  00771A  0E10               	movlw	16
  2061  00771C  6404               	cpfsgt	lcd_write@col,c
  2062  00771E  D001               	goto	l245
  2063  007720  0012               	return	
  2064  007722                     l245:
  2065                           
  2066                           ;display.c: 57: }
  2067                           ;display.c: 59: row--;
  2068  007722  0603               	decf	lcd_write@row,f,c
  2069                           
  2070                           ;display.c: 60: col--;
  2071  007724  0604               	decf	lcd_write@col,f,c
  2072                           
  2073                           ;display.c: 62: if (row == 0) {
  2074  007726  5003               	movf	lcd_write@row,w,c
  2075  007728  B4D8               	btfsc	status,2,c
  2076  00772A  D016               	goto	l250
  2077  00772C  D039               	goto	l255
  2078  00772E                     
  2079                           ;display.c: 64: lcd->Memory[0][col++] = *string;
  2080  00772E  C005  FFD9         	movff	lcd_write@string,fsr2l
  2081  007732  C006  FFDA         	movff	lcd_write@string+1,fsr2h
  2082  007736  5004               	movf	lcd_write@col,w,c
  2083  007738  0D01               	mullw	1
  2084  00773A  0E01               	movlw	1
  2085  00773C  26F3               	addwf	prodl,f,c
  2086  00773E  0E00               	movlw	0
  2087  007740  22F4               	addwfc	prodh,f,c
  2088  007742  50F3               	movf	prodl,w,c
  2089  007744  2401               	addwf	lcd_write@lcd,w,c
  2090  007746  6EE1               	movwf	fsr1l,c
  2091  007748  50F4               	movf	prodh,w,c
  2092  00774A  2002               	addwfc	lcd_write@lcd+1,w,c
  2093  00774C  6EE2               	movwf	fsr1h,c
  2094  00774E  CFDF FFE7          	movff	indf2,indf1
  2095  007752  2A04               	incf	lcd_write@col,f,c
  2096                           
  2097                           ;display.c: 65: string++;
  2098  007754  4A05               	infsnz	lcd_write@string,f,c
  2099  007756  2A06               	incf	lcd_write@string+1,f,c
  2100  007758                     l250:
  2101  007758  C005  FFD9         	movff	lcd_write@string,fsr2l
  2102  00775C  C006  FFDA         	movff	lcd_write@string+1,fsr2h
  2103  007760  50DF               	movf	indf2,w,c
  2104  007762  B4D8               	btfsc	status,2,c
  2105  007764  D003               	goto	u1220
  2106  007766  0E0F               	movlw	15
  2107  007768  6404               	cpfsgt	lcd_write@col,c
  2108  00776A  D7E1               	goto	l251
  2109  00776C                     u1220:
  2110                           
  2111                           ;display.c: 66: }
  2112                           ;display.c: 67: col = 0;
  2113  00776C  0E00               	movlw	0
  2114  00776E  6E04               	movwf	lcd_write@col,c
  2115                           
  2116                           ;display.c: 68: row = 1;
  2117  007770  0E01               	movlw	1
  2118  007772  6E03               	movwf	lcd_write@row,c
  2119                           
  2120                           ;display.c: 69: }
  2121                           ;display.c: 72: while (*string && col <= 0x0F) {
  2122  007774  D015               	goto	l255
  2123  007776                     
  2124                           ;display.c: 73: lcd->Memory[1][col++] = *string;
  2125  007776  C005  FFD9         	movff	lcd_write@string,fsr2l
  2126  00777A  C006  FFDA         	movff	lcd_write@string+1,fsr2h
  2127  00777E  5004               	movf	lcd_write@col,w,c
  2128  007780  0D01               	mullw	1
  2129  007782  0E11               	movlw	17
  2130  007784  26F3               	addwf	prodl,f,c
  2131  007786  0E00               	movlw	0
  2132  007788  22F4               	addwfc	prodh,f,c
  2133  00778A  50F3               	movf	prodl,w,c
  2134  00778C  2401               	addwf	lcd_write@lcd,w,c
  2135  00778E  6EE1               	movwf	fsr1l,c
  2136  007790  50F4               	movf	prodh,w,c
  2137  007792  2002               	addwfc	lcd_write@lcd+1,w,c
  2138  007794  6EE2               	movwf	fsr1h,c
  2139  007796  CFDF FFE7          	movff	indf2,indf1
  2140  00779A  2A04               	incf	lcd_write@col,f,c
  2141                           
  2142                           ;display.c: 74: string++;
  2143  00779C  4A05               	infsnz	lcd_write@string,f,c
  2144  00779E  2A06               	incf	lcd_write@string+1,f,c
  2145  0077A0                     l255:
  2146  0077A0  C005  FFD9         	movff	lcd_write@string,fsr2l
  2147  0077A4  C006  FFDA         	movff	lcd_write@string+1,fsr2h
  2148  0077A8  50DF               	movf	indf2,w,c
  2149  0077AA  B4D8               	btfsc	status,2,c
  2150  0077AC  D003               	goto	u1240
  2151  0077AE  0E0F               	movlw	15
  2152  0077B0  6404               	cpfsgt	lcd_write@col,c
  2153  0077B2  D7E1               	goto	l256
  2154  0077B4                     u1240:
  2155                           
  2156                           ;display.c: 75: }
  2157                           ;display.c: 77: lcd->NeedsRedraw = 1;
  2158  0077B4  C001  FFD9         	movff	lcd_write@lcd,fsr2l
  2159  0077B8  C002  FFDA         	movff	lcd_write@lcd+1,fsr2h
  2160  0077BC  0E01               	movlw	1
  2161  0077BE  6EDF               	movwf	indf2,c
  2162  0077C0  0012               	return	
  2163  0077C2                     __end_of_lcd_write:
  2164                           	opt stack 0
  2165                           tblptru	equ	0xFF8
  2166                           prodh	equ	0xFF4
  2167                           prodl	equ	0xFF3
  2168                           postinc0	equ	0xFEE
  2169                           wreg	equ	0xFE8
  2170                           indf1	equ	0xFE7
  2171                           plusw1	equ	0xFE3
  2172                           fsr1h	equ	0xFE2
  2173                           fsr1l	equ	0xFE1
  2174                           indf2	equ	0xFDF
  2175                           postinc2	equ	0xFDE
  2176                           postdec2	equ	0xFDD
  2177                           plusw2	equ	0xFDB
  2178                           fsr2h	equ	0xFDA
  2179                           fsr2l	equ	0xFD9
  2180                           status	equ	0xFD8
  2181                           
  2182 ;; *************** function _lcd_runtime *****************
  2183 ;; Defined at:
  2184 ;;		line 82 in file "display.c"
  2185 ;; Parameters:    Size  Location     Type
  2186 ;;  lcd             2    6[COMRAM] PTR struct .
  2187 ;;		 -> main@lcd(33), 
  2188 ;; Auto vars:     Size  Location     Type
  2189 ;;  i               2   12[COMRAM] int 
  2190 ;;  i               2   10[COMRAM] int 
  2191 ;; Return value:  Size  Location     Type
  2192 ;;                  1    wreg      void 
  2193 ;; Registers used:
  2194 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2195 ;; Tracked objects:
  2196 ;;		On entry : 0/0
  2197 ;;		On exit  : 0/0
  2198 ;;		Unchanged: 0/0
  2199 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2200 ;;      Params:         2       0       0       0       0       0       0       0       0
  2201 ;;      Locals:         4       0       0       0       0       0       0       0       0
  2202 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2203 ;;      Totals:         8       0       0       0       0       0       0       0       0
  2204 ;;Total ram usage:        8 bytes
  2205 ;; Hardware stack levels used:    1
  2206 ;; Hardware stack levels required when called:    2
  2207 ;; This function calls:
  2208 ;;		_BusyXLCD
  2209 ;;		_SetDDRamAddr
  2210 ;;		_WriteDataXLCD
  2211 ;; This function is called by:
  2212 ;;		_main
  2213 ;; This function uses a non-reentrant model
  2214 ;;
  2215                           
  2216                           	psect	text9
  2217  0077C2                     __ptext9:
  2218                           	opt stack 0
  2219  0077C2                     _lcd_runtime:
  2220                           	opt stack 28
  2221                           
  2222                           ;display.c: 83: while (BusyXLCD());
  2223                           
  2224                           ;incstack = 0
  2225  0077C2  ECAE  F039         	call	_BusyXLCD	;wreg free
  2226  0077C6  0900               	iorlw	0
  2227  0077C8  A4D8               	btfss	status,2,c
  2228  0077CA  D7FB               	goto	_lcd_runtime
  2229                           
  2230                           ;display.c: 85: if (lcd->NeedsRedraw == 1) {
  2231  0077CC  C007  FFD9         	movff	lcd_runtime@lcd,fsr2l
  2232  0077D0  C008  FFDA         	movff	lcd_runtime@lcd+1,fsr2h
  2233  0077D4  04DE               	decf	postinc2,w,c
  2234  0077D6  A4D8               	btfss	status,2,c
  2235  0077D8  0012               	return	
  2236                           
  2237                           ;display.c: 86: SetDDRamAddr(0x00);
  2238  0077DA  0E00               	movlw	0
  2239  0077DC  EC6F  F03A         	call	_SetDDRamAddr
  2240                           
  2241                           ;display.c: 87: for (int i = 0; i < 16; i++) {
  2242  0077E0  0E00               	movlw	0
  2243  0077E2  6E0C               	movwf	lcd_runtime@i+1,c
  2244  0077E4  0E00               	movlw	0
  2245  0077E6  6E0B               	movwf	lcd_runtime@i,c
  2246  0077E8  BE0C               	btfsc	lcd_runtime@i+1,7,c
  2247  0077EA  D006               	goto	l266
  2248  0077EC  500C               	movf	lcd_runtime@i+1,w,c
  2249  0077EE  E122               	bnz	l2187
  2250  0077F0  0E10               	movlw	16
  2251  0077F2  5C0B               	subwf	lcd_runtime@i,w,c
  2252  0077F4  B0D8               	btfsc	status,0,c
  2253  0077F6  D01E               	goto	u1460
  2254  0077F8                     l266:
  2255                           
  2256                           ;display.c: 88: while (BusyXLCD());
  2257  0077F8  ECAE  F039         	call	_BusyXLCD	;wreg free
  2258  0077FC  0900               	iorlw	0
  2259  0077FE  A4D8               	btfss	status,2,c
  2260  007800  D7FB               	goto	l266
  2261                           
  2262                           ;display.c: 89: WriteDataXLCD((char) lcd->Memory[0][i]);
  2263  007802  0E01               	movlw	1
  2264  007804  240B               	addwf	lcd_runtime@i,w,c
  2265  007806  6E09               	movwf	??_lcd_runtime& (0+255),c
  2266  007808  0E00               	movlw	0
  2267  00780A  200C               	addwfc	lcd_runtime@i+1,w,c
  2268  00780C  6E0A               	movwf	(??_lcd_runtime+1)& (0+255),c
  2269  00780E  5009               	movf	??_lcd_runtime,w,c
  2270  007810  2407               	addwf	lcd_runtime@lcd,w,c
  2271  007812  6ED9               	movwf	fsr2l,c
  2272  007814  500A               	movf	??_lcd_runtime+1,w,c
  2273  007816  2008               	addwfc	lcd_runtime@lcd+1,w,c
  2274  007818  6EDA               	movwf	fsr2h,c
  2275  00781A  50DF               	movf	indf2,w,c
  2276  00781C  EC08  F03A         	call	_WriteDataXLCD
  2277  007820  4A0B               	infsnz	lcd_runtime@i,f,c
  2278  007822  2A0C               	incf	lcd_runtime@i+1,f,c
  2279  007824  BE0C               	btfsc	lcd_runtime@i+1,7,c
  2280  007826  D7E8               	goto	l266
  2281  007828  500C               	movf	lcd_runtime@i+1,w,c
  2282  00782A  E104               	bnz	l2187
  2283  00782C  0E10               	movlw	16
  2284  00782E  5C0B               	subwf	lcd_runtime@i,w,c
  2285  007830  A0D8               	btfss	status,0,c
  2286  007832  D7E2               	goto	l266
  2287  007834                     u1460:
  2288  007834                     l2187:
  2289                           
  2290                           ;display.c: 90: }
  2291                           ;display.c: 91: SetDDRamAddr(0x40);
  2292  007834  0E40               	movlw	64
  2293  007836  EC6F  F03A         	call	_SetDDRamAddr
  2294                           
  2295                           ;display.c: 92: for (int i = 0; i < 16; i++) {
  2296  00783A  0E00               	movlw	0
  2297  00783C  6E0E               	movwf	lcd_runtime@i_626+1,c
  2298  00783E  0E00               	movlw	0
  2299  007840  6E0D               	movwf	lcd_runtime@i_626,c
  2300  007842  BE0E               	btfsc	lcd_runtime@i_626+1,7,c
  2301  007844  D006               	goto	l271
  2302  007846  500E               	movf	lcd_runtime@i_626+1,w,c
  2303  007848  E122               	bnz	l2203
  2304  00784A  0E10               	movlw	16
  2305  00784C  5C0D               	subwf	lcd_runtime@i_626,w,c
  2306  00784E  B0D8               	btfsc	status,0,c
  2307  007850  D01E               	goto	u1490
  2308  007852                     l271:
  2309                           
  2310                           ;display.c: 93: while (BusyXLCD());
  2311  007852  ECAE  F039         	call	_BusyXLCD	;wreg free
  2312  007856  0900               	iorlw	0
  2313  007858  A4D8               	btfss	status,2,c
  2314  00785A  D7FB               	goto	l271
  2315                           
  2316                           ;display.c: 94: WriteDataXLCD((char) lcd->Memory[1][i]);
  2317  00785C  0E11               	movlw	17
  2318  00785E  240D               	addwf	lcd_runtime@i_626,w,c
  2319  007860  6E09               	movwf	??_lcd_runtime& (0+255),c
  2320  007862  0E00               	movlw	0
  2321  007864  200E               	addwfc	lcd_runtime@i_626+1,w,c
  2322  007866  6E0A               	movwf	(??_lcd_runtime+1)& (0+255),c
  2323  007868  5009               	movf	??_lcd_runtime,w,c
  2324  00786A  2407               	addwf	lcd_runtime@lcd,w,c
  2325  00786C  6ED9               	movwf	fsr2l,c
  2326  00786E  500A               	movf	??_lcd_runtime+1,w,c
  2327  007870  2008               	addwfc	lcd_runtime@lcd+1,w,c
  2328  007872  6EDA               	movwf	fsr2h,c
  2329  007874  50DF               	movf	indf2,w,c
  2330  007876  EC08  F03A         	call	_WriteDataXLCD
  2331  00787A  4A0D               	infsnz	lcd_runtime@i_626,f,c
  2332  00787C  2A0E               	incf	lcd_runtime@i_626+1,f,c
  2333  00787E  BE0E               	btfsc	lcd_runtime@i_626+1,7,c
  2334  007880  D7E8               	goto	l271
  2335  007882  500E               	movf	lcd_runtime@i_626+1,w,c
  2336  007884  E104               	bnz	l2203
  2337  007886  0E10               	movlw	16
  2338  007888  5C0D               	subwf	lcd_runtime@i_626,w,c
  2339  00788A  A0D8               	btfss	status,0,c
  2340  00788C  D7E2               	goto	l271
  2341  00788E                     u1490:
  2342  00788E                     l2203:
  2343                           
  2344                           ;display.c: 95: }
  2345                           ;display.c: 97: lcd->NeedsRedraw = 0;
  2346  00788E  C007  FFD9         	movff	lcd_runtime@lcd,fsr2l
  2347  007892  C008  FFDA         	movff	lcd_runtime@lcd+1,fsr2h
  2348  007896  0E00               	movlw	0
  2349  007898  6EDF               	movwf	indf2,c
  2350  00789A  0012               	return	
  2351  00789C                     __end_of_lcd_runtime:
  2352                           	opt stack 0
  2353                           tblptru	equ	0xFF8
  2354                           prodh	equ	0xFF4
  2355                           prodl	equ	0xFF3
  2356                           postinc0	equ	0xFEE
  2357                           wreg	equ	0xFE8
  2358                           indf1	equ	0xFE7
  2359                           plusw1	equ	0xFE3
  2360                           fsr1h	equ	0xFE2
  2361                           fsr1l	equ	0xFE1
  2362                           indf2	equ	0xFDF
  2363                           postinc2	equ	0xFDE
  2364                           postdec2	equ	0xFDD
  2365                           plusw2	equ	0xFDB
  2366                           fsr2h	equ	0xFDA
  2367                           fsr2l	equ	0xFD9
  2368                           status	equ	0xFD8
  2369                           
  2370 ;; *************** function _WriteDataXLCD *****************
  2371 ;; Defined at:
  2372 ;;		line 16 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\pic18\plib\XLCD\writdata.c"
  2373 ;; Parameters:    Size  Location     Type
  2374 ;;  data            1    wreg     unsigned char 
  2375 ;; Auto vars:     Size  Location     Type
  2376 ;;  data            1    2[COMRAM] unsigned char 
  2377 ;; Return value:  Size  Location     Type
  2378 ;;                  1    wreg      void 
  2379 ;; Registers used:
  2380 ;;		wreg, status,2, status,0, cstack
  2381 ;; Tracked objects:
  2382 ;;		On entry : 0/0
  2383 ;;		On exit  : 0/0
  2384 ;;		Unchanged: 0/0
  2385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2386 ;;      Params:         0       0       0       0       0       0       0       0       0
  2387 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2388 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2389 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2390 ;;Total ram usage:        1 bytes
  2391 ;; Hardware stack levels used:    1
  2392 ;; Hardware stack levels required when called:    1
  2393 ;; This function calls:
  2394 ;;		_DelayFor18TCY
  2395 ;; This function is called by:
  2396 ;;		_lcd_runtime
  2397 ;; This function uses a non-reentrant model
  2398 ;;
  2399                           
  2400                           	psect	text10
  2401  007410                     __ptext10:
  2402                           	opt stack 0
  2403  007410                     _WriteDataXLCD:
  2404                           	opt stack 28
  2405                           
  2406                           ;incstack = 0
  2407                           ;WriteDataXLCD@data stored from wreg
  2408  007410  6E03               	movwf	WriteDataXLCD@data,c
  2409  007412  0EF0               	movlw	240
  2410  007414  1693               	andwf	3987,f,c	;volatile
  2411  007416  0EF0               	movlw	240
  2412  007418  1681               	andwf	3969,f,c	;volatile
  2413  00741A  3803               	swapf	WriteDataXLCD@data,w,c
  2414  00741C  0B0F               	andlw	15
  2415  00741E  0B0F               	andlw	15
  2416  007420  1281               	iorwf	3969,f,c	;volatile
  2417  007422  8A8A               	bsf	3978,5,c	;volatile
  2418  007424  9C8A               	bcf	3978,6,c	;volatile
  2419  007426  EC5B  F039         	call	_DelayFor18TCY	;wreg free
  2420  00742A  888A               	bsf	3978,4,c	;volatile
  2421  00742C  EC5B  F039         	call	_DelayFor18TCY	;wreg free
  2422  007430  988A               	bcf	3978,4,c	;volatile
  2423  007432  0EF0               	movlw	240
  2424  007434  1681               	andwf	3969,f,c	;volatile
  2425  007436  5003               	movf	WriteDataXLCD@data,w,c
  2426  007438  0B0F               	andlw	15
  2427  00743A  1281               	iorwf	3969,f,c	;volatile
  2428  00743C  EC5B  F039         	call	_DelayFor18TCY	;wreg free
  2429  007440  888A               	bsf	3978,4,c	;volatile
  2430  007442  EC5B  F039         	call	_DelayFor18TCY	;wreg free
  2431  007446  988A               	bcf	3978,4,c	;volatile
  2432  007448  0E0F               	movlw	15
  2433  00744A  1293               	iorwf	3987,f,c	;volatile
  2434  00744C  0012               	return	
  2435  00744E                     __end_of_WriteDataXLCD:
  2436                           	opt stack 0
  2437                           tblptru	equ	0xFF8
  2438                           prodh	equ	0xFF4
  2439                           prodl	equ	0xFF3
  2440                           postinc0	equ	0xFEE
  2441                           wreg	equ	0xFE8
  2442                           indf1	equ	0xFE7
  2443                           plusw1	equ	0xFE3
  2444                           fsr1h	equ	0xFE2
  2445                           fsr1l	equ	0xFE1
  2446                           indf2	equ	0xFDF
  2447                           postinc2	equ	0xFDE
  2448                           postdec2	equ	0xFDD
  2449                           plusw2	equ	0xFDB
  2450                           fsr2h	equ	0xFDA
  2451                           fsr2l	equ	0xFD9
  2452                           status	equ	0xFD8
  2453                           
  2454 ;; *************** function _lcd_init *****************
  2455 ;; Defined at:
  2456 ;;		line 16 in file "display.c"
  2457 ;; Parameters:    Size  Location     Type
  2458 ;;  lcd             2    7[COMRAM] PTR struct .
  2459 ;;		 -> main@lcd(33), 
  2460 ;; Auto vars:     Size  Location     Type
  2461 ;;		None
  2462 ;; Return value:  Size  Location     Type
  2463 ;;                  1    wreg      void 
  2464 ;; Registers used:
  2465 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2466 ;; Tracked objects:
  2467 ;;		On entry : 0/0
  2468 ;;		On exit  : 0/0
  2469 ;;		Unchanged: 0/0
  2470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2471 ;;      Params:         2       0       0       0       0       0       0       0       0
  2472 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2473 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2474 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2475 ;;Total ram usage:        2 bytes
  2476 ;; Hardware stack levels used:    1
  2477 ;; Hardware stack levels required when called:    3
  2478 ;; This function calls:
  2479 ;;		_BusyXLCD
  2480 ;;		_OpenXLCD
  2481 ;;		_WriteCmdXLCD
  2482 ;;		_lcd_clean
  2483 ;;		_lcd_mem_clean
  2484 ;; This function is called by:
  2485 ;;		_main
  2486 ;; This function uses a non-reentrant model
  2487 ;;
  2488                           
  2489                           	psect	text11
  2490  00744E                     __ptext11:
  2491                           	opt stack 0
  2492  00744E                     _lcd_init:
  2493                           	opt stack 27
  2494                           
  2495                           ;display.c: 17: TRISB = 0;
  2496                           
  2497                           ;incstack = 0
  2498  00744E  0E00               	movlw	0
  2499  007450  6E93               	movwf	3987,c	;volatile
  2500                           
  2501                           ;display.c: 19: OpenXLCD(0b00101100 & 0b00111000);
  2502  007452  0E28               	movlw	40
  2503  007454  EC32  F03B         	call	_OpenXLCD
  2504  007458  ECAE  F039         	call	_BusyXLCD	;wreg free
  2505  00745C  0900               	iorlw	0
  2506  00745E  A4D8               	btfss	status,2,c
  2507  007460  D7FB               	goto	l220
  2508                           
  2509                           ;display.c: 21: WriteCmdXLCD(0x06);
  2510  007462  0E06               	movlw	6
  2511  007464  ECE9  F039         	call	_WriteCmdXLCD
  2512  007468  ECAE  F039         	call	_BusyXLCD	;wreg free
  2513  00746C  0900               	iorlw	0
  2514  00746E  A4D8               	btfss	status,2,c
  2515  007470  D7FB               	goto	l223
  2516                           
  2517                           ;display.c: 23: WriteCmdXLCD(0x0C);
  2518  007472  0E0C               	movlw	12
  2519  007474  ECE9  F039         	call	_WriteCmdXLCD
  2520  007478  ECAE  F039         	call	_BusyXLCD	;wreg free
  2521  00747C  0900               	iorlw	0
  2522  00747E  A4D8               	btfss	status,2,c
  2523  007480  D7FB               	goto	l226
  2524                           
  2525                           ;display.c: 26: lcd_mem_clean(lcd);
  2526  007482  C008  F001         	movff	lcd_init@lcd,lcd_mem_clean@lcd
  2527  007486  C009  F002         	movff	lcd_init@lcd+1,lcd_mem_clean@lcd+1
  2528  00748A  EC98  F03A         	call	_lcd_mem_clean	;wreg free
  2529                           
  2530                           ;display.c: 27: lcd_clean();
  2531  00748E  EC4C  F039         	call	_lcd_clean	;wreg free
  2532  007492  0012               	return		;funcret
  2533  007494                     __end_of_lcd_init:
  2534                           	opt stack 0
  2535                           tblptru	equ	0xFF8
  2536                           prodh	equ	0xFF4
  2537                           prodl	equ	0xFF3
  2538                           postinc0	equ	0xFEE
  2539                           wreg	equ	0xFE8
  2540                           indf1	equ	0xFE7
  2541                           plusw1	equ	0xFE3
  2542                           fsr1h	equ	0xFE2
  2543                           fsr1l	equ	0xFE1
  2544                           indf2	equ	0xFDF
  2545                           postinc2	equ	0xFDE
  2546                           postdec2	equ	0xFDD
  2547                           plusw2	equ	0xFDB
  2548                           fsr2h	equ	0xFDA
  2549                           fsr2l	equ	0xFD9
  2550                           status	equ	0xFD8
  2551                           
  2552 ;; *************** function _OpenXLCD *****************
  2553 ;; Defined at:
  2554 ;;		line 19 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\pic18\plib\XLCD\openxlcd.c"
  2555 ;; Parameters:    Size  Location     Type
  2556 ;;  lcdtype         1    wreg     unsigned char 
  2557 ;; Auto vars:     Size  Location     Type
  2558 ;;  lcdtype         1    6[COMRAM] unsigned char 
  2559 ;; Return value:  Size  Location     Type
  2560 ;;                  1    wreg      void 
  2561 ;; Registers used:
  2562 ;;		wreg, status,2, status,0, cstack
  2563 ;; Tracked objects:
  2564 ;;		On entry : 0/0
  2565 ;;		On exit  : 0/0
  2566 ;;		Unchanged: 0/0
  2567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2568 ;;      Params:         0       0       0       0       0       0       0       0       0
  2569 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2570 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2571 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2572 ;;Total ram usage:        1 bytes
  2573 ;; Hardware stack levels used:    1
  2574 ;; Hardware stack levels required when called:    2
  2575 ;; This function calls:
  2576 ;;		_BusyXLCD
  2577 ;;		_Delay10KTCYx
  2578 ;;		_DelayPORXLCD
  2579 ;;		_SetDDRamAddr
  2580 ;;		_WriteCmdXLCD
  2581 ;; This function is called by:
  2582 ;;		_lcd_init
  2583 ;; This function uses a non-reentrant model
  2584 ;;
  2585                           
  2586                           	psect	text12
  2587  007664                     __ptext12:
  2588                           	opt stack 0
  2589  007664                     _OpenXLCD:
  2590                           	opt stack 27
  2591                           
  2592                           ;incstack = 0
  2593                           ;OpenXLCD@lcdtype stored from wreg
  2594  007664  6E07               	movwf	OpenXLCD@lcdtype,c
  2595  007666  0EF0               	movlw	240
  2596  007668  1681               	andwf	3969,f,c	;volatile
  2597  00766A  0EF0               	movlw	240
  2598  00766C  1693               	andwf	3987,f,c	;volatile
  2599  00766E  9C93               	bcf	3987,6,c	;volatile
  2600  007670  9A93               	bcf	3987,5,c	;volatile
  2601  007672  9893               	bcf	3987,4,c	;volatile
  2602  007674  9C8A               	bcf	3978,6,c	;volatile
  2603  007676  9A8A               	bcf	3978,5,c	;volatile
  2604  007678  988A               	bcf	3978,4,c	;volatile
  2605  00767A  EC17  F039         	call	_DelayPORXLCD	;wreg free
  2606  00767E  0E30               	movlw	48
  2607  007680  ECE9  F039         	call	_WriteCmdXLCD
  2608  007684  0E05               	movlw	5
  2609  007686  EC36  F039         	call	_Delay10KTCYx
  2610  00768A  0E30               	movlw	48
  2611  00768C  ECE9  F039         	call	_WriteCmdXLCD
  2612  007690  0E01               	movlw	1
  2613  007692  EC36  F039         	call	_Delay10KTCYx
  2614  007696  0E32               	movlw	50
  2615  007698  ECE9  F039         	call	_WriteCmdXLCD
  2616  00769C  ECAE  F039         	call	_BusyXLCD	;wreg free
  2617  0076A0  0900               	iorlw	0
  2618  0076A2  A4D8               	btfss	status,2,c
  2619  0076A4  D7FB               	goto	l321
  2620  0076A6                     u930:
  2621  0076A6  ECAE  F039         	call	_BusyXLCD	;wreg free
  2622  0076AA  0900               	iorlw	0
  2623  0076AC  A4D8               	btfss	status,2,c
  2624  0076AE  D7FB               	goto	u930
  2625  0076B0  5007               	movf	OpenXLCD@lcdtype,w,c
  2626  0076B2  ECE9  F039         	call	_WriteCmdXLCD
  2627  0076B6  ECAE  F039         	call	_BusyXLCD	;wreg free
  2628  0076BA  0900               	iorlw	0
  2629  0076BC  A4D8               	btfss	status,2,c
  2630  0076BE  D7FB               	goto	l327
  2631  0076C0  0E08               	movlw	8
  2632  0076C2  ECE9  F039         	call	_WriteCmdXLCD
  2633  0076C6  ECAE  F039         	call	_BusyXLCD	;wreg free
  2634  0076CA  0900               	iorlw	0
  2635  0076CC  A4D8               	btfss	status,2,c
  2636  0076CE  D7FB               	goto	l330
  2637  0076D0  0E0F               	movlw	15
  2638  0076D2  ECE9  F039         	call	_WriteCmdXLCD
  2639  0076D6  ECAE  F039         	call	_BusyXLCD	;wreg free
  2640  0076DA  0900               	iorlw	0
  2641  0076DC  A4D8               	btfss	status,2,c
  2642  0076DE  D7FB               	goto	l333
  2643  0076E0  0E01               	movlw	1
  2644  0076E2  ECE9  F039         	call	_WriteCmdXLCD
  2645  0076E6  ECAE  F039         	call	_BusyXLCD	;wreg free
  2646  0076EA  0900               	iorlw	0
  2647  0076EC  A4D8               	btfss	status,2,c
  2648  0076EE  D7FB               	goto	l336
  2649  0076F0  0E04               	movlw	4
  2650  0076F2  ECE9  F039         	call	_WriteCmdXLCD
  2651  0076F6  ECAE  F039         	call	_BusyXLCD	;wreg free
  2652  0076FA  0900               	iorlw	0
  2653  0076FC  A4D8               	btfss	status,2,c
  2654  0076FE  D7FB               	goto	l339
  2655  007700  0E80               	movlw	128
  2656  007702  EC6F  F03A         	call	_SetDDRamAddr
  2657  007706  0012               	return	
  2658  007708                     __end_of_OpenXLCD:
  2659                           	opt stack 0
  2660                           tblptru	equ	0xFF8
  2661                           prodh	equ	0xFF4
  2662                           prodl	equ	0xFF3
  2663                           postinc0	equ	0xFEE
  2664                           wreg	equ	0xFE8
  2665                           indf1	equ	0xFE7
  2666                           plusw1	equ	0xFE3
  2667                           fsr1h	equ	0xFE2
  2668                           fsr1l	equ	0xFE1
  2669                           indf2	equ	0xFDF
  2670                           postinc2	equ	0xFDE
  2671                           postdec2	equ	0xFDD
  2672                           plusw2	equ	0xFDB
  2673                           fsr2h	equ	0xFDA
  2674                           fsr2l	equ	0xFD9
  2675                           status	equ	0xFD8
  2676                           
  2677 ;; *************** function _SetDDRamAddr *****************
  2678 ;; Defined at:
  2679 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\pic18\plib\XLCD\setddram.c"
  2680 ;; Parameters:    Size  Location     Type
  2681 ;;  DDaddr          1    wreg     unsigned char 
  2682 ;; Auto vars:     Size  Location     Type
  2683 ;;  DDaddr          1    5[COMRAM] unsigned char 
  2684 ;; Return value:  Size  Location     Type
  2685 ;;                  1    wreg      void 
  2686 ;; Registers used:
  2687 ;;		wreg, status,2, status,0, cstack
  2688 ;; Tracked objects:
  2689 ;;		On entry : 0/0
  2690 ;;		On exit  : 0/0
  2691 ;;		Unchanged: 0/0
  2692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2693 ;;      Params:         0       0       0       0       0       0       0       0       0
  2694 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2695 ;;      Temps:          3       0       0       0       0       0       0       0       0
  2696 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2697 ;;Total ram usage:        4 bytes
  2698 ;; Hardware stack levels used:    1
  2699 ;; Hardware stack levels required when called:    1
  2700 ;; This function calls:
  2701 ;;		_DelayFor18TCY
  2702 ;; This function is called by:
  2703 ;;		_lcd_runtime
  2704 ;;		_OpenXLCD
  2705 ;; This function uses a non-reentrant model
  2706 ;;
  2707                           
  2708                           	psect	text13
  2709  0074DE                     __ptext13:
  2710                           	opt stack 0
  2711  0074DE                     _SetDDRamAddr:
  2712                           	opt stack 28
  2713                           
  2714                           ;incstack = 0
  2715                           ;SetDDRamAddr@DDaddr stored from wreg
  2716  0074DE  6E06               	movwf	SetDDRamAddr@DDaddr,c
  2717  0074E0  0EF0               	movlw	240
  2718  0074E2  1693               	andwf	3987,f,c	;volatile
  2719  0074E4  0EF0               	movlw	240
  2720  0074E6  1681               	andwf	3969,f,c	;volatile
  2721  0074E8  5006               	movf	SetDDRamAddr@DDaddr,w,c
  2722  0074EA  6E03               	movwf	??_SetDDRamAddr& (0+255),c
  2723  0074EC  6A04               	clrf	(??_SetDDRamAddr+1)& (0+255),c
  2724  0074EE  8E03               	bsf	??_SetDDRamAddr,7,c
  2725  0074F0  0E04               	movlw	4
  2726  0074F2  6E05               	movwf	(??_SetDDRamAddr+2)& (0+255),c
  2727  0074F4                     u885:
  2728  0074F4  3404               	rlcf	??_SetDDRamAddr+1,w,c
  2729  0074F6  3204               	rrcf	??_SetDDRamAddr+1,f,c
  2730  0074F8  3203               	rrcf	??_SetDDRamAddr,f,c
  2731  0074FA  2E05               	decfsz	(??_SetDDRamAddr+2)& (0+255),f,c
  2732  0074FC  D7FB               	goto	u885
  2733  0074FE  5003               	movf	??_SetDDRamAddr,w,c
  2734  007500  0B0F               	andlw	15
  2735  007502  1281               	iorwf	3969,f,c	;volatile
  2736  007504  9C8A               	bcf	3978,6,c	;volatile
  2737  007506  9A8A               	bcf	3978,5,c	;volatile
  2738  007508  EC5B  F039         	call	_DelayFor18TCY	;wreg free
  2739  00750C  888A               	bsf	3978,4,c	;volatile
  2740  00750E  EC5B  F039         	call	_DelayFor18TCY	;wreg free
  2741  007512  988A               	bcf	3978,4,c	;volatile
  2742  007514  0EF0               	movlw	240
  2743  007516  1681               	andwf	3969,f,c	;volatile
  2744  007518  5006               	movf	SetDDRamAddr@DDaddr,w,c
  2745  00751A  0B0F               	andlw	15
  2746  00751C  1281               	iorwf	3969,f,c	;volatile
  2747  00751E  EC5B  F039         	call	_DelayFor18TCY	;wreg free
  2748  007522  888A               	bsf	3978,4,c	;volatile
  2749  007524  EC5B  F039         	call	_DelayFor18TCY	;wreg free
  2750  007528  988A               	bcf	3978,4,c	;volatile
  2751  00752A  0E0F               	movlw	15
  2752  00752C  1293               	iorwf	3987,f,c	;volatile
  2753  00752E  0012               	return	
  2754  007530                     __end_of_SetDDRamAddr:
  2755                           	opt stack 0
  2756                           tblptru	equ	0xFF8
  2757                           prodh	equ	0xFF4
  2758                           prodl	equ	0xFF3
  2759                           postinc0	equ	0xFEE
  2760                           wreg	equ	0xFE8
  2761                           indf1	equ	0xFE7
  2762                           plusw1	equ	0xFE3
  2763                           fsr1h	equ	0xFE2
  2764                           fsr1l	equ	0xFE1
  2765                           indf2	equ	0xFDF
  2766                           postinc2	equ	0xFDE
  2767                           postdec2	equ	0xFDD
  2768                           plusw2	equ	0xFDB
  2769                           fsr2h	equ	0xFDA
  2770                           fsr2l	equ	0xFD9
  2771                           status	equ	0xFD8
  2772                           
  2773 ;; *************** function _DelayPORXLCD *****************
  2774 ;; Defined at:
  2775 ;;		line 109 in file "display.c"
  2776 ;; Parameters:    Size  Location     Type
  2777 ;;		None
  2778 ;; Auto vars:     Size  Location     Type
  2779 ;;		None
  2780 ;; Return value:  Size  Location     Type
  2781 ;;                  1    wreg      void 
  2782 ;; Registers used:
  2783 ;;		wreg, status,2, status,0, cstack
  2784 ;; Tracked objects:
  2785 ;;		On entry : 0/0
  2786 ;;		On exit  : 0/0
  2787 ;;		Unchanged: 0/0
  2788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2789 ;;      Params:         0       0       0       0       0       0       0       0       0
  2790 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2791 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2792 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2793 ;;Total ram usage:        0 bytes
  2794 ;; Hardware stack levels used:    1
  2795 ;; Hardware stack levels required when called:    1
  2796 ;; This function calls:
  2797 ;;		_delay_ms
  2798 ;; This function is called by:
  2799 ;;		_OpenXLCD
  2800 ;; This function uses a non-reentrant model
  2801 ;;
  2802                           
  2803                           	psect	text14
  2804  00722E                     __ptext14:
  2805                           	opt stack 0
  2806  00722E                     _DelayPORXLCD:
  2807                           	opt stack 27
  2808                           
  2809                           ;display.c: 110: delay_ms(60);
  2810                           
  2811                           ;incstack = 0
  2812  00722E  0E00               	movlw	0
  2813  007230  6E02               	movwf	delay_ms@milis+1,c
  2814  007232  0E3C               	movlw	60
  2815  007234  6E01               	movwf	delay_ms@milis,c
  2816  007236  EC7E  F039         	call	_delay_ms	;wreg free
  2817  00723A  0012               	return		;funcret
  2818  00723C                     __end_of_DelayPORXLCD:
  2819                           	opt stack 0
  2820                           tblptru	equ	0xFF8
  2821                           prodh	equ	0xFF4
  2822                           prodl	equ	0xFF3
  2823                           postinc0	equ	0xFEE
  2824                           wreg	equ	0xFE8
  2825                           indf1	equ	0xFE7
  2826                           plusw1	equ	0xFE3
  2827                           fsr1h	equ	0xFE2
  2828                           fsr1l	equ	0xFE1
  2829                           indf2	equ	0xFDF
  2830                           postinc2	equ	0xFDE
  2831                           postdec2	equ	0xFDD
  2832                           plusw2	equ	0xFDB
  2833                           fsr2h	equ	0xFDA
  2834                           fsr2l	equ	0xFD9
  2835                           status	equ	0xFD8
  2836                           
  2837 ;; *************** function _Delay10KTCYx *****************
  2838 ;; Defined at:
  2839 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\pic18\d10ktcyx.c"
  2840 ;; Parameters:    Size  Location     Type
  2841 ;;  unit            1    wreg     unsigned char 
  2842 ;; Auto vars:     Size  Location     Type
  2843 ;;  unit            1    1[COMRAM] unsigned char 
  2844 ;; Return value:  Size  Location     Type
  2845 ;;                  1    wreg      void 
  2846 ;; Registers used:
  2847 ;;		wreg
  2848 ;; Tracked objects:
  2849 ;;		On entry : 0/0
  2850 ;;		On exit  : 0/0
  2851 ;;		Unchanged: 0/0
  2852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2853 ;;      Params:         0       0       0       0       0       0       0       0       0
  2854 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2855 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2856 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2857 ;;Total ram usage:        2 bytes
  2858 ;; Hardware stack levels used:    1
  2859 ;; This function calls:
  2860 ;;		Nothing
  2861 ;; This function is called by:
  2862 ;;		_OpenXLCD
  2863 ;; This function uses a non-reentrant model
  2864 ;;
  2865                           
  2866                           	psect	text15
  2867  00726C                     __ptext15:
  2868                           	opt stack 0
  2869  00726C                     _Delay10KTCYx:
  2870                           	opt stack 28
  2871                           
  2872                           ;incstack = 0
  2873                           ;Delay10KTCYx@unit stored from wreg
  2874  00726C  6E02               	movwf	Delay10KTCYx@unit,c
  2875  00726E                     l576:
  2876  00726E  0E0D               	movlw	13
  2877  007270  6E01               	movwf	??_Delay10KTCYx& (0+255),c
  2878  007272  0EFC               	movlw	252
  2879  007274                     u1677:
  2880  007274  2EE8               	decfsz	wreg,f,c
  2881  007276  D7FE               	bra	u1677
  2882  007278  2E01               	decfsz	??_Delay10KTCYx& (0+255),f,c
  2883  00727A  D7FC               	bra	u1677
  2884  00727C  2E02               	decfsz	Delay10KTCYx@unit,f,c
  2885  00727E  D7F7               	goto	l576
  2886  007280  0012               	return	
  2887  007282                     __end_of_Delay10KTCYx:
  2888                           	opt stack 0
  2889                           tblptru	equ	0xFF8
  2890                           prodh	equ	0xFF4
  2891                           prodl	equ	0xFF3
  2892                           postinc0	equ	0xFEE
  2893                           wreg	equ	0xFE8
  2894                           indf1	equ	0xFE7
  2895                           plusw1	equ	0xFE3
  2896                           fsr1h	equ	0xFE2
  2897                           fsr1l	equ	0xFE1
  2898                           indf2	equ	0xFDF
  2899                           postinc2	equ	0xFDE
  2900                           postdec2	equ	0xFDD
  2901                           plusw2	equ	0xFDB
  2902                           fsr2h	equ	0xFDA
  2903                           fsr2l	equ	0xFD9
  2904                           status	equ	0xFD8
  2905                           
  2906 ;; *************** function _lcd_clean_all *****************
  2907 ;; Defined at:
  2908 ;;		line 47 in file "display.c"
  2909 ;; Parameters:    Size  Location     Type
  2910 ;;  lcd             2    5[COMRAM] PTR struct .
  2911 ;;		 -> main@lcd(33), 
  2912 ;; Auto vars:     Size  Location     Type
  2913 ;;		None
  2914 ;; Return value:  Size  Location     Type
  2915 ;;                  1    wreg      void 
  2916 ;; Registers used:
  2917 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2918 ;; Tracked objects:
  2919 ;;		On entry : 0/0
  2920 ;;		On exit  : 0/0
  2921 ;;		Unchanged: 0/0
  2922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2923 ;;      Params:         2       0       0       0       0       0       0       0       0
  2924 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2925 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2926 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2927 ;;Total ram usage:        2 bytes
  2928 ;; Hardware stack levels used:    1
  2929 ;; Hardware stack levels required when called:    3
  2930 ;; This function calls:
  2931 ;;		_lcd_clean
  2932 ;;		_lcd_mem_clean
  2933 ;; This function is called by:
  2934 ;;		_main
  2935 ;; This function uses a non-reentrant model
  2936 ;;
  2937                           
  2938                           	psect	text16
  2939  00725A                     __ptext16:
  2940                           	opt stack 0
  2941  00725A                     _lcd_clean_all:
  2942                           	opt stack 27
  2943                           
  2944                           ;display.c: 48: lcd_clean();
  2945                           
  2946                           ;incstack = 0
  2947  00725A  EC4C  F039         	call	_lcd_clean	;wreg free
  2948                           
  2949                           ;display.c: 49: lcd_mem_clean(lcd);
  2950  00725E  C006  F001         	movff	lcd_clean_all@lcd,lcd_mem_clean@lcd
  2951  007262  C007  F002         	movff	lcd_clean_all@lcd+1,lcd_mem_clean@lcd+1
  2952  007266  EC98  F03A         	call	_lcd_mem_clean	;wreg free
  2953  00726A  0012               	return		;funcret
  2954  00726C                     __end_of_lcd_clean_all:
  2955                           	opt stack 0
  2956                           tblptru	equ	0xFF8
  2957                           prodh	equ	0xFF4
  2958                           prodl	equ	0xFF3
  2959                           postinc0	equ	0xFEE
  2960                           wreg	equ	0xFE8
  2961                           indf1	equ	0xFE7
  2962                           plusw1	equ	0xFE3
  2963                           fsr1h	equ	0xFE2
  2964                           fsr1l	equ	0xFE1
  2965                           indf2	equ	0xFDF
  2966                           postinc2	equ	0xFDE
  2967                           postdec2	equ	0xFDD
  2968                           plusw2	equ	0xFDB
  2969                           fsr2h	equ	0xFDA
  2970                           fsr2l	equ	0xFD9
  2971                           status	equ	0xFD8
  2972                           
  2973 ;; *************** function _lcd_mem_clean *****************
  2974 ;; Defined at:
  2975 ;;		line 39 in file "display.c"
  2976 ;; Parameters:    Size  Location     Type
  2977 ;;  lcd             2    0[COMRAM] PTR struct .
  2978 ;;		 -> main@lcd(33), 
  2979 ;; Auto vars:     Size  Location     Type
  2980 ;;  i               1    2[COMRAM] unsigned char 
  2981 ;; Return value:  Size  Location     Type
  2982 ;;                  1    wreg      void 
  2983 ;; Registers used:
  2984 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2985 ;; Tracked objects:
  2986 ;;		On entry : 0/0
  2987 ;;		On exit  : 0/0
  2988 ;;		Unchanged: 0/0
  2989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2990 ;;      Params:         2       0       0       0       0       0       0       0       0
  2991 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2992 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2993 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2994 ;;Total ram usage:        3 bytes
  2995 ;; Hardware stack levels used:    1
  2996 ;; This function calls:
  2997 ;;		Nothing
  2998 ;; This function is called by:
  2999 ;;		_lcd_init
  3000 ;;		_lcd_clean_all
  3001 ;; This function uses a non-reentrant model
  3002 ;;
  3003                           
  3004                           	psect	text17
  3005  007530                     __ptext17:
  3006                           	opt stack 0
  3007  007530                     _lcd_mem_clean:
  3008                           	opt stack 29
  3009                           
  3010                           ;display.c: 40: for (uint8_t i = 0; i < 16; i++) {
  3011                           
  3012                           ;incstack = 0
  3013  007530  0E00               	movlw	0
  3014  007532  6E03               	movwf	lcd_mem_clean@i,c
  3015  007534                     l1877:
  3016  007534  0E0F               	movlw	15
  3017  007536  6403               	cpfsgt	lcd_mem_clean@i,c
  3018  007538  D001               	goto	l237
  3019  00753A  D01E               	goto	u1010
  3020  00753C                     l237:
  3021                           
  3022                           ;display.c: 41: lcd->Memory[0][i] = 0x20;
  3023  00753C  5003               	movf	lcd_mem_clean@i,w,c
  3024  00753E  0D01               	mullw	1
  3025  007540  0E01               	movlw	1
  3026  007542  26F3               	addwf	prodl,f,c
  3027  007544  0E00               	movlw	0
  3028  007546  22F4               	addwfc	prodh,f,c
  3029  007548  50F3               	movf	prodl,w,c
  3030  00754A  2401               	addwf	lcd_mem_clean@lcd,w,c
  3031  00754C  6ED9               	movwf	fsr2l,c
  3032  00754E  50F4               	movf	prodh,w,c
  3033  007550  2002               	addwfc	lcd_mem_clean@lcd+1,w,c
  3034  007552  6EDA               	movwf	fsr2h,c
  3035  007554  0E20               	movlw	32
  3036  007556  6EDF               	movwf	indf2,c
  3037                           
  3038                           ;display.c: 42: lcd->Memory[1][i] = 0x20;
  3039  007558  5003               	movf	lcd_mem_clean@i,w,c
  3040  00755A  0D01               	mullw	1
  3041  00755C  0E11               	movlw	17
  3042  00755E  26F3               	addwf	prodl,f,c
  3043  007560  0E00               	movlw	0
  3044  007562  22F4               	addwfc	prodh,f,c
  3045  007564  50F3               	movf	prodl,w,c
  3046  007566  2401               	addwf	lcd_mem_clean@lcd,w,c
  3047  007568  6ED9               	movwf	fsr2l,c
  3048  00756A  50F4               	movf	prodh,w,c
  3049  00756C  2002               	addwfc	lcd_mem_clean@lcd+1,w,c
  3050  00756E  6EDA               	movwf	fsr2h,c
  3051  007570  0E20               	movlw	32
  3052  007572  6EDF               	movwf	indf2,c
  3053  007574  2A03               	incf	lcd_mem_clean@i,f,c
  3054  007576  D7DE               	goto	l1877
  3055  007578                     u1010:
  3056                           
  3057                           ;display.c: 43: }
  3058                           ;display.c: 44: lcd->NeedsRedraw = 1;
  3059  007578  C001  FFD9         	movff	lcd_mem_clean@lcd,fsr2l
  3060  00757C  C002  FFDA         	movff	lcd_mem_clean@lcd+1,fsr2h
  3061  007580  0E01               	movlw	1
  3062  007582  6EDF               	movwf	indf2,c
  3063  007584  0012               	return		;funcret
  3064  007586                     __end_of_lcd_mem_clean:
  3065                           	opt stack 0
  3066                           tblptru	equ	0xFF8
  3067                           prodh	equ	0xFF4
  3068                           prodl	equ	0xFF3
  3069                           postinc0	equ	0xFEE
  3070                           wreg	equ	0xFE8
  3071                           indf1	equ	0xFE7
  3072                           plusw1	equ	0xFE3
  3073                           fsr1h	equ	0xFE2
  3074                           fsr1l	equ	0xFE1
  3075                           indf2	equ	0xFDF
  3076                           postinc2	equ	0xFDE
  3077                           postdec2	equ	0xFDD
  3078                           plusw2	equ	0xFDB
  3079                           fsr2h	equ	0xFDA
  3080                           fsr2l	equ	0xFD9
  3081                           status	equ	0xFD8
  3082                           
  3083 ;; *************** function _lcd_clean *****************
  3084 ;; Defined at:
  3085 ;;		line 31 in file "display.c"
  3086 ;; Parameters:    Size  Location     Type
  3087 ;;		None
  3088 ;; Auto vars:     Size  Location     Type
  3089 ;;		None
  3090 ;; Return value:  Size  Location     Type
  3091 ;;                  1    wreg      void 
  3092 ;; Registers used:
  3093 ;;		wreg, status,2, status,0, cstack
  3094 ;; Tracked objects:
  3095 ;;		On entry : 0/0
  3096 ;;		On exit  : 0/0
  3097 ;;		Unchanged: 0/0
  3098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3099 ;;      Params:         0       0       0       0       0       0       0       0       0
  3100 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3101 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3102 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3103 ;;Total ram usage:        0 bytes
  3104 ;; Hardware stack levels used:    1
  3105 ;; Hardware stack levels required when called:    2
  3106 ;; This function calls:
  3107 ;;		_BusyXLCD
  3108 ;;		_WriteCmdXLCD
  3109 ;;		_delay_ms
  3110 ;; This function is called by:
  3111 ;;		_lcd_init
  3112 ;;		_lcd_clean_all
  3113 ;; This function uses a non-reentrant model
  3114 ;;
  3115                           
  3116                           	psect	text18
  3117  007298                     __ptext18:
  3118                           	opt stack 0
  3119  007298                     _lcd_clean:
  3120                           	opt stack 27
  3121                           
  3122                           ;display.c: 32: while (BusyXLCD());
  3123                           
  3124                           ;incstack = 0
  3125  007298  ECAE  F039         	call	_BusyXLCD	;wreg free
  3126  00729C  0900               	iorlw	0
  3127  00729E  A4D8               	btfss	status,2,c
  3128  0072A0  D7FB               	goto	_lcd_clean
  3129                           
  3130                           ;display.c: 33: WriteCmdXLCD(0x01);
  3131  0072A2  0E01               	movlw	1
  3132  0072A4  ECE9  F039         	call	_WriteCmdXLCD
  3133                           
  3134                           ;display.c: 35: delay_ms(80);
  3135  0072A8  0E00               	movlw	0
  3136  0072AA  6E02               	movwf	delay_ms@milis+1,c
  3137  0072AC  0E50               	movlw	80
  3138  0072AE  6E01               	movwf	delay_ms@milis,c
  3139  0072B0  EC7E  F039         	call	_delay_ms	;wreg free
  3140  0072B4  0012               	return		;funcret
  3141  0072B6                     __end_of_lcd_clean:
  3142                           	opt stack 0
  3143                           tblptru	equ	0xFF8
  3144                           prodh	equ	0xFF4
  3145                           prodl	equ	0xFF3
  3146                           postinc0	equ	0xFEE
  3147                           wreg	equ	0xFE8
  3148                           indf1	equ	0xFE7
  3149                           plusw1	equ	0xFE3
  3150                           fsr1h	equ	0xFE2
  3151                           fsr1l	equ	0xFE1
  3152                           indf2	equ	0xFDF
  3153                           postinc2	equ	0xFDE
  3154                           postdec2	equ	0xFDD
  3155                           plusw2	equ	0xFDB
  3156                           fsr2h	equ	0xFDA
  3157                           fsr2l	equ	0xFD9
  3158                           status	equ	0xFD8
  3159                           
  3160 ;; *************** function _delay_ms *****************
  3161 ;; Defined at:
  3162 ;;		line 212 in file "main.c"
  3163 ;; Parameters:    Size  Location     Type
  3164 ;;  milis           2    0[COMRAM] unsigned int 
  3165 ;; Auto vars:     Size  Location     Type
  3166 ;;  t               2    3[COMRAM] unsigned int 
  3167 ;; Return value:  Size  Location     Type
  3168 ;;                  1    wreg      void 
  3169 ;; Registers used:
  3170 ;;		wreg, status,2, status,0
  3171 ;; Tracked objects:
  3172 ;;		On entry : 0/0
  3173 ;;		On exit  : 0/0
  3174 ;;		Unchanged: 0/0
  3175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3176 ;;      Params:         2       0       0       0       0       0       0       0       0
  3177 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3178 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3179 ;;      Totals:         5       0       0       0       0       0       0       0       0
  3180 ;;Total ram usage:        5 bytes
  3181 ;; Hardware stack levels used:    1
  3182 ;; This function calls:
  3183 ;;		Nothing
  3184 ;; This function is called by:
  3185 ;;		_main
  3186 ;;		_lcd_clean
  3187 ;;		_DelayPORXLCD
  3188 ;;		_DelayXLCD
  3189 ;; This function uses a non-reentrant model
  3190 ;;
  3191                           
  3192                           	psect	text19
  3193  0072FC                     __ptext19:
  3194                           	opt stack 0
  3195  0072FC                     _delay_ms:
  3196                           	opt stack 28
  3197                           
  3198                           ;main.c: 214: for (uint16_t t = 0; t < milis; t++) {
  3199                           
  3200                           ;incstack = 0
  3201  0072FC  0E00               	movlw	0
  3202  0072FE  6E05               	movwf	delay_ms@t+1,c
  3203  007300  0E00               	movlw	0
  3204  007302  6E04               	movwf	delay_ms@t,c
  3205  007304  D009               	goto	l85
  3206  007306                     
  3207                           ;main.c: 215: _delay((unsigned long)((1)*(8000000/4000.0)));
  3208  007306  0E03               	movlw	3
  3209  007308  6E03               	movwf	??_delay_ms& (0+255),c
  3210  00730A  0E98               	movlw	152
  3211  00730C                     u1687:
  3212  00730C  2EE8               	decfsz	wreg,f,c
  3213  00730E  D7FE               	bra	u1687
  3214  007310  2E03               	decfsz	??_delay_ms& (0+255),f,c
  3215  007312  D7FC               	bra	u1687
  3216  007314  4A04               	infsnz	delay_ms@t,f,c
  3217  007316  2A05               	incf	delay_ms@t+1,f,c
  3218  007318                     l85:
  3219  007318  5001               	movf	delay_ms@milis,w,c
  3220  00731A  5C04               	subwf	delay_ms@t,w,c
  3221  00731C  5002               	movf	delay_ms@milis+1,w,c
  3222  00731E  5805               	subwfb	delay_ms@t+1,w,c
  3223  007320  B0D8               	btfsc	status,0,c
  3224  007322  0012               	return	
  3225  007324  D7F0               	goto	l86
  3226  007326                     __end_of_delay_ms:
  3227                           	opt stack 0
  3228                           tblptru	equ	0xFF8
  3229                           prodh	equ	0xFF4
  3230                           prodl	equ	0xFF3
  3231                           postinc0	equ	0xFEE
  3232                           wreg	equ	0xFE8
  3233                           indf1	equ	0xFE7
  3234                           plusw1	equ	0xFE3
  3235                           fsr1h	equ	0xFE2
  3236                           fsr1l	equ	0xFE1
  3237                           indf2	equ	0xFDF
  3238                           postinc2	equ	0xFDE
  3239                           postdec2	equ	0xFDD
  3240                           plusw2	equ	0xFDB
  3241                           fsr2h	equ	0xFDA
  3242                           fsr2l	equ	0xFD9
  3243                           status	equ	0xFD8
  3244                           
  3245 ;; *************** function _WriteCmdXLCD *****************
  3246 ;; Defined at:
  3247 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\pic18\plib\XLCD\wcmdxlcd.c"
  3248 ;; Parameters:    Size  Location     Type
  3249 ;;  cmd             1    wreg     unsigned char 
  3250 ;; Auto vars:     Size  Location     Type
  3251 ;;  cmd             1    2[COMRAM] unsigned char 
  3252 ;; Return value:  Size  Location     Type
  3253 ;;                  1    wreg      void 
  3254 ;; Registers used:
  3255 ;;		wreg, status,2, status,0, cstack
  3256 ;; Tracked objects:
  3257 ;;		On entry : 0/0
  3258 ;;		On exit  : 0/0
  3259 ;;		Unchanged: 0/0
  3260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3261 ;;      Params:         0       0       0       0       0       0       0       0       0
  3262 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3263 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3264 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3265 ;;Total ram usage:        1 bytes
  3266 ;; Hardware stack levels used:    1
  3267 ;; Hardware stack levels required when called:    1
  3268 ;; This function calls:
  3269 ;;		_DelayFor18TCY
  3270 ;; This function is called by:
  3271 ;;		_lcd_init
  3272 ;;		_lcd_clean
  3273 ;;		_OpenXLCD
  3274 ;; This function uses a non-reentrant model
  3275 ;;
  3276                           
  3277                           	psect	text20
  3278  0073D2                     __ptext20:
  3279                           	opt stack 0
  3280  0073D2                     _WriteCmdXLCD:
  3281                           	opt stack 27
  3282                           
  3283                           ;incstack = 0
  3284                           ;WriteCmdXLCD@cmd stored from wreg
  3285  0073D2  6E03               	movwf	WriteCmdXLCD@cmd,c
  3286  0073D4  0EF0               	movlw	240
  3287  0073D6  1693               	andwf	3987,f,c	;volatile
  3288  0073D8  0EF0               	movlw	240
  3289  0073DA  1681               	andwf	3969,f,c	;volatile
  3290  0073DC  3803               	swapf	WriteCmdXLCD@cmd,w,c
  3291  0073DE  0B0F               	andlw	15
  3292  0073E0  0B0F               	andlw	15
  3293  0073E2  1281               	iorwf	3969,f,c	;volatile
  3294  0073E4  9C8A               	bcf	3978,6,c	;volatile
  3295  0073E6  9A8A               	bcf	3978,5,c	;volatile
  3296  0073E8  EC5B  F039         	call	_DelayFor18TCY	;wreg free
  3297  0073EC  888A               	bsf	3978,4,c	;volatile
  3298  0073EE  EC5B  F039         	call	_DelayFor18TCY	;wreg free
  3299  0073F2  988A               	bcf	3978,4,c	;volatile
  3300  0073F4  0EF0               	movlw	240
  3301  0073F6  1681               	andwf	3969,f,c	;volatile
  3302  0073F8  5003               	movf	WriteCmdXLCD@cmd,w,c
  3303  0073FA  0B0F               	andlw	15
  3304  0073FC  1281               	iorwf	3969,f,c	;volatile
  3305  0073FE  EC5B  F039         	call	_DelayFor18TCY	;wreg free
  3306  007402  888A               	bsf	3978,4,c	;volatile
  3307  007404  EC5B  F039         	call	_DelayFor18TCY	;wreg free
  3308  007408  988A               	bcf	3978,4,c	;volatile
  3309  00740A  0E0F               	movlw	15
  3310  00740C  1293               	iorwf	3987,f,c	;volatile
  3311  00740E  0012               	return	
  3312  007410                     __end_of_WriteCmdXLCD:
  3313                           	opt stack 0
  3314                           tblptru	equ	0xFF8
  3315                           prodh	equ	0xFF4
  3316                           prodl	equ	0xFF3
  3317                           postinc0	equ	0xFEE
  3318                           wreg	equ	0xFE8
  3319                           indf1	equ	0xFE7
  3320                           plusw1	equ	0xFE3
  3321                           fsr1h	equ	0xFE2
  3322                           fsr1l	equ	0xFE1
  3323                           indf2	equ	0xFDF
  3324                           postinc2	equ	0xFDE
  3325                           postdec2	equ	0xFDD
  3326                           plusw2	equ	0xFDB
  3327                           fsr2h	equ	0xFDA
  3328                           fsr2l	equ	0xFD9
  3329                           status	equ	0xFD8
  3330                           
  3331 ;; *************** function _BusyXLCD *****************
  3332 ;; Defined at:
  3333 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\pic18\plib\XLCD\busyxlcd.c"
  3334 ;; Parameters:    Size  Location     Type
  3335 ;;		None
  3336 ;; Auto vars:     Size  Location     Type
  3337 ;;		None
  3338 ;; Return value:  Size  Location     Type
  3339 ;;                  1    wreg      unsigned char 
  3340 ;; Registers used:
  3341 ;;		wreg, status,2, status,0, cstack
  3342 ;; Tracked objects:
  3343 ;;		On entry : 0/0
  3344 ;;		On exit  : 0/0
  3345 ;;		Unchanged: 0/0
  3346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3347 ;;      Params:         0       0       0       0       0       0       0       0       0
  3348 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3349 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3350 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3351 ;;Total ram usage:        0 bytes
  3352 ;; Hardware stack levels used:    1
  3353 ;; Hardware stack levels required when called:    1
  3354 ;; This function calls:
  3355 ;;		_DelayFor18TCY
  3356 ;; This function is called by:
  3357 ;;		_lcd_init
  3358 ;;		_lcd_clean
  3359 ;;		_lcd_runtime
  3360 ;;		_OpenXLCD
  3361 ;; This function uses a non-reentrant model
  3362 ;;
  3363                           
  3364                           	psect	text21
  3365  00735C                     __ptext21:
  3366                           	opt stack 0
  3367  00735C                     _BusyXLCD:
  3368                           	opt stack 28
  3369                           
  3370                           ;incstack = 0
  3371  00735C  8C8A               	bsf	3978,6,c	;volatile
  3372  00735E  9A8A               	bcf	3978,5,c	;volatile
  3373  007360  EC5B  F039         	call	_DelayFor18TCY	;wreg free
  3374  007364  888A               	bsf	3978,4,c	;volatile
  3375  007366  EC5B  F039         	call	_DelayFor18TCY	;wreg free
  3376  00736A  A681               	btfss	3969,3,c	;volatile
  3377  00736C  D00A               	goto	l297
  3378  00736E  988A               	bcf	3978,4,c	;volatile
  3379  007370  EC5B  F039         	call	_DelayFor18TCY	;wreg free
  3380  007374  888A               	bsf	3978,4,c	;volatile
  3381  007376  EC5B  F039         	call	_DelayFor18TCY	;wreg free
  3382  00737A  988A               	bcf	3978,4,c	;volatile
  3383  00737C  9C8A               	bcf	3978,6,c	;volatile
  3384  00737E  0E01               	movlw	1
  3385  007380  0012               	return	
  3386  007382                     l297:
  3387  007382  988A               	bcf	3978,4,c	;volatile
  3388  007384  EC5B  F039         	call	_DelayFor18TCY	;wreg free
  3389  007388  888A               	bsf	3978,4,c	;volatile
  3390  00738A  EC5B  F039         	call	_DelayFor18TCY	;wreg free
  3391  00738E  988A               	bcf	3978,4,c	;volatile
  3392  007390  9C8A               	bcf	3978,6,c	;volatile
  3393  007392  0E00               	movlw	0
  3394  007394  0012               	return	
  3395  007396                     __end_of_BusyXLCD:
  3396                           	opt stack 0
  3397                           tblptru	equ	0xFF8
  3398                           prodh	equ	0xFF4
  3399                           prodl	equ	0xFF3
  3400                           postinc0	equ	0xFEE
  3401                           wreg	equ	0xFE8
  3402                           indf1	equ	0xFE7
  3403                           plusw1	equ	0xFE3
  3404                           fsr1h	equ	0xFE2
  3405                           fsr1l	equ	0xFE1
  3406                           indf2	equ	0xFDF
  3407                           postinc2	equ	0xFDE
  3408                           postdec2	equ	0xFDD
  3409                           plusw2	equ	0xFDB
  3410                           fsr2h	equ	0xFDA
  3411                           fsr2l	equ	0xFD9
  3412                           status	equ	0xFD8
  3413                           
  3414 ;; *************** function _DelayFor18TCY *****************
  3415 ;; Defined at:
  3416 ;;		line 103 in file "display.c"
  3417 ;; Parameters:    Size  Location     Type
  3418 ;;		None
  3419 ;; Auto vars:     Size  Location     Type
  3420 ;;  i               2    0[COMRAM] int 
  3421 ;; Return value:  Size  Location     Type
  3422 ;;                  1    wreg      void 
  3423 ;; Registers used:
  3424 ;;		wreg, status,2, status,0
  3425 ;; Tracked objects:
  3426 ;;		On entry : 0/0
  3427 ;;		On exit  : 0/0
  3428 ;;		Unchanged: 0/0
  3429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3430 ;;      Params:         0       0       0       0       0       0       0       0       0
  3431 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3432 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3433 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3434 ;;Total ram usage:        2 bytes
  3435 ;; Hardware stack levels used:    1
  3436 ;; This function calls:
  3437 ;;		Nothing
  3438 ;; This function is called by:
  3439 ;;		_BusyXLCD
  3440 ;;		_SetDDRamAddr
  3441 ;;		_WriteCmdXLCD
  3442 ;;		_WriteDataXLCD
  3443 ;; This function uses a non-reentrant model
  3444 ;;
  3445                           
  3446                           	psect	text22
  3447  0072B6                     __ptext22:
  3448                           	opt stack 0
  3449  0072B6                     _DelayFor18TCY:
  3450                           	opt stack 28
  3451                           
  3452                           ;display.c: 104: for (int i = 0; i < 18; i++) {
  3453                           
  3454                           ;incstack = 0
  3455  0072B6  0E00               	movlw	0
  3456  0072B8  6E02               	movwf	DelayFor18TCY@i+1,c
  3457  0072BA  0E00               	movlw	0
  3458  0072BC  6E01               	movwf	DelayFor18TCY@i,c
  3459  0072BE                     l1701:
  3460  0072BE  BE02               	btfsc	DelayFor18TCY@i+1,7,c
  3461  0072C0  D006               	goto	l279
  3462  0072C2  5002               	movf	DelayFor18TCY@i+1,w,c
  3463  0072C4  E107               	bnz	l282
  3464  0072C6  0E12               	movlw	18
  3465  0072C8  5C01               	subwf	DelayFor18TCY@i,w,c
  3466  0072CA  B0D8               	btfsc	status,0,c
  3467  0072CC  0012               	return	
  3468  0072CE                     l279:
  3469                           
  3470                           ;display.c: 105: continue;
  3471  0072CE  4A01               	infsnz	DelayFor18TCY@i,f,c
  3472  0072D0  2A02               	incf	DelayFor18TCY@i+1,f,c
  3473  0072D2  D7F5               	goto	l1701
  3474  0072D4                     l282:
  3475  0072D4  0012               	return		;funcret
  3476  0072D6                     __end_of_DelayFor18TCY:
  3477                           	opt stack 0
  3478                           tblptru	equ	0xFF8
  3479                           prodh	equ	0xFF4
  3480                           prodl	equ	0xFF3
  3481                           postinc0	equ	0xFEE
  3482                           wreg	equ	0xFE8
  3483                           indf1	equ	0xFE7
  3484                           plusw1	equ	0xFE3
  3485                           fsr1h	equ	0xFE2
  3486                           fsr1l	equ	0xFE1
  3487                           indf2	equ	0xFDF
  3488                           postinc2	equ	0xFDE
  3489                           postdec2	equ	0xFDD
  3490                           plusw2	equ	0xFDB
  3491                           fsr2h	equ	0xFDA
  3492                           fsr2l	equ	0xFD9
  3493                           status	equ	0xFD8
  3494                           
  3495 ;; *************** function _check_data *****************
  3496 ;; Defined at:
  3497 ;;		line 80 in file "comunicacao.c"
  3498 ;; Parameters:    Size  Location     Type
  3499 ;;  data            2    4[COMRAM] PTR struct .
  3500 ;;		 -> main@dados(69), 
  3501 ;; Auto vars:     Size  Location     Type
  3502 ;;		None
  3503 ;; Return value:  Size  Location     Type
  3504 ;;                  1    wreg      enum E4588
  3505 ;; Registers used:
  3506 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3507 ;; Tracked objects:
  3508 ;;		On entry : 0/0
  3509 ;;		On exit  : 0/0
  3510 ;;		Unchanged: 0/0
  3511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3512 ;;      Params:         2       0       0       0       0       0       0       0       0
  3513 ;;      Locals:         4       0       0       0       0       0       0       0       0
  3514 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3515 ;;      Totals:         7       0       0       0       0       0       0       0       0
  3516 ;;Total ram usage:        7 bytes
  3517 ;; Hardware stack levels used:    1
  3518 ;; Hardware stack levels required when called:    1
  3519 ;; This function calls:
  3520 ;;		_calc_bcc
  3521 ;; This function is called by:
  3522 ;;		_main
  3523 ;; This function uses a non-reentrant model
  3524 ;;
  3525                           
  3526                           	psect	text23
  3527  0079A0                     __ptext23:
  3528                           	opt stack 0
  3529  0079A0                     _check_data:
  3530                           	opt stack 29
  3531                           
  3532                           ;comunicacao.c: 82: if (data->buff[0] != 0x02) {
  3533                           
  3534                           ;incstack = 0
  3535  0079A0  EE20 F001          	lfsr	2,1
  3536  0079A4  5005               	movf	check_data@data,w,c
  3537  0079A6  26D9               	addwf	fsr2l,f,c
  3538  0079A8  5006               	movf	check_data@data+1,w,c
  3539  0079AA  22DA               	addwfc	fsr2h,f,c
  3540  0079AC  0E02               	movlw	2
  3541  0079AE  18DE               	xorwf	postinc2,w,c
  3542  0079B0  B4D8               	btfsc	status,2,c
  3543  0079B2  D002               	goto	l125
  3544                           
  3545                           ;comunicacao.c: 83: return ERR_STX;
  3546  0079B4  0E00               	movlw	0
  3547  0079B6  0012               	return	
  3548  0079B8                     l125:
  3549                           
  3550                           ;comunicacao.c: 84: }
  3551                           ;comunicacao.c: 86: if (data->buff[1] != 0x09) {
  3552  0079B8  EE20 F002          	lfsr	2,2
  3553  0079BC  5005               	movf	check_data@data,w,c
  3554  0079BE  26D9               	addwf	fsr2l,f,c
  3555  0079C0  5006               	movf	check_data@data+1,w,c
  3556  0079C2  22DA               	addwfc	fsr2h,f,c
  3557  0079C4  0E09               	movlw	9
  3558  0079C6  18DE               	xorwf	postinc2,w,c
  3559  0079C8  B4D8               	btfsc	status,2,c
  3560  0079CA  D002               	goto	l127
  3561                           
  3562                           ;comunicacao.c: 87: return ERR_IGNORE_MSG;
  3563  0079CC  0E01               	movlw	1
  3564  0079CE  0012               	return	
  3565  0079D0                     l127:
  3566                           
  3567                           ;comunicacao.c: 88: }
  3568                           ;comunicacao.c: 90: if (calc_bcc(data->buff) != 0) {
  3569  0079D0  0E01               	movlw	1
  3570  0079D2  2405               	addwf	check_data@data,w,c
  3571  0079D4  6E01               	movwf	calc_bcc@data,c
  3572  0079D6  0E00               	movlw	0
  3573  0079D8  2006               	addwfc	check_data@data+1,w,c
  3574  0079DA  6E02               	movwf	calc_bcc@data+1,c
  3575  0079DC  EC93  F039         	call	_calc_bcc	;wreg free
  3576  0079E0  0900               	iorlw	0
  3577  0079E2  B4D8               	btfsc	status,2,c
  3578  0079E4  D002               	goto	l128
  3579                           
  3580                           ;comunicacao.c: 91: return ERR_BCC;
  3581  0079E6  0E02               	movlw	2
  3582  0079E8  0012               	return	
  3583  0079EA                     l128:
  3584                           
  3585                           ;comunicacao.c: 92: }
  3586                           ;comunicacao.c: 94: data->addr_from = data->buff[2];
  3587  0079EA  EE20 F003          	lfsr	2,3
  3588  0079EE  5005               	movf	check_data@data,w,c
  3589  0079F0  26D9               	addwf	fsr2l,f,c
  3590  0079F2  5006               	movf	check_data@data+1,w,c
  3591  0079F4  22DA               	addwfc	fsr2h,f,c
  3592  0079F6  EE10 F043          	lfsr	1,67
  3593  0079FA  5005               	movf	check_data@data,w,c
  3594  0079FC  26E1               	addwf	fsr1l,f,c
  3595  0079FE  5006               	movf	check_data@data+1,w,c
  3596  007A00  22E2               	addwfc	fsr1h,f,c
  3597  007A02  CFDF FFE7          	movff	indf2,indf1
  3598                           
  3599                           ;comunicacao.c: 95: data->command = data->buff[3];
  3600  007A06  EE20 F004          	lfsr	2,4
  3601  007A0A  5005               	movf	check_data@data,w,c
  3602  007A0C  26D9               	addwf	fsr2l,f,c
  3603  007A0E  5006               	movf	check_data@data+1,w,c
  3604  007A10  22DA               	addwfc	fsr2h,f,c
  3605  007A12  EE10 F044          	lfsr	1,68
  3606  007A16  5005               	movf	check_data@data,w,c
  3607  007A18  26E1               	addwf	fsr1l,f,c
  3608  007A1A  5006               	movf	check_data@data+1,w,c
  3609  007A1C  22E2               	addwfc	fsr1h,f,c
  3610  007A1E  CFDF FFE7          	movff	indf2,indf1
  3611                           
  3612                           ;comunicacao.c: 96: data->count = data->buff[4];
  3613  007A22  EE20 F005          	lfsr	2,5
  3614  007A26  5005               	movf	check_data@data,w,c
  3615  007A28  26D9               	addwf	fsr2l,f,c
  3616  007A2A  5006               	movf	check_data@data+1,w,c
  3617  007A2C  22DA               	addwfc	fsr2h,f,c
  3618  007A2E  C005  FFE1         	movff	check_data@data,fsr1l
  3619  007A32  C006  FFE2         	movff	check_data@data+1,fsr1h
  3620  007A36  CFDF FFE7          	movff	indf2,indf1
  3621                           
  3622                           ;comunicacao.c: 99: if (data->count == 0) {
  3623  007A3A  C005  FFD9         	movff	check_data@data,fsr2l
  3624  007A3E  C006  FFDA         	movff	check_data@data+1,fsr2h
  3625  007A42  50DF               	movf	indf2,w,c
  3626  007A44  A4D8               	btfss	status,2,c
  3627  007A46  D017               	goto	l129
  3628                           
  3629                           ;comunicacao.c: 100: if (data->command == 0x01) {
  3630  007A48  EE20 F044          	lfsr	2,68
  3631  007A4C  5005               	movf	check_data@data,w,c
  3632  007A4E  26D9               	addwf	fsr2l,f,c
  3633  007A50  5006               	movf	check_data@data+1,w,c
  3634  007A52  22DA               	addwfc	fsr2h,f,c
  3635  007A54  04DE               	decf	postinc2,w,c
  3636  007A56  A4D8               	btfss	status,2,c
  3637  007A58  D002               	goto	l130
  3638                           
  3639                           ;comunicacao.c: 101: return LE_BOTAO1;
  3640  007A5A  0E08               	movlw	8
  3641  007A5C  0012               	return	
  3642  007A5E                     l130:
  3643                           
  3644                           ;comunicacao.c: 102: }
  3645                           ;comunicacao.c: 103: if (data->command == 0x02) {
  3646  007A5E  EE20 F044          	lfsr	2,68
  3647  007A62  5005               	movf	check_data@data,w,c
  3648  007A64  26D9               	addwf	fsr2l,f,c
  3649  007A66  5006               	movf	check_data@data+1,w,c
  3650  007A68  22DA               	addwfc	fsr2h,f,c
  3651  007A6A  0E02               	movlw	2
  3652  007A6C  18DE               	xorwf	postinc2,w,c
  3653  007A6E  A4D8               	btfss	status,2,c
  3654  007A70  D083               	goto	l148
  3655                           
  3656                           ;comunicacao.c: 104: return LE_BOTAO2;
  3657  007A72  0E09               	movlw	9
  3658  007A74  0012               	return	
  3659  007A76                     l129:
  3660  007A76  C005  FFD9         	movff	check_data@data,fsr2l
  3661  007A7A  C006  FFDA         	movff	check_data@data+1,fsr2h
  3662  007A7E  04DE               	decf	postinc2,w,c
  3663  007A80  A4D8               	btfss	status,2,c
  3664  007A82  D038               	goto	l133
  3665                           
  3666                           ;comunicacao.c: 107: if (data->command == 0x21) {
  3667  007A84  EE20 F044          	lfsr	2,68
  3668  007A88  5005               	movf	check_data@data,w,c
  3669  007A8A  26D9               	addwf	fsr2l,f,c
  3670  007A8C  5006               	movf	check_data@data+1,w,c
  3671  007A8E  22DA               	addwfc	fsr2h,f,c
  3672  007A90  0E21               	movlw	33
  3673  007A92  18DE               	xorwf	postinc2,w,c
  3674  007A94  A4D8               	btfss	status,2,c
  3675  007A96  D012               	goto	l134
  3676                           
  3677                           ;comunicacao.c: 108: return(data->buff[5] & 0x01 == 1 ? LIGA_LED1 : DESLIGA_LED1);
  3678  007A98  EE20 F006          	lfsr	2,6
  3679  007A9C  5005               	movf	check_data@data,w,c
  3680  007A9E  26D9               	addwf	fsr2l,f,c
  3681  007AA0  5006               	movf	check_data@data+1,w,c
  3682  007AA2  22DA               	addwfc	fsr2h,f,c
  3683  007AA4  B0DF               	btfsc	indf2,0,c
  3684  007AA6  D004               	goto	l136
  3685  007AA8  0E00               	movlw	0
  3686  007AAA  6E09               	movwf	_check_data$474+1,c
  3687  007AAC  0E06               	movlw	6
  3688  007AAE  D003               	goto	L3
  3689  007AB0                     l136:
  3690  007AB0  0E00               	movlw	0
  3691  007AB2  6E09               	movwf	_check_data$474+1,c
  3692  007AB4  0E04               	movlw	4
  3693  007AB6                     L3:
  3694  007AB6  6E08               	movwf	_check_data$474,c
  3695  007AB8  5008               	movf	_check_data$474,w,c
  3696  007ABA  0012               	return	
  3697  007ABC                     l134:
  3698                           
  3699                           ;comunicacao.c: 109: }
  3700                           ;comunicacao.c: 110: if (data->command == 0x22) {
  3701  007ABC  EE20 F044          	lfsr	2,68
  3702  007AC0  5005               	movf	check_data@data,w,c
  3703  007AC2  26D9               	addwf	fsr2l,f,c
  3704  007AC4  5006               	movf	check_data@data+1,w,c
  3705  007AC6  22DA               	addwfc	fsr2h,f,c
  3706  007AC8  0E22               	movlw	34
  3707  007ACA  18DE               	xorwf	postinc2,w,c
  3708  007ACC  A4D8               	btfss	status,2,c
  3709  007ACE  D054               	goto	l148
  3710                           
  3711                           ;comunicacao.c: 111: return(data->buff[5] & 0x01 == 1 ? LIGA_LED2 : DESLIGA_LED2);
  3712  007AD0  EE20 F006          	lfsr	2,6
  3713  007AD4  5005               	movf	check_data@data,w,c
  3714  007AD6  26D9               	addwf	fsr2l,f,c
  3715  007AD8  5006               	movf	check_data@data+1,w,c
  3716  007ADA  22DA               	addwfc	fsr2h,f,c
  3717  007ADC  B0DF               	btfsc	indf2,0,c
  3718  007ADE  D004               	goto	l141
  3719  007AE0  0E00               	movlw	0
  3720  007AE2  6E0B               	movwf	_check_data$475+1,c
  3721  007AE4  0E07               	movlw	7
  3722  007AE6  D003               	goto	L4
  3723  007AE8                     l141:
  3724  007AE8  0E00               	movlw	0
  3725  007AEA  6E0B               	movwf	_check_data$475+1,c
  3726  007AEC  0E05               	movlw	5
  3727  007AEE                     L4:
  3728  007AEE  6E0A               	movwf	_check_data$475,c
  3729  007AF0  500A               	movf	_check_data$475,w,c
  3730  007AF2  0012               	return	
  3731  007AF4                     l133:
  3732  007AF4  C005  FFD9         	movff	check_data@data,fsr2l
  3733  007AF8  C006  FFDA         	movff	check_data@data+1,fsr2h
  3734  007AFC  0E02               	movlw	2
  3735  007AFE  18DE               	xorwf	postinc2,w,c
  3736  007B00  A4D8               	btfss	status,2,c
  3737  007B02  D018               	goto	l145
  3738                           
  3739                           ;comunicacao.c: 114: if (data->command == 0x41) {
  3740  007B04  EE20 F044          	lfsr	2,68
  3741  007B08  5005               	movf	check_data@data,w,c
  3742  007B0A  26D9               	addwf	fsr2l,f,c
  3743  007B0C  5006               	movf	check_data@data+1,w,c
  3744  007B0E  22DA               	addwfc	fsr2h,f,c
  3745  007B10  0E41               	movlw	65
  3746  007B12  18DE               	xorwf	postinc2,w,c
  3747  007B14  A4D8               	btfss	status,2,c
  3748  007B16  D002               	goto	l146
  3749                           
  3750                           ;comunicacao.c: 117: return PISCA_LED1;
  3751  007B18  0E0B               	movlw	11
  3752  007B1A  0012               	return	
  3753  007B1C                     l146:
  3754                           
  3755                           ;comunicacao.c: 118: }
  3756                           ;comunicacao.c: 119: if (data->command == 0x42) {
  3757  007B1C  EE20 F044          	lfsr	2,68
  3758  007B20  5005               	movf	check_data@data,w,c
  3759  007B22  26D9               	addwf	fsr2l,f,c
  3760  007B24  5006               	movf	check_data@data+1,w,c
  3761  007B26  22DA               	addwfc	fsr2h,f,c
  3762  007B28  0E42               	movlw	66
  3763  007B2A  18DE               	xorwf	postinc2,w,c
  3764  007B2C  A4D8               	btfss	status,2,c
  3765  007B2E  D024               	goto	l148
  3766                           
  3767                           ;comunicacao.c: 122: return PISCA_LED2;
  3768  007B30  0E0C               	movlw	12
  3769  007B32  0012               	return	
  3770  007B34                     l145:
  3771                           
  3772                           ;comunicacao.c: 125: if (data->command == 0x70) {
  3773  007B34  EE20 F044          	lfsr	2,68
  3774  007B38  5005               	movf	check_data@data,w,c
  3775  007B3A  26D9               	addwf	fsr2l,f,c
  3776  007B3C  5006               	movf	check_data@data+1,w,c
  3777  007B3E  22DA               	addwfc	fsr2h,f,c
  3778  007B40  0E70               	movlw	112
  3779  007B42  18DE               	xorwf	postinc2,w,c
  3780  007B44  A4D8               	btfss	status,2,c
  3781  007B46  D016               	goto	l149
  3782                           
  3783                           ;comunicacao.c: 127: if (data->buff[5] < 0x80 && data->buff[5] > 0x9F) {
  3784  007B48  EE20 F006          	lfsr	2,6
  3785  007B4C  5005               	movf	check_data@data,w,c
  3786  007B4E  26D9               	addwf	fsr2l,f,c
  3787  007B50  5006               	movf	check_data@data+1,w,c
  3788  007B52  22DA               	addwfc	fsr2h,f,c
  3789  007B54  0E80               	movlw	128
  3790  007B56  60DF               	cpfslt	indf2,c
  3791  007B58  D00B               	goto	l150
  3792  007B5A  EE20 F006          	lfsr	2,6
  3793  007B5E  5005               	movf	check_data@data,w,c
  3794  007B60  26D9               	addwf	fsr2l,f,c
  3795  007B62  5006               	movf	check_data@data+1,w,c
  3796  007B64  22DA               	addwfc	fsr2h,f,c
  3797  007B66  0E9F               	movlw	159
  3798  007B68  64DF               	cpfsgt	indf2,c
  3799  007B6A  D002               	goto	l150
  3800                           
  3801                           ;comunicacao.c: 128: return ERR_NAK;
  3802  007B6C  0E03               	movlw	3
  3803  007B6E  0012               	return	
  3804  007B70                     l150:
  3805                           
  3806                           ;comunicacao.c: 129: }
  3807                           ;comunicacao.c: 130: return LE_MSG;
  3808  007B70  0E0A               	movlw	10
  3809  007B72  0012               	return	
  3810  007B74                     l149:
  3811                           
  3812                           ;comunicacao.c: 131: }
  3813                           ;comunicacao.c: 132: return ERR_NAK;
  3814  007B74  0E03               	movlw	3
  3815  007B76  0012               	return	
  3816  007B78                     l148:
  3817                           
  3818                           ;comunicacao.c: 133: }
  3819                           ;comunicacao.c: 135: return ERR_UNDETECTED;
  3820  007B78  0E0D               	movlw	13
  3821  007B7A  0012               	return	
  3822  007B7C                     __end_of_check_data:
  3823                           	opt stack 0
  3824                           tblptru	equ	0xFF8
  3825                           prodh	equ	0xFF4
  3826                           prodl	equ	0xFF3
  3827                           postinc0	equ	0xFEE
  3828                           wreg	equ	0xFE8
  3829                           indf1	equ	0xFE7
  3830                           plusw1	equ	0xFE3
  3831                           fsr1h	equ	0xFE2
  3832                           fsr1l	equ	0xFE1
  3833                           indf2	equ	0xFDF
  3834                           postinc2	equ	0xFDE
  3835                           postdec2	equ	0xFDD
  3836                           plusw2	equ	0xFDB
  3837                           fsr2h	equ	0xFDA
  3838                           fsr2l	equ	0xFD9
  3839                           status	equ	0xFD8
  3840                           
  3841 ;; *************** function _calc_bcc *****************
  3842 ;; Defined at:
  3843 ;;		line 68 in file "comunicacao.c"
  3844 ;; Parameters:    Size  Location     Type
  3845 ;;  data            2    0[COMRAM] PTR unsigned char 
  3846 ;;		 -> main@dados(69), 
  3847 ;; Auto vars:     Size  Location     Type
  3848 ;;  i               1    3[COMRAM] unsigned char 
  3849 ;;  bcc             1    2[COMRAM] unsigned char 
  3850 ;; Return value:  Size  Location     Type
  3851 ;;                  1    wreg      unsigned char 
  3852 ;; Registers used:
  3853 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3854 ;; Tracked objects:
  3855 ;;		On entry : 0/0
  3856 ;;		On exit  : 0/0
  3857 ;;		Unchanged: 0/0
  3858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3859 ;;      Params:         2       0       0       0       0       0       0       0       0
  3860 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3861 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3862 ;;      Totals:         4       0       0       0       0       0       0       0       0
  3863 ;;Total ram usage:        4 bytes
  3864 ;; Hardware stack levels used:    1
  3865 ;; This function calls:
  3866 ;;		Nothing
  3867 ;; This function is called by:
  3868 ;;		_write_cmd
  3869 ;;		_check_data
  3870 ;; This function uses a non-reentrant model
  3871 ;;
  3872                           
  3873                           	psect	text24
  3874  007326                     __ptext24:
  3875                           	opt stack 0
  3876  007326                     _calc_bcc:
  3877                           	opt stack 29
  3878                           
  3879                           ;comunicacao.c: 70: uint8_t bcc = data[0];
  3880                           
  3881                           ;incstack = 0
  3882  007326  C001  FFD9         	movff	calc_bcc@data,fsr2l
  3883  00732A  C002  FFDA         	movff	calc_bcc@data+1,fsr2h
  3884  00732E  50DF               	movf	indf2,w,c
  3885  007330  6E03               	movwf	calc_bcc@bcc,c
  3886                           
  3887                           ;comunicacao.c: 73: for (uint8_t i = 1; i < 64; i++) {
  3888  007332  0E01               	movlw	1
  3889  007334  6E04               	movwf	calc_bcc@i,c
  3890  007336                     l1803:
  3891  007336  0E3F               	movlw	63
  3892  007338  6404               	cpfsgt	calc_bcc@i,c
  3893  00733A  D001               	goto	l120
  3894  00733C  D00D               	goto	u900
  3895  00733E                     l120:
  3896                           
  3897                           ;comunicacao.c: 74: bcc = (uint8_t) (bcc ^ data[i]);
  3898  00733E  5004               	movf	calc_bcc@i,w,c
  3899  007340  0D01               	mullw	1
  3900  007342  50F3               	movf	prodl,w,c
  3901  007344  2401               	addwf	calc_bcc@data,w,c
  3902  007346  6ED9               	movwf	fsr2l,c
  3903  007348  50F4               	movf	prodh,w,c
  3904  00734A  2002               	addwfc	calc_bcc@data+1,w,c
  3905  00734C  6EDA               	movwf	fsr2h,c
  3906  00734E  50DF               	movf	indf2,w,c
  3907  007350  1803               	xorwf	calc_bcc@bcc,w,c
  3908  007352  6E03               	movwf	calc_bcc@bcc,c
  3909  007354  2A04               	incf	calc_bcc@i,f,c
  3910  007356  D7EF               	goto	l1803
  3911  007358                     u900:
  3912                           
  3913                           ;comunicacao.c: 75: }
  3914                           ;comunicacao.c: 77: return(bcc);
  3915  007358  5003               	movf	calc_bcc@bcc,w,c
  3916  00735A  0012               	return	
  3917  00735C                     __end_of_calc_bcc:
  3918                           	opt stack 0
  3919                           tblptru	equ	0xFF8
  3920                           prodh	equ	0xFF4
  3921                           prodl	equ	0xFF3
  3922                           postinc0	equ	0xFEE
  3923                           wreg	equ	0xFE8
  3924                           indf1	equ	0xFE7
  3925                           plusw1	equ	0xFE3
  3926                           fsr1h	equ	0xFE2
  3927                           fsr1l	equ	0xFE1
  3928                           indf2	equ	0xFDF
  3929                           postinc2	equ	0xFDE
  3930                           postdec2	equ	0xFDD
  3931                           plusw2	equ	0xFDB
  3932                           fsr2h	equ	0xFDA
  3933                           fsr2l	equ	0xFD9
  3934                           status	equ	0xFD8
  3935                           
  3936 ;; *************** function ___wmul *****************
  3937 ;; Defined at:
  3938 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  3939 ;; Parameters:    Size  Location     Type
  3940 ;;  multiplier      2    0[COMRAM] unsigned int 
  3941 ;;  multiplicand    2    2[COMRAM] unsigned int 
  3942 ;; Auto vars:     Size  Location     Type
  3943 ;;  product         2    4[COMRAM] unsigned int 
  3944 ;; Return value:  Size  Location     Type
  3945 ;;                  2    0[COMRAM] unsigned int 
  3946 ;; Registers used:
  3947 ;;		wreg, status,2, status,0, prodl, prodh
  3948 ;; Tracked objects:
  3949 ;;		On entry : 0/0
  3950 ;;		On exit  : 0/0
  3951 ;;		Unchanged: 0/0
  3952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3953 ;;      Params:         4       0       0       0       0       0       0       0       0
  3954 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3955 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3956 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3957 ;;Total ram usage:        6 bytes
  3958 ;; Hardware stack levels used:    1
  3959 ;; This function calls:
  3960 ;;		Nothing
  3961 ;; This function is called by:
  3962 ;;		_main
  3963 ;; This function uses a non-reentrant model
  3964 ;;
  3965                           
  3966                           	psect	text25
  3967  0072D6                     __ptext25:
  3968                           	opt stack 0
  3969  0072D6                     ___wmul:
  3970                           	opt stack 30
  3971                           
  3972                           ;incstack = 0
  3973  0072D6  5001               	movf	___wmul@multiplier,w,c
  3974  0072D8  0203               	mulwf	___wmul@multiplicand,c
  3975  0072DA  CFF3 F005          	movff	prodl,___wmul@product
  3976  0072DE  CFF4 F006          	movff	prodh,___wmul@product+1
  3977  0072E2  5001               	movf	___wmul@multiplier,w,c
  3978  0072E4  0204               	mulwf	___wmul@multiplicand+1,c
  3979  0072E6  50F3               	movf	prodl,w,c
  3980  0072E8  2606               	addwf	___wmul@product+1,f,c
  3981  0072EA  5002               	movf	___wmul@multiplier+1,w,c
  3982  0072EC  0203               	mulwf	___wmul@multiplicand,c
  3983  0072EE  50F3               	movf	prodl,w,c
  3984  0072F0  2606               	addwf	___wmul@product+1,f,c
  3985  0072F2  C005  F001         	movff	___wmul@product,?___wmul
  3986  0072F6  C006  F002         	movff	___wmul@product+1,?___wmul+1
  3987  0072FA  0012               	return	
  3988  0072FC                     __end_of___wmul:
  3989                           	opt stack 0
  3990  0000                     tblptru	equ	0xFF8
  3991                           prodh	equ	0xFF4
  3992                           prodl	equ	0xFF3
  3993                           postinc0	equ	0xFEE
  3994                           wreg	equ	0xFE8
  3995                           indf1	equ	0xFE7
  3996                           plusw1	equ	0xFE3
  3997                           fsr1h	equ	0xFE2
  3998                           fsr1l	equ	0xFE1
  3999                           indf2	equ	0xFDF
  4000                           postinc2	equ	0xFDE
  4001                           postdec2	equ	0xFDD
  4002                           plusw2	equ	0xFDB
  4003                           fsr2h	equ	0xFDA
  4004                           fsr2l	equ	0xFD9
  4005                           status	equ	0xFD8
  4006                           tblptru	equ	0xFF8
  4007                           prodh	equ	0xFF4
  4008                           prodl	equ	0xFF3
  4009                           postinc0	equ	0xFEE
  4010                           wreg	equ	0xFE8
  4011                           indf1	equ	0xFE7
  4012                           plusw1	equ	0xFE3
  4013                           fsr1h	equ	0xFE2
  4014                           fsr1l	equ	0xFE1
  4015                           indf2	equ	0xFDF
  4016                           postinc2	equ	0xFDE
  4017                           postdec2	equ	0xFDD
  4018                           plusw2	equ	0xFDB
  4019                           fsr2h	equ	0xFDA
  4020                           fsr2l	equ	0xFD9
  4021                           status	equ	0xFD8
  4022                           
  4023                           	psect	rparam
  4024  0000                     tblptru	equ	0xFF8
  4025                           prodh	equ	0xFF4
  4026                           prodl	equ	0xFF3
  4027                           postinc0	equ	0xFEE
  4028                           wreg	equ	0xFE8
  4029                           indf1	equ	0xFE7
  4030                           plusw1	equ	0xFE3
  4031                           fsr1h	equ	0xFE2
  4032                           fsr1l	equ	0xFE1
  4033                           indf2	equ	0xFDF
  4034                           postinc2	equ	0xFDE
  4035                           postdec2	equ	0xFDD
  4036                           plusw2	equ	0xFDB
  4037                           fsr2h	equ	0xFDA
  4038                           fsr2l	equ	0xFD9
  4039                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         97
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     79      79
    BANK0           160    146     146
    BANK1           256      0      97
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    lcd_runtime@lcd	PTR struct . size(2) Largest target is 33
		 -> main@lcd(BANK0[33]), 

    lcd_write@string	PTR unsigned char  size(2) Largest target is 33
		 -> main@msg(BANK0[33]), 

    lcd_write@lcd	PTR struct . size(2) Largest target is 33
		 -> main@lcd(BANK0[33]), 

    lcd_clean_all@lcd	PTR struct . size(2) Largest target is 33
		 -> main@lcd(BANK0[33]), 

    lcd_mem_clean@lcd	PTR struct . size(2) Largest target is 33
		 -> main@lcd(BANK0[33]), 

    lcd_init@lcd	PTR struct . size(2) Largest target is 33
		 -> main@lcd(BANK0[33]), 

    write_zero@dados	PTR struct . size(2) Largest target is 69
		 -> main@dados(BANK0[69]), 

    check_data@data	PTR struct . size(2) Largest target is 69
		 -> main@dados(BANK0[69]), 

    calc_bcc@data	PTR unsigned char  size(2) Largest target is 69
		 -> main@dados(BANK0[69]), 

    write_cmd@data	PTR struct . size(2) Largest target is 69
		 -> main@dados(BANK0[69]), 

    mk_msg@string	PTR unsigned char  size(2) Largest target is 33
		 -> main@msg(BANK0[33]), 

    mk_msg@data	PTR struct . size(2) Largest target is 69
		 -> main@dados(BANK0[69]), 

    rcv_msg@data	PTR struct . size(2) Largest target is 69
		 -> main@dados(BANK0[69]), 

    rcv_msg@msg	PTR unsigned char  size(2) Largest target is 33
		 -> main@msg(BANK0[33]), 


Critical Paths under _main in COMRAM

    _main->_write_cmd
    _write_cmd->_calc_bcc
    _lcd_runtime->_SetDDRamAddr
    _WriteDataXLCD->_DelayFor18TCY
    _lcd_init->_OpenXLCD
    _OpenXLCD->_SetDDRamAddr
    _SetDDRamAddr->_DelayFor18TCY
    _DelayPORXLCD->_delay_ms
    _lcd_clean->_delay_ms
    _WriteCmdXLCD->_DelayFor18TCY
    _BusyXLCD->_DelayFor18TCY
    _check_data->_calc_bcc

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               147   147      0   13667
                                             78 COMRAM     1     1      0
                                              0 BANK0    146   146      0
                             ___wmul
                         _check_data
                           _delay_ms
                      _lcd_clean_all
                           _lcd_init
                        _lcd_runtime
                          _lcd_write
                             _mk_msg
                            _rcv_msg
                      _uart_check_rx
                          _uart_init
                          _write_cmd
                         _write_zero
 ---------------------------------------------------------------------------------
 (1) _write_zero                                           3     1      2     330
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _write_cmd                                           74    71      3    2311
                                              4 COMRAM    74    71      3
                           _calc_bcc
                     _uart_send_byte
 ---------------------------------------------------------------------------------
 (2) _uart_send_byte                                       1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _uart_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _uart_check_rx                                        4     2      2      46
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _rcv_msg                                             12     8      4     286
                                              0 COMRAM    12     8      4
 ---------------------------------------------------------------------------------
 (1) _mk_msg                                               6     1      5    2458
                                              0 COMRAM     6     1      5
 ---------------------------------------------------------------------------------
 (1) _lcd_write                                            6     0      6     664
                                              0 COMRAM     6     0      6
 ---------------------------------------------------------------------------------
 (1) _lcd_runtime                                          8     6      2     526
                                              6 COMRAM     8     6      2
                           _BusyXLCD
                       _SetDDRamAddr
                      _WriteDataXLCD
 ---------------------------------------------------------------------------------
 (2) _WriteDataXLCD                                        1     1      0      90
                                              2 COMRAM     1     1      0
                      _DelayFor18TCY
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             2     0      2    2104
                                              7 COMRAM     2     0      2
                           _BusyXLCD
                           _OpenXLCD
                       _WriteCmdXLCD
                          _lcd_clean
                      _lcd_mem_clean
 ---------------------------------------------------------------------------------
 (2) _OpenXLCD                                             1     1      0     848
                                              6 COMRAM     1     1      0
                           _BusyXLCD
                       _Delay10KTCYx
                       _DelayPORXLCD
                       _SetDDRamAddr
                       _WriteCmdXLCD
 ---------------------------------------------------------------------------------
 (2) _SetDDRamAddr                                         4     4      0      90
                                              2 COMRAM     4     4      0
                      _DelayFor18TCY
 ---------------------------------------------------------------------------------
 (3) _DelayPORXLCD                                         0     0      0     578
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _Delay10KTCYx                                         2     2      0      22
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _lcd_clean_all                                        2     0      2    1120
                                              5 COMRAM     2     0      2
                          _lcd_clean
                      _lcd_mem_clean
 ---------------------------------------------------------------------------------
 (2) _lcd_mem_clean                                        3     1      2     308
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _lcd_clean                                            0     0      0     714
                           _BusyXLCD
                       _WriteCmdXLCD
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                             5     3      2     578
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (3) _WriteCmdXLCD                                         1     1      0      90
                                              2 COMRAM     1     1      0
                      _DelayFor18TCY
 ---------------------------------------------------------------------------------
 (2) _BusyXLCD                                             0     0      0      46
                      _DelayFor18TCY
 ---------------------------------------------------------------------------------
 (3) _DelayFor18TCY                                        2     2      0      46
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _check_data                                           7     5      2     940
                                              4 COMRAM     7     5      2
                           _calc_bcc
 ---------------------------------------------------------------------------------
 (2) _calc_bcc                                             4     2      2     310
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4     463
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___wmul
   _check_data
     _calc_bcc
   _delay_ms
   _lcd_clean_all
     _lcd_clean
       _BusyXLCD
         _DelayFor18TCY
       _WriteCmdXLCD
         _DelayFor18TCY
       _delay_ms
     _lcd_mem_clean
   _lcd_init
     _BusyXLCD
       _DelayFor18TCY
     _OpenXLCD
       _BusyXLCD
         _DelayFor18TCY
       _Delay10KTCYx
       _DelayPORXLCD
         _delay_ms
       _SetDDRamAddr
         _DelayFor18TCY
       _WriteCmdXLCD
         _DelayFor18TCY
     _WriteCmdXLCD
       _DelayFor18TCY
     _lcd_clean
       _BusyXLCD
         _DelayFor18TCY
       _WriteCmdXLCD
         _DelayFor18TCY
       _delay_ms
     _lcd_mem_clean
   _lcd_runtime
     _BusyXLCD
       _DelayFor18TCY
     _SetDDRamAddr
       _DelayFor18TCY
     _WriteDataXLCD
       _DelayFor18TCY
   _lcd_write
   _mk_msg
   _rcv_msg
   _uart_check_rx
   _uart_init
   _write_cmd
     _calc_bcc
     _uart_send_byte
   _write_zero

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      61       7       37.9%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     92      92       5       91.3%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     4F      4F       1       83.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     142      20        0.0%
DATA                 0      0     142       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Thu Jun 14 10:14:57 2018

                     l51 7FF2                       l52 7F8C                       l60 7CAA  
                     l61 7CDC                       l54 7FE6                       l70 7E78  
                     l62 7D0E                       l63 7D46                       l47 7BC8  
                     l72 7ECE                       l64 7D7E                       l48 7C0A  
                     l65 7E1A                       l57 7C16                       l74 7EE4  
                     l66 7DD2                       l58 7C46                       l59 7C78  
                     l68 7E24                       l85 7318                       l77 7F08  
                     l69 7EC4                       l86 7306                       l97 762A  
                     l98 75FA             ?_lcd_runtime 0007      ___wmul@multiplicand 0003  
            __CFG_BORV$3 000000             __CFG_CP0$OFF 000000             __CFG_CP1$OFF 000000  
           __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000                      l103 74D4  
                    l111 7914                      l120 733E                      l104 74A6  
                    l112 78DC                      l130 7A5E                      l114 7974  
                    l115 795C                      l220 7458                      l133 7AF4  
                    l141 7AE8                      l125 79B8                      l150 7B70  
                    l134 7ABC                      l127 79D0                      l223 7468  
                    l136 7AB0                      l128 79EA                      l145 7B34  
                    l129 7A76                      l321 769C                      l153 7592  
                    l146 7B1C                      l330 76C6                      l226 7478  
                    l250 7758                      l251 772E                      l148 7B78  
                    l149 7B74                      l237 753C                      l333 76D6  
                    l245 7722                      l181 73A4                      l327 76B6  
                    l271 7852                      l255 77A0                      l336 76E6  
                    l256 7776                      l185 73C8                      l282 72D4  
                    l266 77F8                      l339 76F6                      l196 7254  
                    l279 72CE                      l297 7382                      l576 726E  
           __CFG_CPB$OFF 000000             __CFG_CPD$OFF 000000                      u900 7358  
                    u930 76A6                      u885 74F4             __CFG_BOR$OFF 000000  
            lcd_init@lcd 0008    __size_of_WriteCmdXLCD 003E                      prod 000FF3  
        lcd_write@string 0005                      wreg 000FE8            write_cmd@data 0005  
           __CFG_LVP$OFF 000000           write_cmd@F4643 0100             __CFG_WDT$OFF 000000  
                   l2203 788E                     l1701 72BE                     l1803 7336  
                   l2187 7834                     l1817 724C                     l1941 758A  
                   l1877 7534                     u1010 7578                     u1121 78A6  
                   u1220 776C                     u1070 75B2                     u1240 77B4  
                   u1090 73B6                     u1501 7BAA                     u1510 7BD4  
                   u1610 7EA6                     u1460 7834                     u1540 7DDC  
                   u1608 7E84                     u1560 7DFE                     u1490 788E  
                   u1660 7F20                     u1628 7EA8                     u1590 7E82  
                   u1558 7DDE                     u1578 7E00                     u1677 7274  
                   u1687 730C                     _RCIF 007CF5                     _TRMT 007D61  
                   _TXIF 007CF4                     _main 7B7C                     fsr1h 000FE2  
                   fsr2h 000FDA                     indf1 000FE7                     indf2 000FDF  
                   fsr1l 000FE1                     fsr2l 000FD9   __size_of_WriteDataXLCD 003E  
                   prodh 000FF4                     prodl 000FF3                     start 0000  
          __CFG_IESO$OFF 000000             ___param_bank 000000         ??_uart_send_byte 0001  
        ??_lcd_clean_all 0008             _WriteCmdXLCD 73D2            __CFG_PLLDIV$1 000000  
          ?_SetDDRamAddr 0001                    ?_main 0001                    _RCREG 000FAE  
                  _RCSTA 000FAB                    _SPBRG 000FAF                    _PORTB 000F81  
          __CFG_USBDIV$1 000000                    _TRISB 000F93                    _TXREG 000FAD  
  __size_of_Delay10KTCYx 0016                    _TXSTA 000FAC            __CFG_PWRT$OFF 000000  
          __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000  
          __CFG_WRT3$OFF 000000           __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000  
         __CFG_EBTR1$OFF 000000           __CFG_EBTR2$OFF 000000           __CFG_EBTR3$OFF 000000  
          __CFG_WRTB$OFF 000000            __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000  
         __CFG_EBTRB$OFF 000000             main@piscadas 0087          ??_lcd_mem_clean 0003  
                  main@i 0085             main@tempo_ms 008A          __end_of_rcv_msg 7664  
                  plusw1 000FE3                    plusw2 000FDB                    status 000FD8  
         __CFG_ICPRT$OFF 000000             lcd_runtime@i 000B             lcd_write@col 0004  
           lcd_write@lcd 0001             lcd_write@row 0003           __CFG_MCLRE$OFF 000000  
        __initialization 7282             __end_of_main 8000         __end_of_BusyXLCD 7396  
           _Delay10KTCYx 726C    __size_of_DelayPORXLCD 000E           ??_SetDDRamAddr 0003  
       __end_of_OpenXLCD 7708                   ??_main 004F            __activetblptr 000002  
          _WriteDataXLCD 7410          __CFG_CCP2MX$OFF 000000           DelayFor18TCY@i 0001  
                 _ADCON1 000FC1                   _OSCCON 000FD3         __end_of_calc_bcc 735C  
       __end_of_delay_ms 7326             _DelayPORXLCD 722E           __CFG_XINST$OFF 000000  
       __end_of_lcd_init 7494                   ___wmul 72D6              mk_msg@count 0003  
                 _mk_msg 7494                   clear_0 7288           ?_WriteDataXLCD 0001  
         lcd_mem_clean@i 0003     __size_of_lcd_runtime 00DA                ??_rcv_msg 0005  
                 tblptru 000FF8         write_cmd@addr_to 0007               __accesstop 0060  
__end_of__initialization 728E          __CFG_PBADEN$OFF 000000            ___rparam_used 000001  
         __pcstackCOMRAM 0001       __size_of_lcd_clean 001E       __size_of_lcd_write 00BA  
 __size_of_DelayFor18TCY 0020               __pbssBANK1 0100               _check_data 79A0  
              ?_BusyXLCD 0001          WriteCmdXLCD@cmd 0003     __end_of_SetDDRamAddr 7530  
              ?_OpenXLCD 0001        WriteDataXLCD@data 0003                  ?___wmul 0001  
  __end_of_uart_check_rx 73D2          write_zero@dados 0001          ??_WriteDataXLCD 0003  
       lcd_clean_all@lcd 0006                  ?_mk_msg 0001                ?_calc_bcc 0001  
     __size_of_uart_init 000E                ?_delay_ms 0001                ?_lcd_init 0008  
             ??_BusyXLCD 0003          __CFG_VREGEN$OFF 000000              rcv_msg@data 0001  
             ??_OpenXLCD 0007       __size_of_write_cmd 0104                  __Hparam 0000  
                __Lparam 0000        __end_of_lcd_clean 72B6            _DelayFor18TCY 72B6  
      __end_of_lcd_write 77C2          __size_of___wmul 0026          __CFG_STVREN$OFF 000000  
                __pcinit 7282          __size_of_mk_msg 004A    __end_of_lcd_clean_all 726C  
                __ramtop 0800                  __ptext0 7B7C                  __ptext1 7586  
                __ptext2 789C                  __ptext3 724A                  __ptext4 723C  
                __ptext5 7396                  __ptext6 75F4                  __ptext7 7494  
                __ptext8 7708                  __ptext9 77C2               ??_calc_bcc 0003  
           mk_msg@string 0004                  _rcv_msg 75F4               ??_delay_ms 0003  
                main@lcd 008C                  main@msg 0060                  main@pos 0088  
             ??_lcd_init 000A     end_of_initialization 728E              ?_check_data 0005  
  __end_of_lcd_mem_clean 7586                  mk_msg@i 0006            __Lmediumconst 0000  
      __end_of_uart_init 724A             calc_bcc@data 0001                _RCSTAbits 000FAB  
         ?_DelayFor18TCY 0001                  postdec2 000FDD                  postinc0 000FEE  
                postinc2 000FDE                _PORTCbits 000F82                _PORTDbits 000F83  
         lcd_runtime@lcd 0007        __end_of_write_cmd 79A0  __size_of_uart_send_byte 0010  
              _TRISBbits 000F93                _TRISCbits 000F94                _TRISDbits 000F95  
  __size_of_SetDDRamAddr 0052             write_cmd@aux 000D               main@coluna 0084  
          ??_lcd_runtime 0009           __end_of___wmul 72FC            delay_ms@milis 0001  
         check_data@data 0005      __size_of_check_data 01DC               _write_zero 7586  
         __end_of_mk_msg 74DE             _SetDDRamAddr 74DE       SetDDRamAddr@DDaddr 0006  
    start_initialization 7282       uart_check_rx@tempo 0003        __size_of_BusyXLCD 003A  
        ??_DelayFor18TCY 0001        __size_of_OpenXLCD 00A4               mk_msg@data 0001  
               ??___wmul 0005            ?_WriteCmdXLCD 0001         __CFG_LPT1OSC$OFF 000000  
               ??_mk_msg 0006      __end_of_lcd_runtime 789C            __pcstackBANK0 0060  
      __size_of_calc_bcc 0036        __size_of_delay_ms 002A        __size_of_lcd_init 0046  
         ??_WriteCmdXLCD 0003            ?_Delay10KTCYx 0001                _lcd_clean 7298  
              calc_bcc@i 0004              ?_write_zero 0001    __end_of_WriteDataXLCD 744E  
              _lcd_write 7708           _uart_send_byte 724A               rcv_msg@msg 0003  
               ?_rcv_msg 0001             ??_check_data 0007   __size_of_uart_check_rx 003C  
         ___wmul@product 0005                 _LATBbits 000F8A                delay_ms@t 0004  
          ?_DelayPORXLCD 0001              calc_bcc@bcc 0003          OpenXLCD@lcdtype 0007  
       __CFG_WDTPS$32768 000000           ??_Delay10KTCYx 0001                main@F4666 0140  
              _uart_init 723C               ?_lcd_clean 0001              _lcd_runtime 77C2  
 __end_of_uart_send_byte 725A                main@i_360 0089                main@i_356 0086  
             ?_lcd_write 0001        ___wmul@multiplier 0001       __end_of_check_data 7B7C  
              main@dados 00AD                main@linha 0083         Delay10KTCYx@unit 0002  
            write_zero@i 0003                _write_cmd 789C                 _BusyXLCD 735C  
     uart_send_byte@byte 0001   __size_of_lcd_clean_all 0012      __size_of_write_zero 006E  
         ??_DelayPORXLCD 0006                 _OpenXLCD 7664                 __Hrparam 0000  
               __Lrparam 0000               ?_uart_init 0001            _uart_check_rx 7396  
        ?_uart_send_byte 0001    __CFG_FOSC$INTOSCIO_EC 000000   __size_of_lcd_mem_clean 0056  
               _calc_bcc 7326                 _main$358 0081                 _delay_ms 72FC  
       __size_of_rcv_msg 0070                 __ptext10 7410                 __ptext11 744E  
               __ptext20 73D2                 __ptext12 7664                 __ptext21 735C  
               __ptext13 74DE                 __ptext22 72B6                 __ptext14 722E  
               __ptext23 79A0                 __ptext15 726C                 __ptext24 7326  
               __ptext16 725A                 __ptext25 72D6                 __ptext17 7530  
               __ptext18 7298                 __ptext19 72FC               ?_write_cmd 0005  
               _lcd_init 744E     __end_of_WriteCmdXLCD 7410            __size_of_main 0484  
         ?_uart_check_rx 0001               write_cmd@i 004E               write_cmd@t 004D  
            ??_lcd_clean 0006         lcd_mem_clean@lcd 0001              ??_lcd_write 0007  
          _lcd_clean_all 725A    __CFG_CPUDIV$OSC1_PLL2 000000     __end_of_Delay10KTCYx 7282  
          _lcd_mem_clean 7530                 rcv_msg@i 000C    __end_of_DelayFor18TCY 72D6  
            ??_uart_init 0001           ?_lcd_clean_all 0006             ??_write_zero 0003  
   __end_of_DelayPORXLCD 723C         lcd_runtime@i_626 000D              ??_write_cmd 0008  
         ?_lcd_mem_clean 0001       __end_of_write_zero 75F4           _check_data$474 0008  
         _check_data$475 000A          ??_uart_check_rx 0003  
