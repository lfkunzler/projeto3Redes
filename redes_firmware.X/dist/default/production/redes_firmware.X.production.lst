

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Thu May 31 01:38:17 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    19                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    20  0000                     
    21                           ; Version 1.45
    22                           ; Generated 16/11/2017 GMT
    23                           ; 
    24                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    25                           ; All rights reserved.
    26                           ; 
    27                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    28                           ; 
    29                           ; Redistribution and use in source and binary forms, with or without modification, are
    30                           ; permitted provided that the following conditions are met:
    31                           ; 
    32                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    33                           ;        conditions and the following disclaimer.
    34                           ; 
    35                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    36                           ;        of conditions and the following disclaimer in the documentation and/or other
    37                           ;        materials provided with the distribution.
    38                           ; 
    39                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    40                           ;        software without specific prior written permission.
    41                           ; 
    42                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    43                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    44                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    45                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    46                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    47                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    48                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    49                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    50                           ; 
    51                           ; 
    52                           ; Code-generator required, PIC18F4550 Definitions
    53                           ; 
    54                           ; SFR Addresses
    55  0000                     _TXREG	set	4013
    56  0000                     _RCSTAbits	set	4011
    57  0000                     _SPBRG	set	4015
    58  0000                     _TXSTA	set	4012
    59  0000                     _RCSTA	set	4011
    60  0000                     _RCREG	set	4014
    61  0000                     _PORTDbits	set	3971
    62  0000                     _TRISDbits	set	3989
    63  0000                     _ADCON1	set	4033
    64  0000                     _TRMT	set	32097
    65  0000                     _TXIF	set	31988
    66  0000                     _RCIF	set	31989
    67                           
    68                           	psect	smallconst
    69  000800                     __psmallconst:
    70                           	opt stack 0
    71  000800  00                 	db	0
    72  000801                     STR_6:
    73  000801  6E                 	db	110	;'n'
    74  000802  61                 	db	97	;'a'
    75  000803  6F                 	db	111	;'o'
    76  000804  20                 	db	32
    77  000805  73                 	db	115	;'s'
    78  000806  65                 	db	101	;'e'
    79  000807  69                 	db	105	;'i'
    80  000808  20                 	db	32
    81  000809  6F                 	db	111	;'o'
    82  00080A  20                 	db	32
    83  00080B  71                 	db	113	;'q'
    84  00080C  75                 	db	117	;'u'
    85  00080D  65                 	db	101	;'e'
    86  00080E  20                 	db	32
    87  00080F  68                 	db	104	;'h'
    88  000810  6F                 	db	111	;'o'
    89  000811  75                 	db	117	;'u'
    90  000812  76                 	db	118	;'v'
    91  000813  65                 	db	101	;'e'
    92  000814  00                 	db	0
    93  000815  00                 	db	0
    94  000816                     STR_2:
    95  000816  6E                 	db	110	;'n'
    96  000817  61                 	db	97	;'a'
    97  000818  6F                 	db	111	;'o'
    98  000819  20                 	db	32
    99  00081A  65                 	db	101	;'e'
   100  00081B  68                 	db	104	;'h'
   101  00081C  20                 	db	32
   102  00081D  70                 	db	112	;'p'
   103  00081E  61                 	db	97	;'a'
   104  00081F  72                 	db	114	;'r'
   105  000820  61                 	db	97	;'a'
   106  000821  20                 	db	32
   107  000822  6D                 	db	109	;'m'
   108  000823  69                 	db	105	;'i'
   109  000824  6D                 	db	109	;'m'
   110  000825  00                 	db	0
   111  000826  00                 	db	0
   112  000827                     STR_5:
   113  000827  6C                 	db	108	;'l'
   114  000828  69                 	db	105	;'i'
   115  000829  67                 	db	103	;'g'
   116  00082A  75                 	db	117	;'u'
   117  00082B  65                 	db	101	;'e'
   118  00082C  69                 	db	105	;'i'
   119  00082D  20                 	db	32
   120  00082E  6F                 	db	111	;'o'
   121  00082F  20                 	db	32
   122  000830  6C                 	db	108	;'l'
   123  000831  65                 	db	101	;'e'
   124  000832  64                 	db	100	;'d'
   125  000833  31                 	db	49	;'1'
   126  000834  00                 	db	0
   127  000835  00                 	db	0
   128  000836                     STR_1:
   129  000836  65                 	db	101	;'e'
   130  000837  72                 	db	114	;'r'
   131  000838  72                 	db	114	;'r'
   132  000839  6F                 	db	111	;'o'
   133  00083A  20                 	db	32
   134  00083B  6E                 	db	110	;'n'
   135  00083C  6F                 	db	111	;'o'
   136  00083D  20                 	db	32
   137  00083E  73                 	db	115	;'s'
   138  00083F  74                 	db	116	;'t'
   139  000840  78                 	db	120	;'x'
   140  000841  00                 	db	0
   141  000842  00                 	db	0
   142  000843                     STR_3:
   143  000843  42                 	db	66	;'B'
   144  000844  43                 	db	67	;'C'
   145  000845  43                 	db	67	;'C'
   146  000846  45                 	db	69	;'E'
   147  000847  52                 	db	82	;'R'
   148  000848  52                 	db	82	;'R'
   149  000849  00                 	db	0
   150  00084A  00                 	db	0
   151  00084B                     STR_4:
   152  00084B  6F                 	db	111	;'o'
   153  00084C  69                 	db	105	;'i'
   154  00084D  20                 	db	32
   155  00084E  6E                 	db	110	;'n'
   156  00084F  61                 	db	97	;'a'
   157  000850  6B                 	db	107	;'k'
   158  000851  00                 	db	0
   159  000852  00                 	db	0
   160                           
   161                           ; #config settings
   162  000853  00                 	db	0	; dummy byte at the end
   163  0000                     
   164                           	psect	cinit
   165  000C90                     __pcinit:
   166                           	opt stack 0
   167  000C90                     start_initialization:
   168                           	opt stack 0
   169  000C90                     __initialization:
   170                           	opt stack 0
   171                           
   172                           ; Clear objects allocated to BANK0 (64 bytes)
   173  000C90  EE00  F0A5         	lfsr	0,__pbssBANK0
   174  000C94  0E40               	movlw	64
   175  000C96                     clear_0:
   176  000C96  6AEE               	clrf	postinc0,c
   177  000C98  06E8               	decf	wreg,f,c
   178  000C9A  E1FD               	bnz	clear_0
   179  000C9C                     end_of_initialization:
   180                           	opt stack 0
   181  000C9C                     __end_of__initialization:
   182                           	opt stack 0
   183  000C9C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   184  000C9E  6EF8               	movwf	tblptru,c
   185  000CA0  0100               	movlb	0
   186  000CA2  EFCF  F004         	goto	_main	;jump to C main() function
   187                           tblptru	equ	0xFF8
   188                           postinc0	equ	0xFEE
   189                           wreg	equ	0xFE8
   190                           
   191                           	psect	bssBANK0
   192  0000A5                     __pbssBANK0:
   193                           	opt stack 0
   194  0000A5                     send_string_data@F3860:
   195                           	opt stack 0
   196  0000A5                     	ds	64
   197                           tblptru	equ	0xFF8
   198                           postinc0	equ	0xFEE
   199                           wreg	equ	0xFE8
   200                           
   201                           	psect	cstackBANK0
   202  000060                     __pcstackBANK0:
   203                           	opt stack 0
   204  000060                     main@dados:
   205                           	opt stack 0
   206                           
   207                           ; 69 bytes @ 0x0
   208  000060                     	ds	69
   209                           tblptru	equ	0xFF8
   210                           postinc0	equ	0xFEE
   211                           wreg	equ	0xFE8
   212                           
   213                           	psect	cstackCOMRAM
   214  000001                     __pcstackCOMRAM:
   215                           	opt stack 0
   216  000001                     ?_uart_check_rx:
   217                           	opt stack 0
   218  000001                     uart_send_byte@byte:
   219                           	opt stack 0
   220  000001                     zera_dados@dados:
   221                           	opt stack 0
   222  000001                     calc_bcc@data:
   223                           	opt stack 0
   224                           
   225                           ; 2 bytes @ 0x0
   226  000001                     	ds	2
   227  000003                     zera_dados@i:
   228                           	opt stack 0
   229  000003                     uart_check_rx@tempo:
   230                           	opt stack 0
   231                           
   232                           ; 2 bytes @ 0x2
   233  000003                     	ds	1
   234  000004                     calc_bcc@bcc:
   235                           	opt stack 0
   236                           
   237                           ; 1 bytes @ 0x3
   238  000004                     	ds	1
   239  000005                     calc_bcc@i:
   240                           	opt stack 0
   241                           
   242                           ; 1 bytes @ 0x4
   243  000005                     	ds	1
   244  000006                     send_string_data@string:
   245                           	opt stack 0
   246  000006                     check_data@data:
   247                           	opt stack 0
   248                           
   249                           ; 2 bytes @ 0x5
   250  000006                     	ds	2
   251  000008                     send_string_data@dados:
   252                           	opt stack 0
   253                           
   254                           ; 2 bytes @ 0x7
   255  000008                     	ds	1
   256  000009                     _check_data$327:
   257                           	opt stack 0
   258                           
   259                           ; 2 bytes @ 0x8
   260  000009                     	ds	1
   261  00000A                     ??_send_string_data:
   262                           
   263                           ; 1 bytes @ 0x9
   264  00000A                     	ds	1
   265  00000B                     _check_data$328:
   266                           	opt stack 0
   267                           
   268                           ; 2 bytes @ 0xA
   269  00000B                     	ds	4
   270  00000F                     send_string_data@aux:
   271                           	opt stack 0
   272                           
   273                           ; 64 bytes @ 0xE
   274  00000F                     	ds	64
   275  00004F                     send_string_data@i:
   276                           	opt stack 0
   277                           
   278                           ; 1 bytes @ 0x4E
   279  00004F                     	ds	1
   280  000050                     send_string_data@count:
   281                           	opt stack 0
   282                           
   283                           ; 1 bytes @ 0x4F
   284  000050                     	ds	1
   285  000051                     tblptru	equ	0xFF8
   286                           postinc0	equ	0xFEE
   287                           wreg	equ	0xFE8
   288                           
   289                           ; 1 bytes @ 0x50
   290 ;;
   291 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   292 ;;
   293 ;; *************** function _main *****************
   294 ;; Defined at:
   295 ;;		line 27 in file "main.c"
   296 ;; Parameters:    Size  Location     Type
   297 ;;		None
   298 ;; Auto vars:     Size  Location     Type
   299 ;;  dados          69    0[BANK0 ] struct .
   300 ;; Return value:  Size  Location     Type
   301 ;;                  1    wreg      void 
   302 ;; Registers used:
   303 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   304 ;; Tracked objects:
   305 ;;		On entry : 0/0
   306 ;;		On exit  : 0/0
   307 ;;		Unchanged: 0/0
   308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   309 ;;      Params:         0       0       0       0       0       0       0       0       0
   310 ;;      Locals:         0      69       0       0       0       0       0       0       0
   311 ;;      Temps:          0       0       0       0       0       0       0       0       0
   312 ;;      Totals:         0      69       0       0       0       0       0       0       0
   313 ;;Total ram usage:       69 bytes
   314 ;; Hardware stack levels required when called:    2
   315 ;; This function calls:
   316 ;;		_check_data
   317 ;;		_send_string_data
   318 ;;		_uart_check_rx
   319 ;;		_uart_init
   320 ;;		_zera_dados
   321 ;; This function is called by:
   322 ;;		Startup code after reset
   323 ;; This function uses a non-reentrant model
   324 ;;
   325                           
   326                           	psect	text0
   327  00099E                     __ptext0:
   328                           	opt stack 0
   329  00099E                     _main:
   330                           	opt stack 29
   331                           
   332                           ;main.c: 31: ADCON1 = 0x0F;
   333                           
   334                           ;incstack = 0
   335  00099E  0E0F               	movlw	15
   336  0009A0  6EC1               	movwf	4033,c	;volatile
   337                           
   338                           ;main.c: 33: TRISDbits.RD0 = 0;
   339  0009A2  9095               	bcf	3989,0,c	;volatile
   340                           
   341                           ;main.c: 34: TRISDbits.RD1 = 0;
   342  0009A4  9295               	bcf	3989,1,c	;volatile
   343                           
   344                           ;main.c: 38: uart_init();
   345  0009A6  EC5B  F006         	call	_uart_init	;wreg free
   346                           
   347                           ;main.c: 45: dados_t dados;
   348                           ;main.c: 50: PORTDbits.RD0 = 1;
   349  0009AA  8083               	bsf	3971,0,c	;volatile
   350                           
   351                           ;main.c: 51: PORTDbits.RD1 = 1;
   352  0009AC  8283               	bsf	3971,1,c	;volatile
   353                           
   354                           ;main.c: 52: zera_dados(&dados);
   355  0009AE  0E60               	movlw	low main@dados
   356  0009B0  6E01               	movwf	zera_dados@dados,c
   357  0009B2  0E00               	movlw	high main@dados
   358  0009B4  6E02               	movwf	zera_dados@dados+1,c
   359  0009B6  ECDE  F005         	call	_zera_dados	;wreg free
   360  0009BA                     
   361                           ;main.c: 59: if (!uart_check_rx()) {
   362  0009BA  EC2A  F006         	call	_uart_check_rx	;wreg free
   363  0009BE  5001               	movf	?_uart_check_rx,w,c
   364  0009C0  1002               	iorwf	?_uart_check_rx+1,w,c
   365  0009C2  A4D8               	btfss	status,2,c
   366  0009C4  D01B               	goto	l35
   367  0009C6                     u430:
   368                           
   369                           ;main.c: 62: dados.buff[dados.count++] = RCREG;
   370                           
   371                           ;main.c: 60: do {
   372  0009C6  0100               	movlb	0	; () banked
   373  0009C8  5160               	movf	main@dados& (0+255),w,b
   374  0009CA  0D01               	mullw	1
   375  0009CC  0E01               	movlw	1
   376  0009CE  26F3               	addwf	prodl,f,c
   377  0009D0  0E00               	movlw	0
   378  0009D2  22F4               	addwfc	prodh,f,c
   379  0009D4  0E60               	movlw	low main@dados
   380  0009D6  24F3               	addwf	prodl,w,c
   381  0009D8  6ED9               	movwf	fsr2l,c
   382  0009DA  0E00               	movlw	high main@dados
   383  0009DC  20F4               	addwfc	prodh,w,c
   384  0009DE  6EDA               	movwf	fsr2h,c
   385  0009E0  CFAE FFDF          	movff	4014,indf2	;volatile
   386                           
   387                           ; BSR set to: 0
   388  0009E4  2B60               	incf	main@dados& (0+255),f,b
   389                           
   390                           ; BSR set to: 0
   391                           ;main.c: 63: } while (!uart_check_rx());
   392  0009E6  EC2A  F006         	call	_uart_check_rx	;wreg free
   393  0009EA  5001               	movf	?_uart_check_rx,w,c
   394  0009EC  1002               	iorwf	?_uart_check_rx+1,w,c
   395  0009EE  B4D8               	btfsc	status,2,c
   396  0009F0  D7EA               	goto	u430
   397                           
   398                           ;main.c: 64: dados.data_flag = 1;
   399  0009F2  0E00               	movlw	0
   400  0009F4  0100               	movlb	0	; () banked
   401  0009F6  6FA2               	movwf	(main@dados+66)& (0+255),b
   402  0009F8  0E01               	movlw	1
   403  0009FA  6FA1               	movwf	(main@dados+65)& (0+255),b
   404  0009FC                     l35:
   405                           
   406                           ;main.c: 65: }
   407                           ;main.c: 68: if (dados.data_flag) {
   408                           
   409                           ; BSR set to: 0
   410  0009FC  0100               	movlb	0	; () banked
   411  0009FE  51A1               	movf	(main@dados+65)& (0+255),w,b
   412  000A00  11A2               	iorwf	(main@dados+66)& (0+255),w,b
   413  000A02  A4D8               	btfss	status,2,c
   414  000A04  D04A               	goto	l39
   415  000A06  D7D9               	goto	l34
   416  000A08                     
   417                           ;main.c: 72: send_string_data((char *)"erro no stx\0", &dados);
   418                           
   419                           ; BSR set to: 0
   420  000A08  0E36               	movlw	low STR_1
   421  000A0A  6E06               	movwf	send_string_data@string,c
   422  000A0C  0E08               	movlw	high STR_1
   423  000A0E  6E07               	movwf	send_string_data@string+1,c
   424  000A10  0E60               	movlw	low main@dados
   425  000A12  6E08               	movwf	send_string_data@dados,c
   426  000A14  0E00               	movlw	high main@dados
   427  000A16  6E09               	movwf	send_string_data@dados+1,c
   428  000A18  EC2A  F004         	call	_send_string_data	;wreg free
   429                           
   430                           ;main.c: 74: break;
   431  000A1C  D05D               	goto	l41
   432  000A1E                     
   433                           ;main.c: 76: send_string_data((char *)"nao eh para mim\0", &dados);
   434  000A1E  0E16               	movlw	low STR_2
   435  000A20  6E06               	movwf	send_string_data@string,c
   436  000A22  0E08               	movlw	high STR_2
   437  000A24  6E07               	movwf	send_string_data@string+1,c
   438  000A26  0E60               	movlw	low main@dados
   439  000A28  6E08               	movwf	send_string_data@dados,c
   440  000A2A  0E00               	movlw	high main@dados
   441  000A2C  6E09               	movwf	send_string_data@dados+1,c
   442  000A2E  EC2A  F004         	call	_send_string_data	;wreg free
   443                           
   444                           ;main.c: 78: break;
   445  000A32  D052               	goto	l41
   446  000A34                     
   447                           ;main.c: 80: send_string_data((char *)"BCCERR\0", &dados);
   448  000A34  0E43               	movlw	low STR_3
   449  000A36  6E06               	movwf	send_string_data@string,c
   450  000A38  0E08               	movlw	high STR_3
   451  000A3A  6E07               	movwf	send_string_data@string+1,c
   452  000A3C  0E60               	movlw	low main@dados
   453  000A3E  6E08               	movwf	send_string_data@dados,c
   454  000A40  0E00               	movlw	high main@dados
   455  000A42  6E09               	movwf	send_string_data@dados+1,c
   456  000A44  EC2A  F004         	call	_send_string_data	;wreg free
   457                           
   458                           ;main.c: 81: break;
   459  000A48  D047               	goto	l41
   460  000A4A                     
   461                           ;main.c: 83: send_string_data((char *)"oi nak\0", &dados);
   462  000A4A  0E4B               	movlw	low STR_4
   463  000A4C  6E06               	movwf	send_string_data@string,c
   464  000A4E  0E08               	movlw	high STR_4
   465  000A50  6E07               	movwf	send_string_data@string+1,c
   466  000A52  0E60               	movlw	low main@dados
   467  000A54  6E08               	movwf	send_string_data@dados,c
   468  000A56  0E00               	movlw	high main@dados
   469  000A58  6E09               	movwf	send_string_data@dados+1,c
   470  000A5A  EC2A  F004         	call	_send_string_data	;wreg free
   471                           
   472                           ;main.c: 84: break;
   473  000A5E  D03C               	goto	l41
   474  000A60                     l45:
   475                           
   476                           ;main.c: 86: PORTDbits.RD0 = 0;
   477  000A60  9083               	bcf	3971,0,c	;volatile
   478                           
   479                           ;main.c: 87: send_string_data("liguei o led1\0", &dados);
   480  000A62  0E27               	movlw	low STR_5
   481  000A64  6E06               	movwf	send_string_data@string,c
   482  000A66  0E08               	movlw	high STR_5
   483  000A68  6E07               	movwf	send_string_data@string+1,c
   484  000A6A  0E60               	movlw	low main@dados
   485  000A6C  6E08               	movwf	send_string_data@dados,c
   486  000A6E  0E00               	movlw	high main@dados
   487  000A70  6E09               	movwf	send_string_data@dados+1,c
   488  000A72  EC2A  F004         	call	_send_string_data	;wreg free
   489                           
   490                           ;main.c: 88: break;
   491  000A76  D030               	goto	l41
   492  000A78                     l46:
   493                           
   494                           ;main.c: 90: PORTDbits.RD0 = 1;
   495  000A78  8083               	bsf	3971,0,c	;volatile
   496                           
   497                           ;main.c: 91: break;
   498  000A7A  D02E               	goto	l41
   499  000A7C                     l47:
   500                           
   501                           ;main.c: 93: PORTDbits.RD1 = 0;
   502  000A7C  9283               	bcf	3971,1,c	;volatile
   503                           
   504                           ;main.c: 94: break;
   505  000A7E  D02C               	goto	l41
   506  000A80                     l48:
   507                           
   508                           ;main.c: 96: PORTDbits.RD1 = 1;
   509  000A80  8283               	bsf	3971,1,c	;volatile
   510                           
   511                           ;main.c: 97: break;
   512  000A82  D02A               	goto	l41
   513  000A84                     
   514                           ;main.c: 99: send_string_data((char *)"nao sei o que houve\0", &dados);
   515  000A84  0E01               	movlw	low STR_6
   516  000A86  6E06               	movwf	send_string_data@string,c
   517  000A88  0E08               	movlw	high STR_6
   518  000A8A  6E07               	movwf	send_string_data@string+1,c
   519  000A8C  0E60               	movlw	low main@dados
   520  000A8E  6E08               	movwf	send_string_data@dados,c
   521  000A90  0E00               	movlw	high main@dados
   522  000A92  6E09               	movwf	send_string_data@dados+1,c
   523  000A94  EC2A  F004         	call	_send_string_data	;wreg free
   524                           
   525                           ;main.c: 101: }
   526                           
   527                           ;main.c: 100: break;
   528  000A98  D01F               	goto	l41
   529  000A9A                     l39:
   530  000A9A  0E60               	movlw	low main@dados
   531  000A9C  6E06               	movwf	check_data@data,c
   532  000A9E  0E00               	movlw	high main@dados
   533  000AA0  6E07               	movwf	check_data@data+1,c
   534  000AA2  EC73  F005         	call	_check_data	;wreg free
   535                           
   536                           ; Switch size 1, requested type "space"
   537                           ; Number of cases is 8, Range of values is 0 to 7
   538                           ; switch strategies available:
   539                           ; Name         Instructions Cycles
   540                           ; simple_byte           25    13 (average)
   541                           ;	Chosen strategy is simple_byte
   542  000AA6  0A00               	xorlw	0	; case 0
   543  000AA8  B4D8               	btfsc	status,2,c
   544  000AAA  D7AE               	goto	l40
   545  000AAC  0A01               	xorlw	1	; case 1
   546  000AAE  B4D8               	btfsc	status,2,c
   547  000AB0  D7B6               	goto	l42
   548  000AB2  0A03               	xorlw	3	; case 2
   549  000AB4  B4D8               	btfsc	status,2,c
   550  000AB6  D7BE               	goto	l43
   551  000AB8  0A01               	xorlw	1	; case 3
   552  000ABA  B4D8               	btfsc	status,2,c
   553  000ABC  D7C6               	goto	l44
   554  000ABE  0A07               	xorlw	7	; case 4
   555  000AC0  B4D8               	btfsc	status,2,c
   556  000AC2  D7CE               	goto	l45
   557  000AC4  0A01               	xorlw	1	; case 5
   558  000AC6  B4D8               	btfsc	status,2,c
   559  000AC8  D7D9               	goto	l47
   560  000ACA  0A03               	xorlw	3	; case 6
   561  000ACC  B4D8               	btfsc	status,2,c
   562  000ACE  D7D4               	goto	l46
   563  000AD0  0A01               	xorlw	1	; case 7
   564  000AD2  B4D8               	btfsc	status,2,c
   565  000AD4  D7D5               	goto	l48
   566  000AD6  D7D6               	goto	l49
   567  000AD8                     l41:
   568                           
   569                           ;main.c: 103: zera_dados(&dados);
   570  000AD8  0E60               	movlw	low main@dados
   571  000ADA  6E01               	movwf	zera_dados@dados,c
   572  000ADC  0E00               	movlw	high main@dados
   573  000ADE  6E02               	movwf	zera_dados@dados+1,c
   574  000AE0  ECDE  F005         	call	_zera_dados	;wreg free
   575  000AE4  D76A               	goto	l34
   576  000AE6                     __end_of_main:
   577                           	opt stack 0
   578                           tblptru	equ	0xFF8
   579                           prodh	equ	0xFF4
   580                           prodl	equ	0xFF3
   581                           postinc0	equ	0xFEE
   582                           wreg	equ	0xFE8
   583                           indf2	equ	0xFDF
   584                           fsr2h	equ	0xFDA
   585                           fsr2l	equ	0xFD9
   586                           status	equ	0xFD8
   587                           
   588 ;; *************** function _zera_dados *****************
   589 ;; Defined at:
   590 ;;		line 18 in file "main.c"
   591 ;; Parameters:    Size  Location     Type
   592 ;;  dados           2    0[COMRAM] PTR struct .
   593 ;;		 -> main@dados(69), 
   594 ;; Auto vars:     Size  Location     Type
   595 ;;  i               1    2[COMRAM] unsigned char 
   596 ;; Return value:  Size  Location     Type
   597 ;;                  1    wreg      void 
   598 ;; Registers used:
   599 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
   600 ;; Tracked objects:
   601 ;;		On entry : 0/0
   602 ;;		On exit  : 0/0
   603 ;;		Unchanged: 0/0
   604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   605 ;;      Params:         2       0       0       0       0       0       0       0       0
   606 ;;      Locals:         1       0       0       0       0       0       0       0       0
   607 ;;      Temps:          0       0       0       0       0       0       0       0       0
   608 ;;      Totals:         3       0       0       0       0       0       0       0       0
   609 ;;Total ram usage:        3 bytes
   610 ;; Hardware stack levels used:    1
   611 ;; This function calls:
   612 ;;		Nothing
   613 ;; This function is called by:
   614 ;;		_main
   615 ;; This function uses a non-reentrant model
   616 ;;
   617                           
   618                           	psect	text1
   619  000BBC                     __ptext1:
   620                           	opt stack 0
   621  000BBC                     _zera_dados:
   622                           	opt stack 30
   623                           
   624                           ;main.c: 20: for (uint8_t i = 0; i < 64; i++) {
   625                           
   626                           ;incstack = 0
   627  000BBC  0E00               	movlw	0
   628  000BBE  6E03               	movwf	zera_dados@i,c
   629  000BC0                     l966:
   630  000BC0  0E3F               	movlw	63
   631  000BC2  6403               	cpfsgt	zera_dados@i,c
   632  000BC4  D001               	goto	l27
   633  000BC6  D010               	goto	u280
   634  000BC8                     l27:
   635                           
   636                           ;main.c: 21: dados->buff[i] = 0x00;
   637  000BC8  5003               	movf	zera_dados@i,w,c
   638  000BCA  0D01               	mullw	1
   639  000BCC  0E01               	movlw	1
   640  000BCE  26F3               	addwf	prodl,f,c
   641  000BD0  0E00               	movlw	0
   642  000BD2  22F4               	addwfc	prodh,f,c
   643  000BD4  50F3               	movf	prodl,w,c
   644  000BD6  2401               	addwf	zera_dados@dados,w,c
   645  000BD8  6ED9               	movwf	fsr2l,c
   646  000BDA  50F4               	movf	prodh,w,c
   647  000BDC  2002               	addwfc	zera_dados@dados+1,w,c
   648  000BDE  6EDA               	movwf	fsr2h,c
   649  000BE0  0E00               	movlw	0
   650  000BE2  6EDF               	movwf	indf2,c
   651  000BE4  2A03               	incf	zera_dados@i,f,c
   652  000BE6  D7EC               	goto	l966
   653  000BE8                     u280:
   654                           
   655                           ;main.c: 22: }
   656                           ;main.c: 23: dados->count = 0;
   657  000BE8  C001  FFD9         	movff	zera_dados@dados,fsr2l
   658  000BEC  C002  FFDA         	movff	zera_dados@dados+1,fsr2h
   659  000BF0  0E00               	movlw	0
   660  000BF2  6EDF               	movwf	indf2,c
   661                           
   662                           ;main.c: 24: dados->data_flag = 0;
   663  000BF4  EE20 F041          	lfsr	2,65
   664  000BF8  5001               	movf	zera_dados@dados,w,c
   665  000BFA  26D9               	addwf	fsr2l,f,c
   666  000BFC  5002               	movf	zera_dados@dados+1,w,c
   667  000BFE  22DA               	addwfc	fsr2h,f,c
   668  000C00  0E00               	movlw	0
   669  000C02  6EDE               	movwf	postinc2,c
   670  000C04  0E00               	movlw	0
   671  000C06  6EDD               	movwf	postdec2,c
   672  000C08  0012               	return		;funcret
   673  000C0A                     __end_of_zera_dados:
   674                           	opt stack 0
   675                           tblptru	equ	0xFF8
   676                           prodh	equ	0xFF4
   677                           prodl	equ	0xFF3
   678                           postinc0	equ	0xFEE
   679                           wreg	equ	0xFE8
   680                           indf2	equ	0xFDF
   681                           postinc2	equ	0xFDE
   682                           postdec2	equ	0xFDD
   683                           fsr2h	equ	0xFDA
   684                           fsr2l	equ	0xFD9
   685                           status	equ	0xFD8
   686                           
   687 ;; *************** function _uart_init *****************
   688 ;; Defined at:
   689 ;;		line 9 in file "comunicacao.c"
   690 ;; Parameters:    Size  Location     Type
   691 ;;		None
   692 ;; Auto vars:     Size  Location     Type
   693 ;;		None
   694 ;; Return value:  Size  Location     Type
   695 ;;                  1    wreg      void 
   696 ;; Registers used:
   697 ;;		wreg, status,2
   698 ;; Tracked objects:
   699 ;;		On entry : 0/0
   700 ;;		On exit  : 0/0
   701 ;;		Unchanged: 0/0
   702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   703 ;;      Params:         0       0       0       0       0       0       0       0       0
   704 ;;      Locals:         0       0       0       0       0       0       0       0       0
   705 ;;      Temps:          0       0       0       0       0       0       0       0       0
   706 ;;      Totals:         0       0       0       0       0       0       0       0       0
   707 ;;Total ram usage:        0 bytes
   708 ;; Hardware stack levels used:    1
   709 ;; This function calls:
   710 ;;		Nothing
   711 ;; This function is called by:
   712 ;;		_main
   713 ;; This function uses a non-reentrant model
   714 ;;
   715                           
   716                           	psect	text2
   717  000CB6                     __ptext2:
   718                           	opt stack 0
   719  000CB6                     _uart_init:
   720                           	opt stack 30
   721                           
   722                           ;comunicacao.c: 11: RCSTA = 0x90;
   723                           
   724                           ;incstack = 0
   725  000CB6  0E90               	movlw	144
   726  000CB8  6EAB               	movwf	4011,c	;volatile
   727                           
   728                           ;comunicacao.c: 12: TXSTA = 0x24;
   729  000CBA  0E24               	movlw	36
   730  000CBC  6EAC               	movwf	4012,c	;volatile
   731                           
   732                           ;comunicacao.c: 19: SPBRG = 51;
   733  000CBE  0E33               	movlw	51
   734  000CC0  6EAF               	movwf	4015,c	;volatile
   735  000CC2  0012               	return		;funcret
   736  000CC4                     __end_of_uart_init:
   737                           	opt stack 0
   738                           tblptru	equ	0xFF8
   739                           prodh	equ	0xFF4
   740                           prodl	equ	0xFF3
   741                           postinc0	equ	0xFEE
   742                           wreg	equ	0xFE8
   743                           indf2	equ	0xFDF
   744                           postinc2	equ	0xFDE
   745                           postdec2	equ	0xFDD
   746                           fsr2h	equ	0xFDA
   747                           fsr2l	equ	0xFD9
   748                           status	equ	0xFD8
   749                           
   750 ;; *************** function _uart_check_rx *****************
   751 ;; Defined at:
   752 ;;		line 22 in file "comunicacao.c"
   753 ;; Parameters:    Size  Location     Type
   754 ;;		None
   755 ;; Auto vars:     Size  Location     Type
   756 ;;  tempo           2    2[COMRAM] unsigned int 
   757 ;; Return value:  Size  Location     Type
   758 ;;                  2    0[COMRAM] short 
   759 ;; Registers used:
   760 ;;		wreg, status,2, status,0
   761 ;; Tracked objects:
   762 ;;		On entry : 0/0
   763 ;;		On exit  : 0/0
   764 ;;		Unchanged: 0/0
   765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   766 ;;      Params:         2       0       0       0       0       0       0       0       0
   767 ;;      Locals:         2       0       0       0       0       0       0       0       0
   768 ;;      Temps:          0       0       0       0       0       0       0       0       0
   769 ;;      Totals:         4       0       0       0       0       0       0       0       0
   770 ;;Total ram usage:        4 bytes
   771 ;; Hardware stack levels used:    1
   772 ;; This function calls:
   773 ;;		Nothing
   774 ;; This function is called by:
   775 ;;		_main
   776 ;; This function uses a non-reentrant model
   777 ;;
   778                           
   779                           	psect	text3
   780  000C54                     __ptext3:
   781                           	opt stack 0
   782  000C54                     _uart_check_rx:
   783                           	opt stack 30
   784                           
   785                           ;comunicacao.c: 24: uint16_t tempo;
   786                           ;comunicacao.c: 26: RCSTAbits.OERR = 0;
   787                           
   788                           ;incstack = 0
   789  000C54  92AB               	bcf	4011,1,c	;volatile
   790                           
   791                           ;comunicacao.c: 27: RCSTAbits.CREN = 0;
   792  000C56  98AB               	bcf	4011,4,c	;volatile
   793                           
   794                           ;comunicacao.c: 28: __nop();
   795  000C58  F000               	nop	
   796                           
   797                           ;comunicacao.c: 29: RCSTAbits.CREN = 1;
   798  000C5A  88AB               	bsf	4011,4,c	;volatile
   799                           
   800                           ;comunicacao.c: 31: tempo = 0xFFF;
   801  000C5C  0E0F               	movlw	15
   802  000C5E  6E04               	movwf	uart_check_rx@tempo+1,c
   803  000C60  6803               	setf	uart_check_rx@tempo,c
   804  000C62                     
   805                           ;comunicacao.c: 34: --tempo;
   806  000C62  0603               	decf	uart_check_rx@tempo,f,c
   807  000C64  A0D8               	btfss	status,0,c
   808  000C66  0604               	decf	uart_check_rx@tempo+1,f,c
   809                           
   810                           ;comunicacao.c: 35: } while (!RCIF && tempo > 0);
   811  000C68  BA9E               	btfsc	3998,5,c	;volatile
   812  000C6A  D004               	goto	u300
   813  000C6C  5003               	movf	uart_check_rx@tempo,w,c
   814  000C6E  1004               	iorwf	uart_check_rx@tempo+1,w,c
   815  000C70  A4D8               	btfss	status,2,c
   816  000C72  D7F7               	goto	l80
   817  000C74                     u300:
   818                           
   819                           ;comunicacao.c: 37: if (tempo > 0) {
   820  000C74  5003               	movf	uart_check_rx@tempo,w,c
   821  000C76  1004               	iorwf	uart_check_rx@tempo+1,w,c
   822  000C78  B4D8               	btfsc	status,2,c
   823  000C7A  D005               	goto	l84
   824                           
   825                           ;comunicacao.c: 38: return(0);
   826  000C7C  0E00               	movlw	0
   827  000C7E  6E02               	movwf	?_uart_check_rx+1,c
   828  000C80  0E00               	movlw	0
   829  000C82  6E01               	movwf	?_uart_check_rx,c
   830  000C84  0012               	return	
   831  000C86                     l84:
   832                           
   833                           ;comunicacao.c: 39: }
   834                           ;comunicacao.c: 41: return(1);
   835  000C86  0E00               	movlw	0
   836  000C88  6E02               	movwf	?_uart_check_rx+1,c
   837  000C8A  0E01               	movlw	1
   838  000C8C  6E01               	movwf	?_uart_check_rx,c
   839  000C8E  0012               	return	
   840  000C90                     __end_of_uart_check_rx:
   841                           	opt stack 0
   842                           tblptru	equ	0xFF8
   843                           prodh	equ	0xFF4
   844                           prodl	equ	0xFF3
   845                           postinc0	equ	0xFEE
   846                           wreg	equ	0xFE8
   847                           indf2	equ	0xFDF
   848                           postinc2	equ	0xFDE
   849                           postdec2	equ	0xFDD
   850                           fsr2h	equ	0xFDA
   851                           fsr2l	equ	0xFD9
   852                           status	equ	0xFD8
   853                           
   854 ;; *************** function _send_string_data *****************
   855 ;; Defined at:
   856 ;;		line 58 in file "comunicacao.c"
   857 ;; Parameters:    Size  Location     Type
   858 ;;  string          2    5[COMRAM] PTR unsigned char 
   859 ;;		 -> STR_6(21), STR_5(15), STR_4(8), STR_3(8), 
   860 ;;		 -> STR_2(17), STR_1(13), 
   861 ;;  dados           2    7[COMRAM] PTR struct .
   862 ;;		 -> main@dados(69), 
   863 ;; Auto vars:     Size  Location     Type
   864 ;;  i               1   78[COMRAM] unsigned char 
   865 ;;  aux            64   14[COMRAM] unsigned char [64]
   866 ;;  count           1   79[COMRAM] unsigned char 
   867 ;; Return value:  Size  Location     Type
   868 ;;                  1    wreg      void 
   869 ;; Registers used:
   870 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   871 ;; Tracked objects:
   872 ;;		On entry : 0/0
   873 ;;		On exit  : 0/0
   874 ;;		Unchanged: 0/0
   875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   876 ;;      Params:         4       0       0       0       0       0       0       0       0
   877 ;;      Locals:        66       0       0       0       0       0       0       0       0
   878 ;;      Temps:          5       0       0       0       0       0       0       0       0
   879 ;;      Totals:        75       0       0       0       0       0       0       0       0
   880 ;;Total ram usage:       75 bytes
   881 ;; Hardware stack levels used:    1
   882 ;; Hardware stack levels required when called:    1
   883 ;; This function calls:
   884 ;;		_calc_bcc
   885 ;;		_uart_send_byte
   886 ;; This function is called by:
   887 ;;		_main
   888 ;; This function uses a non-reentrant model
   889 ;;
   890                           
   891                           	psect	text4
   892  000854                     __ptext4:
   893                           	opt stack 0
   894  000854                     _send_string_data:
   895                           	opt stack 29
   896                           
   897                           ;comunicacao.c: 60: uint8_t aux[64] = {0};
   898                           
   899                           ;incstack = 0
   900  000854  EE20  F0A5         	lfsr	2,send_string_data@F3860
   901  000858  EE10  F00F         	lfsr	1,send_string_data@aux
   902  00085C  0E3F               	movlw	63
   903  00085E                     u321:
   904  00085E  CFDB FFE3          	movff	plusw2,plusw1
   905  000862  06E8               	decf	wreg,f,c
   906  000864  E2FC               	bc	u321
   907                           
   908                           ;comunicacao.c: 62: aux[0] = 0x02;
   909  000866  0E02               	movlw	2
   910  000868  6E0F               	movwf	send_string_data@aux,c
   911                           
   912                           ;comunicacao.c: 63: aux[1] = dados->addr_from;
   913  00086A  EE20 F043          	lfsr	2,67
   914  00086E  5008               	movf	send_string_data@dados,w,c
   915  000870  26D9               	addwf	fsr2l,f,c
   916  000872  5009               	movf	send_string_data@dados+1,w,c
   917  000874  22DA               	addwfc	fsr2h,f,c
   918  000876  50DF               	movf	indf2,w,c
   919  000878  6E10               	movwf	send_string_data@aux+1,c
   920                           
   921                           ;comunicacao.c: 64: aux[2] = 0x09;
   922  00087A  0E09               	movlw	9
   923  00087C  6E11               	movwf	send_string_data@aux+2,c
   924                           
   925                           ;comunicacao.c: 65: aux[3] = 0x70;
   926  00087E  0E70               	movlw	112
   927  000880  6E12               	movwf	send_string_data@aux+3,c
   928                           
   929                           ;comunicacao.c: 67: uint8_t count;
   930                           ;comunicacao.c: 69: for (count = 0; count < string[count] != 0 && count+5 < 64; count++)
      +                           {
   931  000882  0E00               	movlw	0
   932  000884  6E50               	movwf	send_string_data@count,c
   933  000886  D01F               	goto	l102
   934  000888                     
   935                           ;comunicacao.c: 72: aux[count + 5] = string[count];
   936  000888  5050               	movf	send_string_data@count,w,c
   937  00088A  0D01               	mullw	1
   938  00088C  C006  F00A         	movff	send_string_data@string,??_send_string_data
   939  000890  C007  F00B         	movff	send_string_data@string+1,??_send_string_data+1
   940  000894  50F3               	movf	prodl,w,c
   941  000896  260A               	addwf	??_send_string_data,f,c
   942  000898  50F4               	movf	prodh,w,c
   943  00089A  220B               	addwfc	??_send_string_data+1,f,c
   944  00089C  C00A  FFF6         	movff	??_send_string_data,tblptrl
   945  0008A0  C00B  FFF7         	movff	??_send_string_data+1,tblptrh
   946  0008A4                     	if	0	;tblptru may be non-zero
   947  0008A4                     	endif
   948  0008A4                     	if	0	;tblptru may be non-zero
   949  0008A4                     	endif
   950  0008A4  5050               	movf	send_string_data@count,w,c
   951  0008A6  6E0C               	movwf	(??_send_string_data+2)& (0+255),c
   952  0008A8  6A0D               	clrf	(??_send_string_data+3)& (0+255),c
   953  0008AA  0E05               	movlw	5
   954  0008AC  260C               	addwf	??_send_string_data+2,f,c
   955  0008AE  0E00               	movlw	0
   956  0008B0  220D               	addwfc	??_send_string_data+3,f,c
   957  0008B2  0E0F               	movlw	low send_string_data@aux
   958  0008B4  240C               	addwf	??_send_string_data+2,w,c
   959  0008B6  6ED9               	movwf	fsr2l,c
   960  0008B8  0E00               	movlw	high send_string_data@aux
   961  0008BA  200D               	addwfc	??_send_string_data+3,w,c
   962  0008BC  6EDA               	movwf	fsr2h,c
   963  0008BE  0008               	tblrd		*
   964  0008C0  CFF5 FFDF          	movff	tablat,indf2
   965  0008C4  2A50               	incf	send_string_data@count,f,c
   966  0008C6                     l102:
   967  0008C6  5050               	movf	send_string_data@count,w,c
   968  0008C8  0D01               	mullw	1
   969  0008CA  C006  F00A         	movff	send_string_data@string,??_send_string_data
   970  0008CE  C007  F00B         	movff	send_string_data@string+1,??_send_string_data+1
   971  0008D2  50F3               	movf	prodl,w,c
   972  0008D4  260A               	addwf	??_send_string_data,f,c
   973  0008D6  50F4               	movf	prodh,w,c
   974  0008D8  220B               	addwfc	??_send_string_data+1,f,c
   975  0008DA  C00A  FFF6         	movff	??_send_string_data,tblptrl
   976  0008DE  C00B  FFF7         	movff	??_send_string_data+1,tblptrh
   977  0008E2                     	if	0	;tblptru may be non-zero
   978  0008E2                     	endif
   979  0008E2                     	if	0	;tblptru may be non-zero
   980  0008E2                     	endif
   981  0008E2  0008               	tblrd		*
   982  0008E4  50F5               	movf	tablat,w,c
   983  0008E6  6050               	cpfslt	send_string_data@count,c
   984  0008E8  D00F               	goto	u340
   985  0008EA  5050               	movf	send_string_data@count,w,c
   986  0008EC  6E0A               	movwf	??_send_string_data& (0+255),c
   987  0008EE  6A0B               	clrf	(??_send_string_data+1)& (0+255),c
   988  0008F0  0E05               	movlw	5
   989  0008F2  260A               	addwf	??_send_string_data,f,c
   990  0008F4  0E00               	movlw	0
   991  0008F6  220B               	addwfc	??_send_string_data+1,f,c
   992  0008F8  BE0B               	btfsc	??_send_string_data+1,7,c
   993  0008FA  D7C6               	goto	l103
   994  0008FC  500B               	movf	??_send_string_data+1,w,c
   995  0008FE  E104               	bnz	l106
   996  000900  0E40               	movlw	64
   997  000902  5C0A               	subwf	??_send_string_data,w,c
   998  000904  A0D8               	btfss	status,0,c
   999  000906  D7C0               	goto	l103
  1000  000908                     u340:
  1001  000908                     l106:
  1002                           
  1003                           ;comunicacao.c: 73: }
  1004                           ;comunicacao.c: 74: aux[4] = count;
  1005  000908  C050  F013         	movff	send_string_data@count,send_string_data@aux+4
  1006                           
  1007                           ;comunicacao.c: 75: aux[5 + count] = (uint8_t) 0;
  1008  00090C  5050               	movf	send_string_data@count,w,c
  1009  00090E  6E0A               	movwf	??_send_string_data& (0+255),c
  1010  000910  6A0B               	clrf	(??_send_string_data+1)& (0+255),c
  1011  000912  0E05               	movlw	5
  1012  000914  260A               	addwf	??_send_string_data,f,c
  1013  000916  0E00               	movlw	0
  1014  000918  220B               	addwfc	??_send_string_data+1,f,c
  1015  00091A  0E0F               	movlw	low send_string_data@aux
  1016  00091C  240A               	addwf	??_send_string_data,w,c
  1017  00091E  6ED9               	movwf	fsr2l,c
  1018  000920  0E00               	movlw	high send_string_data@aux
  1019  000922  200B               	addwfc	??_send_string_data+1,w,c
  1020  000924  6EDA               	movwf	fsr2h,c
  1021  000926  0E00               	movlw	0
  1022  000928  6EDF               	movwf	indf2,c
  1023                           
  1024                           ;comunicacao.c: 76: aux[5 + count] = (uint8_t) calc_bcc(dados);
  1025  00092A  C008  F001         	movff	send_string_data@dados,calc_bcc@data
  1026  00092E  C009  F002         	movff	send_string_data@dados+1,calc_bcc@data+1
  1027  000932  EC05  F006         	call	_calc_bcc	;wreg free
  1028  000936  6E0A               	movwf	??_send_string_data& (0+255),c
  1029  000938  5050               	movf	send_string_data@count,w,c
  1030  00093A  6E0B               	movwf	(??_send_string_data+1)& (0+255),c
  1031  00093C  6A0C               	clrf	(??_send_string_data+2)& (0+255),c
  1032  00093E  0E05               	movlw	5
  1033  000940  260B               	addwf	??_send_string_data+1,f,c
  1034  000942  0E00               	movlw	0
  1035  000944  220C               	addwfc	??_send_string_data+2,f,c
  1036  000946  0E0F               	movlw	low send_string_data@aux
  1037  000948  240B               	addwf	??_send_string_data+1,w,c
  1038  00094A  6ED9               	movwf	fsr2l,c
  1039  00094C  0E00               	movlw	high send_string_data@aux
  1040  00094E  200C               	addwfc	??_send_string_data+2,w,c
  1041  000950  6EDA               	movwf	fsr2h,c
  1042  000952  C00A  FFDF         	movff	??_send_string_data,indf2
  1043                           
  1044                           ;comunicacao.c: 78: for (uint8_t i = 0; i < count+5; i++) {
  1045  000956  0E00               	movlw	0
  1046  000958  6E4F               	movwf	send_string_data@i,c
  1047  00095A  D00C               	goto	l107
  1048  00095C                     
  1049                           ;comunicacao.c: 79: uart_send_byte(aux[i]);
  1050  00095C  504F               	movf	send_string_data@i,w,c
  1051  00095E  0D01               	mullw	1
  1052  000960  0E0F               	movlw	low send_string_data@aux
  1053  000962  24F3               	addwf	prodl,w,c
  1054  000964  6ED9               	movwf	fsr2l,c
  1055  000966  0E00               	movlw	high send_string_data@aux
  1056  000968  20F4               	addwfc	prodh,w,c
  1057  00096A  6EDA               	movwf	fsr2h,c
  1058  00096C  50DF               	movf	indf2,w,c
  1059  00096E  EC53  F006         	call	_uart_send_byte
  1060  000972  2A4F               	incf	send_string_data@i,f,c
  1061  000974                     l107:
  1062  000974  5050               	movf	send_string_data@count,w,c
  1063  000976  6E0A               	movwf	??_send_string_data& (0+255),c
  1064  000978  6A0B               	clrf	(??_send_string_data+1)& (0+255),c
  1065  00097A  0E05               	movlw	5
  1066  00097C  260A               	addwf	??_send_string_data,f,c
  1067  00097E  0E00               	movlw	0
  1068  000980  220B               	addwfc	??_send_string_data+1,f,c
  1069  000982  504F               	movf	send_string_data@i,w,c
  1070  000984  6E0C               	movwf	(??_send_string_data+2)& (0+255),c
  1071  000986  6A0D               	clrf	(??_send_string_data+3)& (0+255),c
  1072  000988  500A               	movf	??_send_string_data,w,c
  1073  00098A  5C0C               	subwf	??_send_string_data+2,w,c
  1074  00098C  500D               	movf	??_send_string_data+3,w,c
  1075  00098E  0A80               	xorlw	128
  1076  000990  6E0E               	movwf	(??_send_string_data+4)& (0+255),c
  1077  000992  500B               	movf	??_send_string_data+1,w,c
  1078  000994  0A80               	xorlw	128
  1079  000996  580E               	subwfb	(??_send_string_data+4)& (0+255),w,c
  1080  000998  B0D8               	btfsc	status,0,c
  1081  00099A  0012               	return	
  1082  00099C  D7DF               	goto	l108
  1083  00099E                     __end_of_send_string_data:
  1084                           	opt stack 0
  1085                           tblptru	equ	0xFF8
  1086                           tblptrh	equ	0xFF7
  1087                           tblptrl	equ	0xFF6
  1088                           tablat	equ	0xFF5
  1089                           prodh	equ	0xFF4
  1090                           prodl	equ	0xFF3
  1091                           postinc0	equ	0xFEE
  1092                           wreg	equ	0xFE8
  1093                           plusw1	equ	0xFE3
  1094                           indf2	equ	0xFDF
  1095                           postinc2	equ	0xFDE
  1096                           postdec2	equ	0xFDD
  1097                           plusw2	equ	0xFDB
  1098                           fsr2h	equ	0xFDA
  1099                           fsr2l	equ	0xFD9
  1100                           status	equ	0xFD8
  1101                           
  1102 ;; *************** function _uart_send_byte *****************
  1103 ;; Defined at:
  1104 ;;		line 50 in file "comunicacao.c"
  1105 ;; Parameters:    Size  Location     Type
  1106 ;;  byte            1    wreg     unsigned char 
  1107 ;; Auto vars:     Size  Location     Type
  1108 ;;  byte            1    0[COMRAM] unsigned char 
  1109 ;; Return value:  Size  Location     Type
  1110 ;;                  1    wreg      void 
  1111 ;; Registers used:
  1112 ;;		wreg
  1113 ;; Tracked objects:
  1114 ;;		On entry : 0/0
  1115 ;;		On exit  : 0/0
  1116 ;;		Unchanged: 0/0
  1117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1118 ;;      Params:         0       0       0       0       0       0       0       0       0
  1119 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1120 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1121 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1122 ;;Total ram usage:        1 bytes
  1123 ;; Hardware stack levels used:    1
  1124 ;; This function calls:
  1125 ;;		Nothing
  1126 ;; This function is called by:
  1127 ;;		_send_string_data
  1128 ;; This function uses a non-reentrant model
  1129 ;;
  1130                           
  1131                           	psect	text5
  1132  000CA6                     __ptext5:
  1133                           	opt stack 0
  1134  000CA6                     _uart_send_byte:
  1135                           	opt stack 29
  1136                           
  1137                           ;incstack = 0
  1138                           ;uart_send_byte@byte stored from wreg
  1139  000CA6  6E01               	movwf	uart_send_byte@byte,c
  1140  000CA8                     
  1141                           ;comunicacao.c: 53: while (TXIF == 0);
  1142  000CA8  A89E               	btfss	3998,4,c	;volatile
  1143  000CAA  D7FE               	goto	l946
  1144                           
  1145                           ;comunicacao.c: 54: TXREG = byte;
  1146  000CAC  C001  FFAD         	movff	uart_send_byte@byte,4013	;volatile
  1147  000CB0  B2AC               	btfsc	4012,1,c	;volatile
  1148  000CB2  0012               	return	
  1149  000CB4  D7FD               	goto	l95
  1150  000CB6                     __end_of_uart_send_byte:
  1151                           	opt stack 0
  1152                           tblptru	equ	0xFF8
  1153                           tblptrh	equ	0xFF7
  1154                           tblptrl	equ	0xFF6
  1155                           tablat	equ	0xFF5
  1156                           prodh	equ	0xFF4
  1157                           prodl	equ	0xFF3
  1158                           postinc0	equ	0xFEE
  1159                           wreg	equ	0xFE8
  1160                           plusw1	equ	0xFE3
  1161                           indf2	equ	0xFDF
  1162                           postinc2	equ	0xFDE
  1163                           postdec2	equ	0xFDD
  1164                           plusw2	equ	0xFDB
  1165                           fsr2h	equ	0xFDA
  1166                           fsr2l	equ	0xFD9
  1167                           status	equ	0xFD8
  1168                           
  1169 ;; *************** function _check_data *****************
  1170 ;; Defined at:
  1171 ;;		line 95 in file "comunicacao.c"
  1172 ;; Parameters:    Size  Location     Type
  1173 ;;  data            2    5[COMRAM] PTR struct .
  1174 ;;		 -> main@dados(69), 
  1175 ;; Auto vars:     Size  Location     Type
  1176 ;;		None
  1177 ;; Return value:  Size  Location     Type
  1178 ;;                  1    wreg      enum E3818
  1179 ;; Registers used:
  1180 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1181 ;; Tracked objects:
  1182 ;;		On entry : 0/0
  1183 ;;		On exit  : 0/0
  1184 ;;		Unchanged: 0/0
  1185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1186 ;;      Params:         2       0       0       0       0       0       0       0       0
  1187 ;;      Locals:         4       0       0       0       0       0       0       0       0
  1188 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1189 ;;      Totals:         7       0       0       0       0       0       0       0       0
  1190 ;;Total ram usage:        7 bytes
  1191 ;; Hardware stack levels used:    1
  1192 ;; Hardware stack levels required when called:    1
  1193 ;; This function calls:
  1194 ;;		_calc_bcc
  1195 ;; This function is called by:
  1196 ;;		_main
  1197 ;; This function uses a non-reentrant model
  1198 ;;
  1199                           
  1200                           	psect	text6
  1201  000AE6                     __ptext6:
  1202                           	opt stack 0
  1203  000AE6                     _check_data:
  1204                           	opt stack 29
  1205                           
  1206                           ;comunicacao.c: 97: if (data->buff[0] != 0x02) {
  1207                           
  1208                           ;incstack = 0
  1209  000AE6  EE20 F001          	lfsr	2,1
  1210  000AEA  5006               	movf	check_data@data,w,c
  1211  000AEC  26D9               	addwf	fsr2l,f,c
  1212  000AEE  5007               	movf	check_data@data+1,w,c
  1213  000AF0  22DA               	addwfc	fsr2h,f,c
  1214  000AF2  0E02               	movlw	2
  1215  000AF4  18DE               	xorwf	postinc2,w,c
  1216  000AF6  B4D8               	btfsc	status,2,c
  1217  000AF8  D002               	goto	l119
  1218                           
  1219                           ;comunicacao.c: 98: return ERR_STX;
  1220  000AFA  0E00               	movlw	0
  1221  000AFC  0012               	return	
  1222  000AFE                     l119:
  1223                           
  1224                           ;comunicacao.c: 99: }
  1225                           ;comunicacao.c: 100: if (data->buff[1] != 0x09) {
  1226  000AFE  EE20 F002          	lfsr	2,2
  1227  000B02  5006               	movf	check_data@data,w,c
  1228  000B04  26D9               	addwf	fsr2l,f,c
  1229  000B06  5007               	movf	check_data@data+1,w,c
  1230  000B08  22DA               	addwfc	fsr2h,f,c
  1231  000B0A  0E09               	movlw	9
  1232  000B0C  18DE               	xorwf	postinc2,w,c
  1233  000B0E  B4D8               	btfsc	status,2,c
  1234  000B10  D002               	goto	l121
  1235                           
  1236                           ;comunicacao.c: 101: return ERR_IGNORE_MSG;
  1237  000B12  0E01               	movlw	1
  1238  000B14  0012               	return	
  1239  000B16                     l121:
  1240                           
  1241                           ;comunicacao.c: 102: }
  1242                           ;comunicacao.c: 103: if (calc_bcc(data) != 0) {
  1243  000B16  C006  F001         	movff	check_data@data,calc_bcc@data
  1244  000B1A  C007  F002         	movff	check_data@data+1,calc_bcc@data+1
  1245  000B1E  EC05  F006         	call	_calc_bcc	;wreg free
  1246  000B22  0900               	iorlw	0
  1247  000B24  B4D8               	btfsc	status,2,c
  1248  000B26  D002               	goto	l122
  1249                           
  1250                           ;comunicacao.c: 104: return ERR_BCC;
  1251  000B28  0E02               	movlw	2
  1252  000B2A  0012               	return	
  1253  000B2C                     l122:
  1254                           
  1255                           ;comunicacao.c: 105: }
  1256                           ;comunicacao.c: 107: data->addr_from = data->buff[2];
  1257  000B2C  EE20 F003          	lfsr	2,3
  1258  000B30  5006               	movf	check_data@data,w,c
  1259  000B32  26D9               	addwf	fsr2l,f,c
  1260  000B34  5007               	movf	check_data@data+1,w,c
  1261  000B36  22DA               	addwfc	fsr2h,f,c
  1262  000B38  EE10 F043          	lfsr	1,67
  1263  000B3C  5006               	movf	check_data@data,w,c
  1264  000B3E  26E1               	addwf	fsr1l,f,c
  1265  000B40  5007               	movf	check_data@data+1,w,c
  1266  000B42  22E2               	addwfc	fsr1h,f,c
  1267  000B44  CFDF FFE7          	movff	indf2,indf1
  1268                           
  1269                           ;comunicacao.c: 109: if (data->buff[3] == 0x21) {
  1270  000B48  EE20 F004          	lfsr	2,4
  1271  000B4C  5006               	movf	check_data@data,w,c
  1272  000B4E  26D9               	addwf	fsr2l,f,c
  1273  000B50  5007               	movf	check_data@data+1,w,c
  1274  000B52  22DA               	addwfc	fsr2h,f,c
  1275  000B54  0E21               	movlw	33
  1276  000B56  18DE               	xorwf	postinc2,w,c
  1277  000B58  A4D8               	btfss	status,2,c
  1278  000B5A  D012               	goto	l123
  1279                           
  1280                           ;comunicacao.c: 110: return(data->buff[4] & 0x01 == 1 ? LIGA_LED1 : DESLIGA_LED1);
  1281  000B5C  EE20 F005          	lfsr	2,5
  1282  000B60  5006               	movf	check_data@data,w,c
  1283  000B62  26D9               	addwf	fsr2l,f,c
  1284  000B64  5007               	movf	check_data@data+1,w,c
  1285  000B66  22DA               	addwfc	fsr2h,f,c
  1286  000B68  B0DF               	btfsc	indf2,0,c
  1287  000B6A  D004               	goto	l125
  1288  000B6C  0E00               	movlw	0
  1289  000B6E  6E0A               	movwf	_check_data$327+1,c
  1290  000B70  0E06               	movlw	6
  1291  000B72  D003               	goto	L1
  1292  000B74                     l125:
  1293  000B74  0E00               	movlw	0
  1294  000B76  6E0A               	movwf	_check_data$327+1,c
  1295  000B78  0E04               	movlw	4
  1296  000B7A                     L1:
  1297  000B7A  6E09               	movwf	_check_data$327,c
  1298  000B7C  5009               	movf	_check_data$327,w,c
  1299                           
  1300                           ;comunicacao.c: 111: } else if (data->buff[3] == 0x22) {
  1301  000B7E  0012               	return	
  1302  000B80                     l123:
  1303  000B80  EE20 F004          	lfsr	2,4
  1304  000B84  5006               	movf	check_data@data,w,c
  1305  000B86  26D9               	addwf	fsr2l,f,c
  1306  000B88  5007               	movf	check_data@data+1,w,c
  1307  000B8A  22DA               	addwfc	fsr2h,f,c
  1308  000B8C  0E22               	movlw	34
  1309  000B8E  18DE               	xorwf	postinc2,w,c
  1310  000B90  A4D8               	btfss	status,2,c
  1311  000B92  D012               	goto	l129
  1312                           
  1313                           ;comunicacao.c: 112: return(data->buff[4] & 0x01 == 1 ? LIGA_LED2 : DESLIGA_LED2);
  1314  000B94  EE20 F005          	lfsr	2,5
  1315  000B98  5006               	movf	check_data@data,w,c
  1316  000B9A  26D9               	addwf	fsr2l,f,c
  1317  000B9C  5007               	movf	check_data@data+1,w,c
  1318  000B9E  22DA               	addwfc	fsr2h,f,c
  1319  000BA0  B0DF               	btfsc	indf2,0,c
  1320  000BA2  D004               	goto	l131
  1321  000BA4  0E00               	movlw	0
  1322  000BA6  6E0C               	movwf	_check_data$328+1,c
  1323  000BA8  0E07               	movlw	7
  1324  000BAA  D003               	goto	L2
  1325  000BAC                     l131:
  1326  000BAC  0E00               	movlw	0
  1327  000BAE  6E0C               	movwf	_check_data$328+1,c
  1328  000BB0  0E05               	movlw	5
  1329  000BB2                     L2:
  1330  000BB2  6E0B               	movwf	_check_data$328,c
  1331  000BB4  500B               	movf	_check_data$328,w,c
  1332                           
  1333                           ;comunicacao.c: 113: } else {
  1334  000BB6  0012               	return	
  1335  000BB8                     l129:
  1336                           
  1337                           ;comunicacao.c: 114: return ERR_NAK;
  1338  000BB8  0E03               	movlw	3
  1339  000BBA  0012               	return	
  1340  000BBC                     __end_of_check_data:
  1341                           	opt stack 0
  1342                           tblptru	equ	0xFF8
  1343                           tblptrh	equ	0xFF7
  1344                           tblptrl	equ	0xFF6
  1345                           tablat	equ	0xFF5
  1346                           prodh	equ	0xFF4
  1347                           prodl	equ	0xFF3
  1348                           postinc0	equ	0xFEE
  1349                           wreg	equ	0xFE8
  1350                           indf1	equ	0xFE7
  1351                           plusw1	equ	0xFE3
  1352                           fsr1h	equ	0xFE2
  1353                           fsr1l	equ	0xFE1
  1354                           indf2	equ	0xFDF
  1355                           postinc2	equ	0xFDE
  1356                           postdec2	equ	0xFDD
  1357                           plusw2	equ	0xFDB
  1358                           fsr2h	equ	0xFDA
  1359                           fsr2l	equ	0xFD9
  1360                           status	equ	0xFD8
  1361                           
  1362 ;; *************** function _calc_bcc *****************
  1363 ;; Defined at:
  1364 ;;		line 83 in file "comunicacao.c"
  1365 ;; Parameters:    Size  Location     Type
  1366 ;;  data            2    0[COMRAM] PTR struct .
  1367 ;;		 -> main@dados(69), 
  1368 ;; Auto vars:     Size  Location     Type
  1369 ;;  i               1    4[COMRAM] unsigned char 
  1370 ;;  bcc             1    3[COMRAM] unsigned char 
  1371 ;; Return value:  Size  Location     Type
  1372 ;;                  1    wreg      unsigned char 
  1373 ;; Registers used:
  1374 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1375 ;; Tracked objects:
  1376 ;;		On entry : 0/0
  1377 ;;		On exit  : 0/0
  1378 ;;		Unchanged: 0/0
  1379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1380 ;;      Params:         2       0       0       0       0       0       0       0       0
  1381 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1382 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1383 ;;      Totals:         5       0       0       0       0       0       0       0       0
  1384 ;;Total ram usage:        5 bytes
  1385 ;; Hardware stack levels used:    1
  1386 ;; This function calls:
  1387 ;;		Nothing
  1388 ;; This function is called by:
  1389 ;;		_send_string_data
  1390 ;;		_check_data
  1391 ;; This function uses a non-reentrant model
  1392 ;;
  1393                           
  1394                           	psect	text7
  1395  000C0A                     __ptext7:
  1396                           	opt stack 0
  1397  000C0A                     _calc_bcc:
  1398                           	opt stack 29
  1399                           
  1400                           ;comunicacao.c: 85: uint8_t bcc = data->buff[0];
  1401                           
  1402                           ;incstack = 0
  1403  000C0A  EE20 F001          	lfsr	2,1
  1404  000C0E  5001               	movf	calc_bcc@data,w,c
  1405  000C10  26D9               	addwf	fsr2l,f,c
  1406  000C12  5002               	movf	calc_bcc@data+1,w,c
  1407  000C14  22DA               	addwfc	fsr2h,f,c
  1408  000C16  50DF               	movf	indf2,w,c
  1409  000C18  6E04               	movwf	calc_bcc@bcc,c
  1410                           
  1411                           ;comunicacao.c: 88: for (uint8_t i = 1; i < data->count; i++) {
  1412  000C1A  0E01               	movlw	1
  1413  000C1C  6E05               	movwf	calc_bcc@i,c
  1414  000C1E  D010               	goto	l113
  1415  000C20                     
  1416                           ;comunicacao.c: 89: bcc = (uint8_t) (bcc ^ data->buff[i]);
  1417  000C20  5005               	movf	calc_bcc@i,w,c
  1418  000C22  0D01               	mullw	1
  1419  000C24  0E01               	movlw	1
  1420  000C26  26F3               	addwf	prodl,f,c
  1421  000C28  0E00               	movlw	0
  1422  000C2A  22F4               	addwfc	prodh,f,c
  1423  000C2C  50F3               	movf	prodl,w,c
  1424  000C2E  2401               	addwf	calc_bcc@data,w,c
  1425  000C30  6ED9               	movwf	fsr2l,c
  1426  000C32  50F4               	movf	prodh,w,c
  1427  000C34  2002               	addwfc	calc_bcc@data+1,w,c
  1428  000C36  6EDA               	movwf	fsr2h,c
  1429  000C38  50DF               	movf	indf2,w,c
  1430  000C3A  1804               	xorwf	calc_bcc@bcc,w,c
  1431  000C3C  6E04               	movwf	calc_bcc@bcc,c
  1432  000C3E  2A05               	incf	calc_bcc@i,f,c
  1433  000C40                     l113:
  1434  000C40  C001  FFD9         	movff	calc_bcc@data,fsr2l
  1435  000C44  C002  FFDA         	movff	calc_bcc@data+1,fsr2h
  1436  000C48  50DE               	movf	postinc2,w,c
  1437  000C4A  5C05               	subwf	calc_bcc@i,w,c
  1438  000C4C  A0D8               	btfss	status,0,c
  1439  000C4E  D7E8               	goto	l114
  1440                           
  1441                           ;comunicacao.c: 90: }
  1442                           ;comunicacao.c: 92: return(bcc);
  1443  000C50  5004               	movf	calc_bcc@bcc,w,c
  1444  000C52  0012               	return	
  1445  000C54                     __end_of_calc_bcc:
  1446                           	opt stack 0
  1447                           tblptru	equ	0xFF8
  1448                           tblptrh	equ	0xFF7
  1449                           tblptrl	equ	0xFF6
  1450                           tablat	equ	0xFF5
  1451                           prodh	equ	0xFF4
  1452                           prodl	equ	0xFF3
  1453                           postinc0	equ	0xFEE
  1454                           wreg	equ	0xFE8
  1455                           indf1	equ	0xFE7
  1456                           plusw1	equ	0xFE3
  1457                           fsr1h	equ	0xFE2
  1458                           fsr1l	equ	0xFE1
  1459                           indf2	equ	0xFDF
  1460                           postinc2	equ	0xFDE
  1461                           postdec2	equ	0xFDD
  1462                           plusw2	equ	0xFDB
  1463                           fsr2h	equ	0xFDA
  1464                           fsr2l	equ	0xFD9
  1465                           status	equ	0xFD8
  1466                           tblptru	equ	0xFF8
  1467                           tblptrh	equ	0xFF7
  1468                           tblptrl	equ	0xFF6
  1469                           tablat	equ	0xFF5
  1470                           prodh	equ	0xFF4
  1471                           prodl	equ	0xFF3
  1472                           postinc0	equ	0xFEE
  1473                           wreg	equ	0xFE8
  1474                           indf1	equ	0xFE7
  1475                           plusw1	equ	0xFE3
  1476                           fsr1h	equ	0xFE2
  1477                           fsr1l	equ	0xFE1
  1478                           indf2	equ	0xFDF
  1479                           postinc2	equ	0xFDE
  1480                           postdec2	equ	0xFDD
  1481                           plusw2	equ	0xFDB
  1482                           fsr2h	equ	0xFDA
  1483                           fsr2l	equ	0xFD9
  1484                           status	equ	0xFD8
  1485                           
  1486                           	psect	rparam
  1487  0000                     tblptru	equ	0xFF8
  1488                           tblptrh	equ	0xFF7
  1489                           tblptrl	equ	0xFF6
  1490                           tablat	equ	0xFF5
  1491                           prodh	equ	0xFF4
  1492                           prodl	equ	0xFF3
  1493                           postinc0	equ	0xFEE
  1494                           wreg	equ	0xFE8
  1495                           indf1	equ	0xFE7
  1496                           plusw1	equ	0xFE3
  1497                           fsr1h	equ	0xFE2
  1498                           fsr1l	equ	0xFE1
  1499                           indf2	equ	0xFDF
  1500                           postinc2	equ	0xFDE
  1501                           postdec2	equ	0xFDD
  1502                           plusw2	equ	0xFDB
  1503                           fsr2h	equ	0xFDA
  1504                           fsr2l	equ	0xFD9
  1505                           status	equ	0xFD8


Data Sizes:
    Strings     82
    Constant    0
    Data        0
    BSS         64
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     80      80
    BANK0           160     69     133
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    check_data@data	PTR struct . size(2) Largest target is 69
		 -> main@dados(BANK0[69]), 

    calc_bcc@data	PTR struct . size(2) Largest target is 69
		 -> main@dados(BANK0[69]), 

    send_string_data@string	PTR unsigned char  size(2) Largest target is 21
		 -> STR_6(CODE[21]), STR_5(CODE[15]), STR_4(CODE[8]), STR_3(CODE[8]), 
		 -> STR_2(CODE[17]), STR_1(CODE[13]), 

    send_string_data@dados	PTR struct . size(2) Largest target is 69
		 -> main@dados(BANK0[69]), 

    zera_dados@dados	PTR struct . size(2) Largest target is 69
		 -> main@dados(BANK0[69]), 


Critical Paths under _main in COMRAM

    _main->_send_string_data
    _send_string_data->_calc_bcc
    _check_data->_calc_bcc

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                69    69      0    3046
                                              0 BANK0     69    69      0
                         _check_data
                   _send_string_data
                      _uart_check_rx
                          _uart_init
                         _zera_dados
 ---------------------------------------------------------------------------------
 (1) _zera_dados                                           3     1      2     286
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _uart_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _uart_check_rx                                        4     2      2      46
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _send_string_data                                    75    71      4    1771
                                              5 COMRAM    75    71      4
                           _calc_bcc
                     _uart_send_byte
 ---------------------------------------------------------------------------------
 (2) _uart_send_byte                                       1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _check_data                                           7     5      2     632
                                              5 COMRAM     7     5      2
                           _calc_bcc
 ---------------------------------------------------------------------------------
 (2) _calc_bcc                                             5     3      2     310
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _check_data
     _calc_bcc
   _send_string_data
     _calc_bcc
     _uart_send_byte
   _uart_check_rx
   _uart_init
   _zera_dados

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     45      85       5       83.1%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     50      50       1       84.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      D5      20        0.0%
DATA                 0      0      D5       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Thu May 31 01:38:17 2018

                       l40 0A08                         l41 0AD8                         l42 0A1E  
                       l34 09BA                         l27 0BC8                         l43 0A34  
                       l35 09FC                         l44 0A4A                         l45 0A60  
                       l46 0A78                         l39 0A9A                         l47 0A7C  
                       l80 0C62                         l48 0A80                         l49 0A84  
                       l84 0C86                         l95 0CB0                __CFG_BORV$3 000000  
             __CFG_CP0$OFF 000000               __CFG_CP1$OFF 000000               __CFG_CP2$OFF 000000  
             __CFG_CP3$OFF 000000                __CFG_LVP$ON 000000                        l102 08C6  
                      l103 0888                        l113 0C40                        l121 0B16  
                      l114 0C20                        l122 0B2C                        l106 0908  
                      l131 0BAC                        l123 0B80                        l107 0974  
                      l108 095C                        l125 0B74                        l119 0AFE  
                      l129 0BB8                        l946 0CA8                        l966 0BC0  
             __CFG_CPB$OFF 000000                        u300 0C74                        u321 085E  
                      u340 0908                        u430 09C6                        u280 0BE8  
             __CFG_CPD$OFF 000000               __CFG_BOR$OFF 000000                        prod 000FF3  
                      wreg 000FE8               __CFG_FOSC$HS 000000               __CFG_WDT$OFF 000000  
          zera_dados@dados 0001                       STR_1 0836                       STR_2 0816  
                     STR_3 0843                       STR_4 084B                       STR_5 0827  
                     STR_6 0801                       _RCIF 007CF5                       _TRMT 007D61  
                     _TXIF 007CF4                       _main 099E                       fsr1h 000FE2  
                     fsr2h 000FDA                       indf1 000FE7                       indf2 000FDF  
                     fsr1l 000FE1                       fsr2l 000FD9                       prodh 000FF4  
                     prodl 000FF3                       start 0000              __CFG_IESO$OFF 000000  
            __CFG_MCLRE$ON 000000               ___param_bank 000000           ??_uart_send_byte 0001  
            __CFG_PLLDIV$2 000000                      ?_main 0001                      _RCREG 000FAE  
                    _RCSTA 000FAB                      _SPBRG 000FAF              __CFG_USBDIV$1 000000  
                    _TXREG 000FAD                      _TXSTA 000FAC              __CFG_PWRT$OFF 000000  
            __CFG_WRT0$OFF 000000              __CFG_WRT1$OFF 000000              __CFG_WRT2$OFF 000000  
            __CFG_WRT3$OFF 000000             __CFG_EBTR0$OFF 000000             __CFG_FCMEN$OFF 000000  
           __CFG_EBTR1$OFF 000000             __CFG_EBTR2$OFF 000000             __CFG_EBTR3$OFF 000000  
            __CFG_WRTB$OFF 000000              __CFG_WRTC$OFF 000000              __CFG_WRTD$OFF 000000  
           __CFG_EBTRB$OFF 000000  __size_of_send_string_data 014A                      tablat 000FF5  
                    plusw1 000FE3                      plusw2 000FDB                      status 000FD8  
           __CFG_ICPRT$OFF 000000            __initialization 0C90               __end_of_main 0AE6  
                   ??_main 0051              __activetblptr 000002            __CFG_CCP2MX$OFF 000000  
                   _ADCON1 000FC1           __end_of_calc_bcc 0C54             __CFG_XINST$OFF 000000  
      send_string_data@aux 000F                     clear_0 0C96               __mediumconst 0000  
                   tblptrh 000FF7                     tblptrl 000FF6                     tblptru 000FF8  
               __accesstop 0060    __end_of__initialization 0C9C            __CFG_PBADEN$OFF 000000  
            ___rparam_used 000001             __pcstackCOMRAM 0001           _send_string_data 0854  
               __pbssBANK0 00A5                 _check_data 0AE6      __end_of_uart_check_rx 0C90  
                ?_calc_bcc 0001         __size_of_uart_init 000E            __CFG_VREGEN$OFF 000000  
                  __Hparam 0000                    __Lparam 0000               __psmallconst 0800  
          __CFG_STVREN$OFF 000000                    __pcinit 0C90                    __ramtop 0800  
                  __ptext0 099E                    __ptext1 0BBC                    __ptext2 0CB6  
                  __ptext3 0C54                    __ptext4 0854                    __ptext5 0CA6  
                  __ptext6 0AE6                    __ptext7 0C0A                 ??_calc_bcc 0003  
     end_of_initialization 0C9C                ?_check_data 0006              __Lmediumconst 0000  
        __end_of_uart_init 0CC4               calc_bcc@data 0001                  _RCSTAbits 000FAB  
                  postdec2 000FDD                    postinc0 000FEE                    postinc2 000FDE  
                _PORTDbits 000F83    __size_of_uart_send_byte 0010                  _TRISDbits 000F95  
               _zera_dados 0BBC   __end_of_send_string_data 099E             check_data@data 0006  
        send_string_data@i 004F        __size_of_check_data 00D6        start_initialization 0C90  
       uart_check_rx@tempo 0003           __CFG_LPT1OSC$OFF 000000     send_string_data@string 0006  
              zera_dados@i 0003              __pcstackBANK0 0060          __size_of_calc_bcc 004A  
              ?_zera_dados 0001                  calc_bcc@i 0005                __smallconst 0800  
           _uart_send_byte 0CA6               ??_check_data 0008     __size_of_uart_check_rx 003C  
              calc_bcc@bcc 0004           __CFG_WDTPS$32768 000000                  _uart_init 0CB6  
   __end_of_uart_send_byte 0CB6        __size_of_zera_dados 004E         __end_of_check_data 0BBC  
                main@dados 0060      send_string_data@F3860 00A5         uart_send_byte@byte 0001  
                 __Hrparam 0000      send_string_data@dados 0008                   __Lrparam 0000  
    send_string_data@count 0050                 ?_uart_init 0001          ?_send_string_data 0006  
            _uart_check_rx 0C54            ?_uart_send_byte 0001         ??_send_string_data 000A  
                 _calc_bcc 0C0A              __size_of_main 0148             ?_uart_check_rx 0001  
    __CFG_CPUDIV$OSC1_PLL2 000000               ??_zera_dados 0003                ??_uart_init 0001  
       __end_of_zera_dados 0C0A             _check_data$327 0009             _check_data$328 000B  
          ??_uart_check_rx 0003  
